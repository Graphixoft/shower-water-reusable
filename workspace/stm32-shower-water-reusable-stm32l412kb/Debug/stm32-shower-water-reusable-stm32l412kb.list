
stm32-shower-water-reusable-stm32l412kb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800bf20  0800bf20  0001bf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b8  0800c3b8  00020970  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c0  0800c3c0  00020970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000970  20000000  0800c3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e28  20000970  0800cd38  00020970  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004798  0800cd38  00024798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020970  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f7c  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000485b  00000000  00000000  0004591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b50  00000000  00000000  0004a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001928  00000000  00000000  0004bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f251  00000000  00000000  0004d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018601  00000000  00000000  0006c841  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b7367  00000000  00000000  00084e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c1a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007754  00000000  00000000  0013c224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000970 	.word	0x20000970
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf08 	.word	0x0800bf08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000974 	.word	0x20000974
 80001cc:	0800bf08 	.word	0x0800bf08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <getButtonState>:
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
uint32_t lastButtonTime = 0;

ButtonState getButtonState() {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	 * press (buttons still down), or if release we trigger press
	 * (downtime>filter)
	 */
	static uint8_t previousState = 0;
	static uint32_t previousStateChange = 0;
	const uint16_t timeout = 1000;
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	80bb      	strh	r3, [r7, #4]
	uint8_t currentState;
	currentState = getButton();
 800057c:	f000 f98e 	bl	800089c <getButton>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]

	if (currentState)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d004      	beq.n	8000594 <getButtonState+0x24>
		lastButtonTime = xTaskGetTickCount();
 800058a:	f008 f92d 	bl	80087e8 <xTaskGetTickCount>
 800058e:	4602      	mov	r2, r0
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <getButtonState+0xb8>)
 8000592:	601a      	str	r2, [r3, #0]
	if (currentState == previousState) {
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <getButtonState+0xbc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	79fa      	ldrb	r2, [r7, #7]
 800059a:	429a      	cmp	r2, r3
 800059c:	d116      	bne.n	80005cc <getButtonState+0x5c>
		if (currentState == 0)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d101      	bne.n	80005a8 <getButtonState+0x38>
			return BUTTON_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	e03a      	b.n	800061e <getButtonState+0xae>
		if ((xTaskGetTickCount() - previousStateChange) > timeout) {
 80005a8:	f008 f91e 	bl	80087e8 <xTaskGetTickCount>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <getButtonState+0xc0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d906      	bls.n	80005c8 <getButtonState+0x58>
			// User has been holding the button down
			// We want to send a button is held message
			if (currentState == 0x01)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <getButtonState+0x54>
				return BUTTON_LONG;
 80005c0:	2302      	movs	r3, #2
 80005c2:	e02c      	b.n	800061e <getButtonState+0xae>
			else
				return BUTTON_NONE; // Both being held case, we dont long hold this
 80005c4:	2300      	movs	r3, #0
 80005c6:	e02a      	b.n	800061e <getButtonState+0xae>
		} else
			return BUTTON_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	e028      	b.n	800061e <getButtonState+0xae>
	} else {
		// A change in button state has occurred
		ButtonState retVal = BUTTON_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71bb      	strb	r3, [r7, #6]
		if (currentState) {
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00b      	beq.n	80005ee <getButtonState+0x7e>
			// User has pressed a button down (nothing done on down)
			if (currentState != previousState) {
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <getButtonState+0xbc>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d015      	beq.n	800060c <getButtonState+0x9c>
				// There has been a change in the button states
				// If there is a rising edge on one of the buttons from double press we
				// want to mask that out As users are having issues with not release
				// both at once
				if (previousState == 0x01)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <getButtonState+0xbc>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d111      	bne.n	800060c <getButtonState+0x9c>
					currentState = 0x01;
 80005e8:	2301      	movs	r3, #1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	e00e      	b.n	800060c <getButtonState+0x9c>
			}
		} else {
			// User has released buttons
			// If they previously had the buttons down we want to check if they were <
			// long hold and trigger a press
			if ((xTaskGetTickCount() - previousStateChange) < timeout) {
 80005ee:	f008 f8fb 	bl	80087e8 <xTaskGetTickCount>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <getButtonState+0xc0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1ad2      	subs	r2, r2, r3
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d205      	bcs.n	800060c <getButtonState+0x9c>
				// The user didn't hold the button for long
				// So we send button press

				if (previousState == 0x01)
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <getButtonState+0xbc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d101      	bne.n	800060c <getButtonState+0x9c>
					retVal = BUTTON_SHORT;
 8000608:	2301      	movs	r3, #1
 800060a:	71bb      	strb	r3, [r7, #6]
			}
		}
		previousState = currentState;
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <getButtonState+0xbc>)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	7013      	strb	r3, [r2, #0]
		previousStateChange = xTaskGetTickCount();
 8000612:	f008 f8e9 	bl	80087e8 <xTaskGetTickCount>
 8000616:	4602      	mov	r2, r0
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <getButtonState+0xc0>)
 800061a:	601a      	str	r2, [r3, #0]
		return retVal;
 800061c:	79bb      	ldrb	r3, [r7, #6]
	}
	return BUTTON_NONE;
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000098c 	.word	0x2000098c
 800062c:	20000990 	.word	0x20000990
 8000630:	20000994 	.word	0x20000994

08000634 <ws2812_init>:
GPIO_InitTypeDef GPIO_InitStruct;
DMA_HandleTypeDef hdma_tim;

/* Functions -----------------------------------------------*/

void ws2812_init(TIM_HandleTypeDef *htim1, TIM_OC_InitTypeDef *sConfigOC) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	TimHandle = htim1;
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <ws2812_init+0x34>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6013      	str	r3, [r2, #0]
	sConfigOC = sConfig;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <ws2812_init+0x38>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	603b      	str	r3, [r7, #0]

	fillBufferBlack();
 800064a:	f000 f8c1 	bl	80007d0 <fillBufferBlack>

	/*##-3- Start PWM signal generation in DMA mode ############################*/
	HAL_TIM_PWM_Start_DMA(TimHandle, TIM_CHANNEL_1, (uint32_t *) LEDbuffer, LED_BUFFER_SIZE);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <ws2812_init+0x34>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f240 13e5 	movw	r3, #485	; 0x1e5
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <ws2812_init+0x3c>)
 8000658:	2100      	movs	r1, #0
 800065a:	f003 fbb5 	bl	8003dc8 <HAL_TIM_PWM_Start_DMA>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200043f8 	.word	0x200043f8
 800066c:	200043f4 	.word	0x200043f4
 8000670:	20000998 	.word	0x20000998

08000674 <ws2812_update>:

void ws2812_update(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(TimHandle, sConfig, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start_DMA(TimHandle, TIM_CHANNEL_1, (uint32_t *) LEDbuffer, LED_BUFFER_SIZE);
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <ws2812_update+0x18>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f240 13e5 	movw	r3, #485	; 0x1e5
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <ws2812_update+0x1c>)
 8000682:	2100      	movs	r1, #0
 8000684:	f003 fba0 	bl	8003dc8 <HAL_TIM_PWM_Start_DMA>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200043f8 	.word	0x200043f8
 8000690:	20000998 	.word	0x20000998

08000694 <setLEDcolor>:

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000694:	b480      	push	{r7}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	70fb      	strb	r3, [r7, #3]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70bb      	strb	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	707b      	strb	r3, [r7, #1]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	e013      	b.n	80006e4 <setLEDcolor+0x50>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 80006bc:	78ba      	ldrb	r2, [r7, #2]
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <setLEDcolor+0x3c>
 80006cc:	210d      	movs	r1, #13
 80006ce:	e000      	b.n	80006d2 <setLEDcolor+0x3e>
 80006d0:	2106      	movs	r1, #6
 80006d2:	f107 0208 	add.w	r2, r7, #8
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	4413      	add	r3, r2
 80006da:	460a      	mov	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	3301      	adds	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d9e8      	bls.n	80006bc <setLEDcolor+0x28>
	for (i = 0; i < 8; i++) // RED
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
 80006ee:	e014      	b.n	800071a <setLEDcolor+0x86>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 80006f0:	78fa      	ldrb	r2, [r7, #3]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <setLEDcolor+0x70>
 8000700:	220d      	movs	r2, #13
 8000702:	e000      	b.n	8000706 <setLEDcolor+0x72>
 8000704:	2206      	movs	r2, #6
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	3308      	adds	r3, #8
 800070a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800070e:	440b      	add	r3, r1
 8000710:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // RED
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	3301      	adds	r3, #1
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	2b07      	cmp	r3, #7
 800071e:	d9e7      	bls.n	80006f0 <setLEDcolor+0x5c>
	for (i = 0; i < 8; i++) // BLUE
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
 8000724:	e014      	b.n	8000750 <setLEDcolor+0xbc>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000726:	787a      	ldrb	r2, [r7, #1]
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <setLEDcolor+0xa6>
 8000736:	220d      	movs	r2, #13
 8000738:	e000      	b.n	800073c <setLEDcolor+0xa8>
 800073a:	2206      	movs	r2, #6
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	3310      	adds	r3, #16
 8000740:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000744:	440b      	add	r3, r1
 8000746:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // BLUE
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	3301      	adds	r3, #1
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	2b07      	cmp	r3, #7
 8000754:	d9e7      	bls.n	8000726 <setLEDcolor+0x92>

	for (i = 0; i < 24; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
 800075a:	e012      	b.n	8000782 <setLEDcolor+0xee>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 800075c:	6a3a      	ldr	r2, [r7, #32]
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	461a      	mov	r2, r3
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	4413      	add	r3, r2
 800076c:	3332      	adds	r3, #50	; 0x32
 800076e:	f107 0108 	add.w	r1, r7, #8
 8000772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000774:	440a      	add	r2, r1
 8000776:	7811      	ldrb	r1, [r2, #0]
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <setLEDcolor+0x100>)
 800077a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	3301      	adds	r3, #1
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	2b17      	cmp	r3, #23
 8000786:	d9e9      	bls.n	800075c <setLEDcolor+0xc8>
}
 8000788:	bf00      	nop
 800078a:	372c      	adds	r7, #44	; 0x2c
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	20000998 	.word	0x20000998

08000798 <setWHOLEcolor>:

void setWHOLEcolor(uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	460b      	mov	r3, r1
 80007a4:	71bb      	strb	r3, [r7, #6]
 80007a6:	4613      	mov	r3, r2
 80007a8:	717b      	strb	r3, [r7, #5]
	uint32_t index;

	for (index = 0; index < LED_NUMBER; index++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e008      	b.n	80007c2 <setWHOLEcolor+0x2a>
		setLEDcolor(index, RED, GREEN, BLUE);
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	79f9      	ldrb	r1, [r7, #7]
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f7ff ff6c 	bl	8000694 <setLEDcolor>
	for (index = 0; index < LED_NUMBER; index++)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d9f3      	bls.n	80007b0 <setWHOLEcolor+0x18>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <fillBufferBlack>:

void fillBufferBlack(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e00a      	b.n	80007f6 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <fillBufferBlack+0x90>)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b31      	cmp	r3, #49	; 0x31
 80007fa:	d9f1      	bls.n	80007e0 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	e00a      	b.n	8000818 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <fillBufferBlack+0x90>)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	2206      	movs	r2, #6
 800080a:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3301      	adds	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800081e:	d3f0      	bcc.n	8000802 <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000820:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <fillBufferBlack+0x90>)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	2206      	movs	r2, #6
 8000828:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	e00a      	b.n	800084c <fillBufferBlack+0x7c>
		LEDbuffer[buffIndex] = 0;
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <fillBufferBlack+0x90>)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	4413      	add	r3, r2
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b31      	cmp	r3, #49	; 0x31
 8000850:	d9f1      	bls.n	8000836 <fillBufferBlack+0x66>
	}
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000998 	.word	0x20000998

08000864 <Switch_Callback>:
	}

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
}*/

void Switch_Callback(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000868:	2009      	movs	r0, #9
 800086a:	f001 fb84 	bl	8001f76 <HAL_NVIC_DisableIRQ>

	buttonState = getButtonState();
 800086e:	f7ff fe7f 	bl	8000570 <getButtonState>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <Switch_Callback+0x30>)
 8000878:	701a      	strb	r2, [r3, #0]
	if(buttonState == BUTTON_LONG){
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Switch_Callback+0x30>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d102      	bne.n	8000888 <Switch_Callback+0x24>
		isAborted = true;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <Switch_Callback+0x34>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
	}

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000888:	2009      	movs	r0, #9
 800088a:	f001 fb66 	bl	8001f5a <HAL_NVIC_EnableIRQ>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20004464 	.word	0x20004464
 8000898:	20000b88 	.word	0x20000b88

0800089c <getButton>:

uint8_t getButton() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(controlSwitch_GPIO_Port, controlSwitch_Pin) == GPIO_PIN_RESET ?
 80008a0:	2108      	movs	r1, #8
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f002 f887 	bl	80029b8 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
			1 : 0;
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf0c      	ite	eq
 80008b0:	2301      	moveq	r3, #1
 80008b2:	2300      	movne	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <water_valve_control>:

void water_valve_control(bool activate){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	if(activate){
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <water_valve_control+0x24>
		printf("Turn on the valve to put the cold water into the cistern");
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <water_valve_control+0x40>)
 80008ce:	f00a fbd3 	bl	800b078 <iprintf>
		HAL_GPIO_WritePin(relayControl_GPIO_Port, relayControl_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f002 f885 	bl	80029e8 <HAL_GPIO_WritePin>
	}else{
		printf("Turn off the valve to put the water into the normal circuit");
		HAL_GPIO_WritePin(relayControl_GPIO_Port, relayControl_Pin, GPIO_PIN_SET);
	}
}
 80008de:	e008      	b.n	80008f2 <water_valve_control+0x36>
		printf("Turn off the valve to put the water into the normal circuit");
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <water_valve_control+0x44>)
 80008e2:	f00a fbc9 	bl	800b078 <iprintf>
		HAL_GPIO_WritePin(relayControl_GPIO_Port, relayControl_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f002 f87b 	bl	80029e8 <HAL_GPIO_WritePin>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	0800bfb0 	.word	0x0800bfb0
 8000900:	0800bfec 	.word	0x0800bfec

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f001 f9e3 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f8c8 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 fa78 	bl	8000e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000914:	f000 fa18 	bl	8000d48 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000918:	f000 fa46 	bl	8000da8 <MX_DMA_Init>
  MX_TIM1_Init();
 800091c:	f000 f92e 	bl	8000b7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000920:	f000 f9e2 	bl	8000ce8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application running on STM32L412KB-Nucleo board!\r\n");
 8000924:	4843      	ldr	r0, [pc, #268]	; (8000a34 <main+0x130>)
 8000926:	f00a fc1b 	bl	800b160 <puts>

  /* Init the system */
  water_valve_control(false); //Water valve off
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff ffc6 	bl	80008bc <water_valve_control>
  ws2812_init(&htim1, NULL);
 8000930:	2100      	movs	r1, #0
 8000932:	4841      	ldr	r0, [pc, #260]	; (8000a38 <main+0x134>)
 8000934:	f7ff fe7e 	bl	8000634 <ws2812_init>
  fillBufferBlack();
 8000938:	f7ff ff4a 	bl	80007d0 <fillBufferBlack>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800093c:	f005 fc88 	bl	8006250 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonBinarySem */
  buttonBinarySemHandle = osSemaphoreNew(1, 1, &buttonBinarySem_attributes);
 8000940:	4a3e      	ldr	r2, [pc, #248]	; (8000a3c <main+0x138>)
 8000942:	2101      	movs	r1, #1
 8000944:	2001      	movs	r0, #1
 8000946:	f006 f891 	bl	8006a6c <osSemaphoreNew>
 800094a:	4602      	mov	r2, r0
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <main+0x13c>)
 800094e:	601a      	str	r2, [r3, #0]

  /* creation of readTemperatureBinarySem */
  readTemperatureBinarySemHandle = osSemaphoreNew(1, 1, &readTemperatureBinarySem_attributes);
 8000950:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <main+0x140>)
 8000952:	2101      	movs	r1, #1
 8000954:	2001      	movs	r0, #1
 8000956:	f006 f889 	bl	8006a6c <osSemaphoreNew>
 800095a:	4602      	mov	r2, r0
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <main+0x144>)
 800095e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(buttonBinarySemHandle , osWaitForever);
 8000960:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <main+0x13c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	4618      	mov	r0, r3
 800096a:	f006 f91d 	bl	8006ba8 <osSemaphoreAcquire>
  osSemaphoreAcquire(readTemperatureBinarySemHandle , osWaitForever);
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <main+0x144>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f04f 31ff 	mov.w	r1, #4294967295
 8000976:	4618      	mov	r0, r3
 8000978:	f006 f916 	bl	8006ba8 <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of updateTimer */
  updateTimerHandle = osTimerNew(vTimerUpdateCallback, osTimerPeriodic, NULL, &updateTimer_attributes);
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <main+0x148>)
 800097e:	2200      	movs	r2, #0
 8000980:	2101      	movs	r1, #1
 8000982:	4833      	ldr	r0, [pc, #204]	; (8000a50 <main+0x14c>)
 8000984:	f005 fe66 	bl	8006654 <osTimerNew>
 8000988:	4602      	mov	r2, r0
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x150>)
 800098c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(updateTimerHandle, UPDATE_INTERVAL);
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <main+0x150>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	210f      	movs	r1, #15
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fee1 	bl	800675c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(Main_Task, NULL, &MainTask_attributes);
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <main+0x154>)
 800099c:	2100      	movs	r1, #0
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <main+0x158>)
 80009a0:	f005 fcc0 	bl	8006324 <osThreadNew>
 80009a4:	4602      	mov	r2, r0
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <main+0x15c>)
 80009a8:	601a      	str	r2, [r3, #0]

  /* creation of circularRingRed */
  circularRingRedHandle = osThreadNew(CircularRingRedTask, NULL, &circularRingRed_attributes);
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <main+0x160>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	482e      	ldr	r0, [pc, #184]	; (8000a68 <main+0x164>)
 80009b0:	f005 fcb8 	bl	8006324 <osThreadNew>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <main+0x168>)
 80009b8:	601a      	str	r2, [r3, #0]

  /* creation of ReadTemperature */
  ReadTemperatureHandle = osThreadNew(readTemperatureTask, NULL, &ReadTemperature_attributes);
 80009ba:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <main+0x16c>)
 80009bc:	2100      	movs	r1, #0
 80009be:	482d      	ldr	r0, [pc, #180]	; (8000a74 <main+0x170>)
 80009c0:	f005 fcb0 	bl	8006324 <osThreadNew>
 80009c4:	4602      	mov	r2, r0
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <main+0x174>)
 80009c8:	601a      	str	r2, [r3, #0]

  /* creation of circularRingGre */
  circularRingGreHandle = osThreadNew(CircularRingGreen, NULL, &circularRingGre_attributes);
 80009ca:	4a2c      	ldr	r2, [pc, #176]	; (8000a7c <main+0x178>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	482c      	ldr	r0, [pc, #176]	; (8000a80 <main+0x17c>)
 80009d0:	f005 fca8 	bl	8006324 <osThreadNew>
 80009d4:	4602      	mov	r2, r0
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <main+0x180>)
 80009d8:	601a      	str	r2, [r3, #0]

  /* creation of errorTask */
  errorTaskHandle = osThreadNew(ErrorTask, NULL, &errorTask_attributes);
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <main+0x184>)
 80009dc:	2100      	movs	r1, #0
 80009de:	482b      	ldr	r0, [pc, #172]	; (8000a8c <main+0x188>)
 80009e0:	f005 fca0 	bl	8006324 <osThreadNew>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <main+0x18c>)
 80009e8:	601a      	str	r2, [r3, #0]

  /* creation of errorSignalRing */
  errorSignalRingHandle = osThreadNew(ErrorSignalRingLedTask, NULL, &errorSignalRing_attributes);
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <main+0x190>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	482a      	ldr	r0, [pc, #168]	; (8000a98 <main+0x194>)
 80009f0:	f005 fc98 	bl	8006324 <osThreadNew>
 80009f4:	4602      	mov	r2, r0
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <main+0x198>)
 80009f8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(ReadTemperatureHandle);
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <main+0x174>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fd36 	bl	8006470 <osThreadSuspend>
  osThreadSuspend(circularRingRedHandle);
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <main+0x168>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 fd31 	bl	8006470 <osThreadSuspend>
  osThreadSuspend(circularRingGreHandle);
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <main+0x180>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fd2c 	bl	8006470 <osThreadSuspend>
  osThreadSuspend(errorSignalRingHandle);
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <main+0x198>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fd27 	bl	8006470 <osThreadSuspend>
  osThreadSuspend(errorTaskHandle);
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <main+0x18c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fd22 	bl	8006470 <osThreadSuspend>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a2c:	f005 fc44 	bl	80062b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x12c>
 8000a32:	bf00      	nop
 8000a34:	0800c028 	.word	0x0800c028
 8000a38:	2000462c 	.word	0x2000462c
 8000a3c:	0800c2a8 	.word	0x0800c2a8
 8000a40:	20004624 	.word	0x20004624
 8000a44:	0800c2b8 	.word	0x0800c2b8
 8000a48:	20004468 	.word	0x20004468
 8000a4c:	0800c298 	.word	0x0800c298
 8000a50:	08001311 	.word	0x08001311
 8000a54:	20004680 	.word	0x20004680
 8000a58:	0800c1c0 	.word	0x0800c1c0
 8000a5c:	08000f1d 	.word	0x08000f1d
 8000a60:	20004470 	.word	0x20004470
 8000a64:	0800c1e4 	.word	0x0800c1e4
 8000a68:	08000ff1 	.word	0x08000ff1
 8000a6c:	2000446c 	.word	0x2000446c
 8000a70:	0800c208 	.word	0x0800c208
 8000a74:	08001009 	.word	0x08001009
 8000a78:	20004460 	.word	0x20004460
 8000a7c:	0800c22c 	.word	0x0800c22c
 8000a80:	08001241 	.word	0x08001241
 8000a84:	2000467c 	.word	0x2000467c
 8000a88:	0800c250 	.word	0x0800c250
 8000a8c:	0800125d 	.word	0x0800125d
 8000a90:	20004678 	.word	0x20004678
 8000a94:	0800c274 	.word	0x0800c274
 8000a98:	080012f5 	.word	0x080012f5
 8000a9c:	200043fc 	.word	0x200043fc

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0a4      	sub	sp, #144	; 0x90
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aaa:	2244      	movs	r2, #68	; 0x44
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00a fad9 	bl	800b066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2234      	movs	r2, #52	; 0x34
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00a facb 	bl	800b066 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad0:	f001 ffc6 	bl	8002a60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemClock_Config+0xd8>)
 8000ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ada:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <SystemClock_Config+0xd8>)
 8000adc:	f023 0318 	bic.w	r3, r3, #24
 8000ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae8:	f001 ffd8 	bl	8002a9c <HAL_PWREx_ControlVoltageScaling>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000af2:	f000 fc29 	bl	8001348 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000af6:	2314      	movs	r3, #20
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f818 	bl	8002b48 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b1e:	f000 fc13 	bl	8001348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fc69 	bl	8003414 <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b48:	f000 fbfe 	bl	8001348 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fe90 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b66:	f000 fbef 	bl	8001348 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b6a:	f003 f80f 	bl	8003b8c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3790      	adds	r7, #144	; 0x90
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09a      	sub	sp, #104	; 0x68
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	222c      	movs	r2, #44	; 0x2c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00a fa55 	bl	800b066 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbc:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bbe:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <MX_TIM1_Init+0x160>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (uint32_t)((SystemCoreClock / TIMER_CLOCK_FREQ) - 1);
 8000bc2:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <MX_TIM1_Init+0x164>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a47      	ldr	r2, [pc, #284]	; (8000ce4 <MX_TIM1_Init+0x168>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0d9b      	lsrs	r3, r3, #22
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bd2:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIMER_PERIOD-1;
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bdc:	2213      	movs	r2, #19
 8000bde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf2:	4839      	ldr	r0, [pc, #228]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bf4:	f002 ffda 	bl	8003bac <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000bfe:	f000 fba3 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c10:	f003 fcfa 	bl	8004608 <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000c1a:	f000 fb95 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1e:	482e      	ldr	r0, [pc, #184]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c20:	f003 f870 	bl	8003d04 <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8000c2a:	f000 fb8d 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c42:	f004 fa49 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c4c:	f000 fb7c 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c50:	2360      	movs	r3, #96	; 0x60
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = (TIMER_PERIOD * 2 / 3);
 8000c54:	230d      	movs	r3, #13
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c76:	f003 fbb7 	bl	80043e8 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c80:	f000 fb62 	bl	8001348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000cba:	f004 fa73 	bl	80051a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000cc4:	f000 fb40 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000cca:	f000 fbb9 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3768      	adds	r7, #104	; 0x68
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000462c 	.word	0x2000462c
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	200008fc 	.word	0x200008fc
 8000ce4:	431bde83 	.word	0x431bde83

08000ce8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cee:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <MX_USART1_UART_Init+0x5c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART1_UART_Init+0x58>)
 8000d2c:	f004 fad0 	bl	80052d0 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 fb07 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004504 	.word	0x20004504
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_USART2_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x58>)
 8000d8c:	f004 faa0 	bl	80052d0 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 fad7 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20004684 	.word	0x20004684
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_DMA_Init+0x58>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <MX_DMA_Init+0x58>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6493      	str	r3, [r2, #72]	; 0x48
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_DMA_Init+0x58>)
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f001 f8a9 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dd0:	200c      	movs	r0, #12
 8000dd2:	f001 f8c2 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f001 f8a1 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000de0:	200e      	movs	r0, #14
 8000de2:	f001 f8ba 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	200f      	movs	r0, #15
 8000dec:	f001 f899 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f001 f8b2 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a2b      	ldr	r2, [pc, #172]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayControl_GPIO_Port, relayControl_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f001 fdbd 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2108      	movs	r1, #8
 8000e72:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <MX_GPIO_Init+0xe4>)
 8000e74:	f001 fdb8 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : controlSwitch_Pin */
  GPIO_InitStruct.Pin = controlSwitch_Pin;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_GPIO_Init+0xe8>)
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(controlSwitch_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 fb4f 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : relayControl_Pin */
  GPIO_InitStruct.Pin = relayControl_Pin;
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(relayControl_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f001 fb40 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_GPIO_Init+0xe4>)
 8000ec8:	f001 fb32 	bl	8002530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2106      	movs	r1, #6
 8000ed0:	2009      	movs	r0, #9
 8000ed2:	f001 f826 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ed6:	2009      	movs	r0, #9
 8000ed8:	f001 f83f 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	10210000 	.word	0x10210000

08000ef0 <__io_putchar>:
 * \param[in]       ch: Character to send
 * \param[in]       f: File pointer
 * \return          Written character
 */
#ifdef __GNUC__
int __io_putchar(int ch) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
#else
int fputc(int ch, FILE* fil) {
#endif
    uint8_t c = (uint8_t)ch;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, &c, 1, 100);
 8000efe:	f107 010f 	add.w	r1, r7, #15
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <__io_putchar+0x28>)
 8000f08:	f004 fa65 	bl	80053d6 <HAL_UART_Transmit>
    return ch;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20004684 	.word	0x20004684

08000f1c <Main_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Main_Task */
void Main_Task(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadSuspend(ReadTemperatureHandle);
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <Main_Task+0xbc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 faa1 	bl	8006470 <osThreadSuspend>
	osThreadSuspend(circularRingRedHandle);
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <Main_Task+0xc0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f005 fa9c 	bl	8006470 <osThreadSuspend>
	osThreadSuspend(circularRingGreHandle);
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <Main_Task+0xc4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fa97 	bl	8006470 <osThreadSuspend>
	}
#endif

#if 1
	for(;;){
		if (buttonState== BUTTON_SHORT)
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <Main_Task+0xc8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d1fb      	bne.n	8000f42 <Main_Task+0x26>
		{
			// Resume the readTemperature task
			osThreadResume(ReadTemperatureHandle);
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <Main_Task+0xbc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fac2 	bl	80064d8 <osThreadResume>
			//osSemaphoreRelease(readTemperatureBinarySemHandle);

			// Activate the relay to open the valve for the water
			water_valve_control(true);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fcb1 	bl	80008bc <water_valve_control>

			// Resume the led ring task
			osThreadResume(circularRingRedHandle);
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <Main_Task+0xc0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 faba 	bl	80064d8 <osThreadResume>

			while(actual_temp < CORRECT_TEMPERATURE && !isAborted);
 8000f64:	bf00      	nop
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <Main_Task+0xcc>)
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	d506      	bpl.n	8000f88 <Main_Task+0x6c>
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <Main_Task+0xd0>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f083 0301 	eor.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ee      	bne.n	8000f66 <Main_Task+0x4a>

			if(!isAborted){
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <Main_Task+0xd0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d01a      	beq.n	8000fcc <Main_Task+0xb0>
				// Desactivate the relay to close the valve because the temperature of the water is good !
				water_valve_control(false);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fc90 	bl	80008bc <water_valve_control>

				//Suspend temperature en led ring task
				//osThreadSuspend(readTemperatureTask);
				osThreadSuspend(circularRingRedHandle);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <Main_Task+0xc0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fa65 	bl	8006470 <osThreadSuspend>

				osThreadResume(circularRingGreHandle);
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <Main_Task+0xc4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fa94 	bl	80064d8 <osThreadResume>

				osDelay(4000);
 8000fb0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000fb4:	f005 fb0a 	bl	80065cc <osDelay>

				osThreadSuspend(circularRingGreHandle);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <Main_Task+0xc4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fa57 	bl	8006470 <osThreadSuspend>
				fillBufferBlack();
 8000fc2:	f7ff fc05 	bl	80007d0 <fillBufferBlack>
				HAL_NVIC_SystemReset();
 8000fc6:	f000 ffe4 	bl	8001f92 <HAL_NVIC_SystemReset>
 8000fca:	e7ba      	b.n	8000f42 <Main_Task+0x26>
			}else{
				// Desactivate the relay to close the valve because the temperature of the water is good !
				water_valve_control(false);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fc75 	bl	80008bc <water_valve_control>
				osDelay(4000);

				osThreadSuspend(circularRingRedHandle);
				fillBufferBlack();
				osThreadTerminate(MainTaskHandle);*/
				HAL_NVIC_SystemReset();
 8000fd2:	f000 ffde 	bl	8001f92 <HAL_NVIC_SystemReset>
		if (buttonState== BUTTON_SHORT)
 8000fd6:	e7b4      	b.n	8000f42 <Main_Task+0x26>
 8000fd8:	20004460 	.word	0x20004460
 8000fdc:	2000446c 	.word	0x2000446c
 8000fe0:	2000467c 	.word	0x2000467c
 8000fe4:	20004464 	.word	0x20004464
 8000fe8:	20000b80 	.word	0x20000b80
 8000fec:	20000b88 	.word	0x20000b88

08000ff0 <CircularRingRedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CircularRingRedTask */
void CircularRingRedTask(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CircularRingRedTask */
	//stripEffect_CircularRing(50, 255, 0, 0);
	stripEffect_ColorWheel(50);
 8000ff8:	2032      	movs	r0, #50	; 0x32
 8000ffa:	f000 fc2d 	bl	8001858 <stripEffect_ColorWheel>
  /* USER CODE END CircularRingRedTask */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <readTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readTemperatureTask */
void readTemperatureTask(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
		//{
			float avg_temp;
			size_t avg_temp_count;

			/* Initialize 1-Wire library and set user argument to NULL */
			lwow_init(&ow, &lwow_ll_drv_stm32_hal, &huart1);
 8001010:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <readTemperatureTask+0x1f4>)
 8001012:	497b      	ldr	r1, [pc, #492]	; (8001200 <readTemperatureTask+0x1f8>)
 8001014:	487b      	ldr	r0, [pc, #492]	; (8001204 <readTemperatureTask+0x1fc>)
 8001016:	f009 fb8c 	bl	800a732 <lwow_init>

			/* Get onewire devices connected on 1-wire port */
			do {
				if (scan_onewire_devices(&ow, rom_ids, LWOW_ARRAYSIZE(rom_ids), &rom_found) == lwowOK) {
 800101a:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <readTemperatureTask+0x200>)
 800101c:	2214      	movs	r2, #20
 800101e:	497b      	ldr	r1, [pc, #492]	; (800120c <readTemperatureTask+0x204>)
 8001020:	4878      	ldr	r0, [pc, #480]	; (8001204 <readTemperatureTask+0x1fc>)
 8001022:	f009 ff89 	bl	800af38 <scan_onewire_devices>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d106      	bne.n	800103a <readTemperatureTask+0x32>
					printf("Devices scanned, found %d devices!\r\n", (int)rom_found);
 800102c:	4b76      	ldr	r3, [pc, #472]	; (8001208 <readTemperatureTask+0x200>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4877      	ldr	r0, [pc, #476]	; (8001210 <readTemperatureTask+0x208>)
 8001034:	f00a f820 	bl	800b078 <iprintf>
 8001038:	e010      	b.n	800105c <readTemperatureTask+0x54>
				} else {
					printf("Device scan error\r\n");
 800103a:	4876      	ldr	r0, [pc, #472]	; (8001214 <readTemperatureTask+0x20c>)
 800103c:	f00a f890 	bl	800b160 <puts>
					error_count++;
 8001040:	4b75      	ldr	r3, [pc, #468]	; (8001218 <readTemperatureTask+0x210>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a74      	ldr	r2, [pc, #464]	; (8001218 <readTemperatureTask+0x210>)
 8001048:	6013      	str	r3, [r2, #0]
					if(error_count >= MAX_ERROR_COUNT){
 800104a:	4b73      	ldr	r3, [pc, #460]	; (8001218 <readTemperatureTask+0x210>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	dd04      	ble.n	800105c <readTemperatureTask+0x54>
						osThreadResume(errorTaskHandle);
 8001052:	4b72      	ldr	r3, [pc, #456]	; (800121c <readTemperatureTask+0x214>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f005 fa3e 	bl	80064d8 <osThreadResume>
					}
				}
				if (rom_found == 0) {
 800105c:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <readTemperatureTask+0x200>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <readTemperatureTask+0x64>
					osDelay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f005 fab0 	bl	80065cc <osDelay>
				}
			} while (rom_found == 0);
 800106c:	4b66      	ldr	r3, [pc, #408]	; (8001208 <readTemperatureTask+0x200>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0d2      	beq.n	800101a <readTemperatureTask+0x12>

			if (rom_found > 0) {
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <readTemperatureTask+0x200>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ba 	beq.w	80011f2 <readTemperatureTask+0x1ea>
				/* Infinite loop */
				actual_temp = 0;
 800107e:	4b68      	ldr	r3, [pc, #416]	; (8001220 <readTemperatureTask+0x218>)
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
				while (1) {
					printf("Start temperature conversion\r\n");
 8001086:	4867      	ldr	r0, [pc, #412]	; (8001224 <readTemperatureTask+0x21c>)
 8001088:	f00a f86a 	bl	800b160 <puts>
					lwow_ds18x20_start(&ow, NULL);      /* Start conversion on all devices, use protected API */
 800108c:	2100      	movs	r1, #0
 800108e:	485d      	ldr	r0, [pc, #372]	; (8001204 <readTemperatureTask+0x1fc>)
 8001090:	f009 f8fd 	bl	800a28e <lwow_ds18x20_start>
					osDelay(1000);                      /* Release thread for 1 second */
 8001094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001098:	f005 fa98 	bl	80065cc <osDelay>

					/* Read temperature on all devices */
					avg_temp = 0;
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
					avg_temp_count = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
					for (size_t i = 0; i < rom_found; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e06c      	b.n	8001186 <readTemperatureTask+0x17e>
						if (lwow_ds18x20_is_b(&ow, &rom_ids[i])) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4a56      	ldr	r2, [pc, #344]	; (800120c <readTemperatureTask+0x204>)
 80010b2:	4413      	add	r3, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	4853      	ldr	r0, [pc, #332]	; (8001204 <readTemperatureTask+0x1fc>)
 80010b8:	f009 facd 	bl	800a656 <lwow_ds18x20_is_b>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d05e      	beq.n	8001180 <readTemperatureTask+0x178>
							float temp;
							uint8_t resolution = lwow_ds18x20_get_resolution(&ow, &rom_ids[i]);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4a51      	ldr	r2, [pc, #324]	; (800120c <readTemperatureTask+0x204>)
 80010c8:	4413      	add	r3, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	484d      	ldr	r0, [pc, #308]	; (8001204 <readTemperatureTask+0x1fc>)
 80010ce:	f009 fa97 	bl	800a600 <lwow_ds18x20_get_resolution>
 80010d2:	4603      	mov	r3, r0
 80010d4:	74fb      	strb	r3, [r7, #19]
							if (lwow_ds18x20_read(&ow, &rom_ids[i], &temp)) {
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4a4c      	ldr	r2, [pc, #304]	; (800120c <readTemperatureTask+0x204>)
 80010dc:	4413      	add	r3, r2
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4847      	ldr	r0, [pc, #284]	; (8001204 <readTemperatureTask+0x1fc>)
 80010e6:	f009 fa03 	bl	800a4f0 <lwow_ds18x20_read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d034      	beq.n	800115a <readTemperatureTask+0x152>
								printf("Sensor %02u temperature is %d.%d degrees (%u bits resolution)\r\n",
 80010f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
									(unsigned)i, (int)temp, (int)((temp * 1000.0f) - (((int)temp) * 1000)), (unsigned)resolution);
 80010f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001228 <readTemperatureTask+0x220>
 8001100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001104:	edd7 7a03 	vldr	s15, [r7, #12]
 8001108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110c:	ee17 2a90 	vmov	r2, s15
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	fb03 f302 	mul.w	r3, r3, r2
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
								printf("Sensor %02u temperature is %d.%d degrees (%u bits resolution)\r\n",
 8001124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	ee16 2a90 	vmov	r2, s13
 8001134:	6979      	ldr	r1, [r7, #20]
 8001136:	483d      	ldr	r0, [pc, #244]	; (800122c <readTemperatureTask+0x224>)
 8001138:	f009 ff9e 	bl	800b078 <iprintf>

								avg_temp += temp;
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ed97 7a07 	vldr	s14, [r7, #28]
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	edc7 7a07 	vstr	s15, [r7, #28]
								actual_temp = temp;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a34      	ldr	r2, [pc, #208]	; (8001220 <readTemperatureTask+0x218>)
 8001150:	6013      	str	r3, [r2, #0]
								avg_temp_count++;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	3301      	adds	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	e012      	b.n	8001180 <readTemperatureTask+0x178>
							} else {
								printf("Could not read temperature on sensor %u\r\n", (unsigned)i);
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	4834      	ldr	r0, [pc, #208]	; (8001230 <readTemperatureTask+0x228>)
 800115e:	f009 ff8b 	bl	800b078 <iprintf>

								if(error_count > MAX_ERROR_COUNT){
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <readTemperatureTask+0x210>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b02      	cmp	r3, #2
 8001168:	dd05      	ble.n	8001176 <readTemperatureTask+0x16e>
									osThreadResume(errorTaskHandle);
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <readTemperatureTask+0x214>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f005 f9b2 	bl	80064d8 <osThreadResume>
 8001174:	e004      	b.n	8001180 <readTemperatureTask+0x178>
								}else{
									error_count++;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <readTemperatureTask+0x210>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a26      	ldr	r2, [pc, #152]	; (8001218 <readTemperatureTask+0x210>)
 800117e:	6013      	str	r3, [r2, #0]
					for (size_t i = 0; i < rom_found; i++) {
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <readTemperatureTask+0x200>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d38d      	bcc.n	80010ac <readTemperatureTask+0xa4>
								}
							}
						}
					}
					if (avg_temp_count > 0) {
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <readTemperatureTask+0x1a4>
						avg_temp = avg_temp / avg_temp_count;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	edc7 7a07 	vstr	s15, [r7, #28]
					}
					printf("Average temperature: %d.%d degrees\r\n", (int)avg_temp, (int)((avg_temp * 100.0f) - ((int)avg_temp) * 100));
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001234 <readTemperatureTask+0x22c>
 80011bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c8:	ee17 2a90 	vmov	r2, s15
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	fb03 f302 	mul.w	r3, r3, r2
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e2:	ee17 2a90 	vmov	r2, s15
 80011e6:	ee16 1a90 	vmov	r1, s13
 80011ea:	4813      	ldr	r0, [pc, #76]	; (8001238 <readTemperatureTask+0x230>)
 80011ec:	f009 ff44 	bl	800b078 <iprintf>
					printf("Start temperature conversion\r\n");
 80011f0:	e749      	b.n	8001086 <readTemperatureTask+0x7e>
				}
			}
			printf("Terminating application thread\r\n");
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <readTemperatureTask+0x234>)
 80011f4:	f009 ffb4 	bl	800b160 <puts>
			osThreadExit();
 80011f8:	f005 f9a2 	bl	8006540 <osThreadExit>
 80011fc:	20004504 	.word	0x20004504
 8001200:	0800c310 	.word	0x0800c310
 8001204:	20004400 	.word	0x20004400
 8001208:	20004628 	.word	0x20004628
 800120c:	20004584 	.word	0x20004584
 8001210:	0800c05c 	.word	0x0800c05c
 8001214:	0800c084 	.word	0x0800c084
 8001218:	20000b84 	.word	0x20000b84
 800121c:	20004678 	.word	0x20004678
 8001220:	20000b80 	.word	0x20000b80
 8001224:	0800c098 	.word	0x0800c098
 8001228:	447a0000 	.word	0x447a0000
 800122c:	0800c0b8 	.word	0x0800c0b8
 8001230:	0800c0f8 	.word	0x0800c0f8
 8001234:	42c80000 	.word	0x42c80000
 8001238:	0800c124 	.word	0x0800c124
 800123c:	0800c14c 	.word	0x0800c14c

08001240 <CircularRingGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CircularRingGreen */
void CircularRingGreen(void *argument)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CircularRingGreen */
	stripEffect_CircularRing(50, 0, 255, 0);
 8001248:	2300      	movs	r3, #0
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2100      	movs	r1, #0
 800124e:	2032      	movs	r0, #50	; 0x32
 8001250:	f000 fb56 	bl	8001900 <stripEffect_CircularRing>
  /* USER CODE END CircularRingGreen */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ErrorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorTask */
void ErrorTask(void *argument)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorTask */
  /* Infinite loop */
	// Desactivate the relay to close the valve because the temperature of the water is good !
	water_valve_control(false);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fb29 	bl	80008bc <water_valve_control>

	osThreadSuspend(ReadTemperatureHandle);
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <ErrorTask+0x78>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f005 f8fe 	bl	8006470 <osThreadSuspend>
	osThreadSuspend(circularRingRedHandle);
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <ErrorTask+0x7c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f8f9 	bl	8006470 <osThreadSuspend>
	osThreadSuspend(circularRingGreHandle);
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <ErrorTask+0x80>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f8f4 	bl	8006470 <osThreadSuspend>

	osThreadResume(errorSignalRingHandle);
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <ErrorTask+0x84>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f005 f923 	bl	80064d8 <osThreadResume>
	osDelay(5000);
 8001292:	f241 3088 	movw	r0, #5000	; 0x1388
 8001296:	f005 f999 	bl	80065cc <osDelay>
	osThreadSuspend(errorSignalRingHandle);
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <ErrorTask+0x84>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 f8e6 	bl	8006470 <osThreadSuspend>

	osSemaphoreAcquire(buttonBinarySemHandle , osWaitForever);
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <ErrorTask+0x88>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fc7b 	bl	8006ba8 <osSemaphoreAcquire>
	osThreadTerminate(MainTaskHandle);
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <ErrorTask+0x8c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 f948 	bl	800654c <osThreadTerminate>
	MainTaskHandle = osThreadNew(Main_Task, NULL, &MainTask_attributes);
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <ErrorTask+0x90>)
 80012be:	2100      	movs	r1, #0
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <ErrorTask+0x94>)
 80012c2:	f005 f82f 	bl	8006324 <osThreadNew>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <ErrorTask+0x8c>)
 80012ca:	601a      	str	r2, [r3, #0]
  /* USER CODE END ErrorTask */
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20004460 	.word	0x20004460
 80012d8:	2000446c 	.word	0x2000446c
 80012dc:	2000467c 	.word	0x2000467c
 80012e0:	200043fc 	.word	0x200043fc
 80012e4:	20004624 	.word	0x20004624
 80012e8:	20004470 	.word	0x20004470
 80012ec:	0800c1c0 	.word	0x0800c1c0
 80012f0:	08000f1d 	.word	0x08000f1d

080012f4 <ErrorSignalRingLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ErrorSignalRingLedTask */
void ErrorSignalRingLedTask(void *argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ErrorSignalRingLedTask */
  /* Infinite loop */
  stripEffect_HeartBeat(250, 255, 0, 0);
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	21ff      	movs	r1, #255	; 0xff
 8001302:	20fa      	movs	r0, #250	; 0xfa
 8001304:	f000 fb22 	bl	800194c <stripEffect_HeartBeat>
  /* USER CODE END ErrorSignalRingLedTask */
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <vTimerUpdateCallback>:

/* vTimerUpdateCallback function */
void vTimerUpdateCallback(void *argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerUpdateCallback */
  ws2812_update();
 8001318:	f7ff f9ac 	bl	8000674 <ws2812_update>
  /* USER CODE END vTimerUpdateCallback */
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001336:	f000 fce5 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim->Instance == TIM2) {
	  //Button_Timer_Callback();
  }
  /* USER CODE END Callback 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40001000 	.word	0x40001000

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_MspInit+0x4c>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	; 0x60
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_MspInit+0x4c>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_MspInit+0x4c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210f      	movs	r1, #15
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	f000 fdc4 	bl	8001f22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d136      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_TIM_Base_MspInit+0x8c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_TIM_Base_MspInit+0x8c>)
 80013c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c4:	6613      	str	r3, [r2, #96]	; 0x60
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_TIM_Base_MspInit+0x8c>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_TIM_Base_MspInit+0x94>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013da:	2207      	movs	r2, #7
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 8001400:	2220      	movs	r2, #32
 8001402:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 800140e:	f000 fdc5 	bl	8001f9c <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001418:	f7ff ff96 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_TIM_Base_MspInit+0x90>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40012c00 	.word	0x40012c00
 8001434:	40021000 	.word	0x40021000
 8001438:	20004418 	.word	0x20004418
 800143c:	4002001c 	.word	0x4002001c

08001440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_TIM_MspPostInit+0x68>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11d      	bne.n	800149e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_TIM_MspPostInit+0x6c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_TIM_MspPostInit+0x6c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_TIM_MspPostInit+0x6c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f001 f849 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012c00 	.word	0x40012c00
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_UART_MspInit+0x1b8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f040 8085 	bne.w	80015de <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a64      	ldr	r2, [pc, #400]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a5e      	ldr	r2, [pc, #376]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001504:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001516:	2307      	movs	r3, #7
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f001 f804 	bl	8002530 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 800152a:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_UART_MspInit+0x1c4>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800152e:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001530:	2202      	movs	r2, #2
 8001532:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001534:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800155e:	4844      	ldr	r0, [pc, #272]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001560:	f000 fd1c 	bl	8001f9c <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800156a:	f7ff feed 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a3f      	ldr	r2, [pc, #252]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001572:	66da      	str	r2, [r3, #108]	; 0x6c
 8001574:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <HAL_UART_MspInit+0x1c0>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 800157c:	4a3f      	ldr	r2, [pc, #252]	; (800167c <HAL_UART_MspInit+0x1cc>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 8001582:	2202      	movs	r2, #2
 8001584:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 8001588:	2210      	movs	r2, #16
 800158a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015b0:	4831      	ldr	r0, [pc, #196]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015b2:	f000 fcf3 	bl	8001f9c <HAL_DMA_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80015bc:	f7ff fec4 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015c4:	669a      	str	r2, [r3, #104]	; 0x68
 80015c6:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_UART_MspInit+0x1c8>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2025      	movs	r0, #37	; 0x25
 80015d2:	f000 fca6 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015d6:	2025      	movs	r0, #37	; 0x25
 80015d8:	f000 fcbf 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015dc:	e03f      	b.n	800165e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x1d0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d13a      	bne.n	800165e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	4a1f      	ldr	r2, [pc, #124]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	6593      	str	r3, [r2, #88]	; 0x58
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_UART_MspInit+0x1bc>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_UART_MspInit+0x1bc>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_UART_MspInit+0x1bc>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_UART_MspInit+0x1bc>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001618:	2304      	movs	r3, #4
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f000 ff7b 	bl	8002530 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800163a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800164c:	2303      	movs	r3, #3
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f000 ff69 	bl	8002530 <HAL_GPIO_Init>
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013800 	.word	0x40013800
 800166c:	40021000 	.word	0x40021000
 8001670:	200044bc 	.word	0x200044bc
 8001674:	40020058 	.word	0x40020058
 8001678:	20004474 	.word	0x20004474
 800167c:	40020044 	.word	0x40020044
 8001680:	40004400 	.word	0x40004400

08001684 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_UART_MspDeInit+0x70>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d119      	bne.n	80016ca <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspDeInit+0x74>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspDeInit+0x74>)
 800169c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80016a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f001 f8b3 	bl	8002814 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd2a 	bl	800210c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fd25 	bl	800210c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80016c2:	2025      	movs	r0, #37	; 0x25
 80016c4:	f000 fc57 	bl	8001f76 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80016c8:	e010      	b.n	80016ec <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_UART_MspDeInit+0x78>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d10b      	bne.n	80016ec <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_UART_MspDeInit+0x74>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_UART_MspDeInit+0x74>)
 80016da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 80016e0:	f248 0104 	movw	r1, #32772	; 0x8004
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 f894 	bl	8002814 <HAL_GPIO_DeInit>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40004400 	.word	0x40004400

08001700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2036      	movs	r0, #54	; 0x36
 8001716:	f000 fc04 	bl	8001f22 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800171a:	2036      	movs	r0, #54	; 0x36
 800171c:	f000 fc1d 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_InitTick+0x9c>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_InitTick+0x9c>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_InitTick+0x9c>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001738:	f107 0210 	add.w	r2, r7, #16
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f002 f80a 	bl	800375c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001748:	f001 ffdc 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 800174c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_InitTick+0xa0>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	3b01      	subs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_InitTick+0xa4>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_InitTick+0xa8>)
 8001760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_InitTick+0xa4>)
 8001764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001768:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_InitTick+0xa4>)
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_InitTick+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_InitTick+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_InitTick+0xa4>)
 800177e:	f002 fa15 	bl	8003bac <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d104      	bne.n	8001792 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_InitTick+0xa4>)
 800178a:	f002 fa67 	bl	8003c5c <HAL_TIM_Base_Start_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3730      	adds	r7, #48	; 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	20004704 	.word	0x20004704
 80017a8:	40001000 	.word	0x40001000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017e4:	2008      	movs	r0, #8
 80017e6:	f001 f917 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  Switch_Callback();
 80017ea:	f7ff f83b 	bl	8000864 <Switch_Callback>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA1_Channel2_IRQHandler+0x10>)
 80017fa:	f000 fdba 	bl	8002372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20004418 	.word	0x20004418

08001808 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA1_Channel4_IRQHandler+0x10>)
 800180e:	f000 fdb0 	bl	8002372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20004474 	.word	0x20004474

0800181c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Channel5_IRQHandler+0x10>)
 8001822:	f000 fda6 	bl	8002372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200044bc 	.word	0x200044bc

08001830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USART1_IRQHandler+0x10>)
 8001836:	f003 ff03 	bl	8005640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20004504 	.word	0x20004504

08001844 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM6_IRQHandler+0x10>)
 800184a:	f002 fcad 	bl	80041a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20004704 	.word	0x20004704

08001858 <stripEffect_ColorWheel>:

		osDelay(interval);
	}
}

void stripEffect_ColorWheel(uint32_t interval) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	uint32_t index = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
	uint32_t led, colorIndex;

	while (1) {
		for (led = 0; led < LED_NUMBER; led++) {
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e030      	b.n	80018cc <stripEffect_ColorWheel+0x74>
			colorIndex = (index + led * (766 / LED_NUMBER)) % 766;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9a      	subs	r2, r3, r2
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <stripEffect_ColorWheel+0xa0>)
 800187c:	fba2 1203 	umull	r1, r2, r2, r3
 8001880:	09d2      	lsrs	r2, r2, #7
 8001882:	f240 21fe 	movw	r1, #766	; 0x2fe
 8001886:	fb01 f202 	mul.w	r2, r1, r2
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
			setLEDcolor(led, colorsFull[colorIndex][0],
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <stripEffect_ColorWheel+0xa4>)
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	440b      	add	r3, r1
 800189a:	7818      	ldrb	r0, [r3, #0]
 800189c:	4917      	ldr	r1, [pc, #92]	; (80018fc <stripEffect_ColorWheel+0xa4>)
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	3301      	adds	r3, #1
 80018aa:	781c      	ldrb	r4, [r3, #0]
 80018ac:	4913      	ldr	r1, [pc, #76]	; (80018fc <stripEffect_ColorWheel+0xa4>)
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	3302      	adds	r3, #2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4622      	mov	r2, r4
 80018be:	4601      	mov	r1, r0
 80018c0:	6938      	ldr	r0, [r7, #16]
 80018c2:	f7fe fee7 	bl	8000694 <setLEDcolor>
		for (led = 0; led < LED_NUMBER; led++) {
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3301      	adds	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d9cb      	bls.n	800186a <stripEffect_ColorWheel+0x12>
					colorsFull[colorIndex][1], colorsFull[colorIndex][2]);
		}
		index += (766 / LED_NUMBER);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	332f      	adds	r3, #47	; 0x2f
 80018d6:	617b      	str	r3, [r7, #20]
		index %= 766;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <stripEffect_ColorWheel+0xa0>)
 80018dc:	fba2 1203 	umull	r1, r2, r2, r3
 80018e0:	09d2      	lsrs	r2, r2, #7
 80018e2:	f240 21fe 	movw	r1, #766	; 0x2fe
 80018e6:	fb01 f202 	mul.w	r2, r1, r2
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
		osDelay(interval);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f004 fe6c 	bl	80065cc <osDelay>
		for (led = 0; led < LED_NUMBER; led++) {
 80018f4:	e7b6      	b.n	8001864 <stripEffect_ColorWheel+0xc>
 80018f6:	bf00      	nop
 80018f8:	2ac72f75 	.word	0x2ac72f75
 80018fc:	20000000 	.word	0x20000000

08001900 <stripEffect_CircularRing>:
	}
}

void stripEffect_CircularRing(uint32_t interval, uint8_t red, uint8_t green,
		uint8_t blue) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	4608      	mov	r0, r1
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	4603      	mov	r3, r0
 8001910:	70fb      	strb	r3, [r7, #3]
 8001912:	460b      	mov	r3, r1
 8001914:	70bb      	strb	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	707b      	strb	r3, [r7, #1]
	uint32_t index = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]

	while (1) {
		setWHOLEcolor(0x00, 0x00, 0x00);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	f7fe ff38 	bl	8000798 <setWHOLEcolor>
		setLEDcolor(index, red, green, blue);
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	78ba      	ldrb	r2, [r7, #2]
 800192c:	78f9      	ldrb	r1, [r7, #3]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7fe feb0 	bl	8000694 <setLEDcolor>
		index++;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]

		if (index >= LED_NUMBER)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d901      	bls.n	8001944 <stripEffect_CircularRing+0x44>
			index = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]

		osDelay(interval);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f004 fe41 	bl	80065cc <osDelay>
	while (1) {
 800194a:	e7e8      	b.n	800191e <stripEffect_CircularRing+0x1e>

0800194c <stripEffect_HeartBeat>:
	}
}

// the interval should be in the 300-1000 range for best visual effect
void stripEffect_HeartBeat(uint32_t interval, uint8_t red, uint8_t green,
		uint8_t blue) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
	uint8_t redInc, greenInc, blueInc;
	uint8_t maxRed, maxGreen, maxBlue;

	redInc = red / HEARTBEAT_STEPS;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	74fb      	strb	r3, [r7, #19]
	greenInc = green / HEARTBEAT_STEPS;
 800196c:	78bb      	ldrb	r3, [r7, #2]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	74bb      	strb	r3, [r7, #18]
	blueInc = blue / HEARTBEAT_STEPS;
 8001972:	787b      	ldrb	r3, [r7, #1]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	747b      	strb	r3, [r7, #17]

	maxRed = redInc * (HEARTBEAT_STEPS - 1);
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	461a      	mov	r2, r3
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	743b      	strb	r3, [r7, #16]
	maxGreen = greenInc * (HEARTBEAT_STEPS - 1);
 8001982:	7cbb      	ldrb	r3, [r7, #18]
 8001984:	461a      	mov	r2, r3
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	73fb      	strb	r3, [r7, #15]
	maxBlue = blueInc * (HEARTBEAT_STEPS - 1);
 800198c:	7c7b      	ldrb	r3, [r7, #17]
 800198e:	461a      	mov	r2, r3
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	73bb      	strb	r3, [r7, #14]

	uint32_t index;

	setWHOLEcolor(0, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2000      	movs	r0, #0
 800199c:	f7fe fefc 	bl	8000798 <setWHOLEcolor>

	while (1) {
		// first stroke
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e019      	b.n	80019da <stripEffect_HeartBeat+0x8e>
			setWHOLEcolor(index * redInc, index * greenInc, index * blueInc);
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	fb02 f003 	mul.w	r0, r2, r3
 80019ae:	7cbb      	ldrb	r3, [r7, #18]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	fb02 f103 	mul.w	r1, r2, r3
 80019b6:	7c7b      	ldrb	r3, [r7, #17]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	f7fe feea 	bl	8000798 <setWHOLEcolor>
			osDelay(interval / 50);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <stripEffect_HeartBeat+0x184>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 fdfc 	bl	80065cc <osDelay>
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d9e2      	bls.n	80019a6 <stripEffect_HeartBeat+0x5a>
		}
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e023      	b.n	8001a2e <stripEffect_HeartBeat+0xe2>
			setWHOLEcolor(maxRed - index * redInc, maxGreen - index * greenInc,
 80019e6:	7c3a      	ldrb	r2, [r7, #16]
 80019e8:	7cfb      	ldrb	r3, [r7, #19]
 80019ea:	6979      	ldr	r1, [r7, #20]
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	1ad0      	subs	r0, r2, r3
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	7cbb      	ldrb	r3, [r7, #18]
 80019f6:	6979      	ldr	r1, [r7, #20]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	1ad4      	subs	r4, r2, r3
 80019fe:	7bba      	ldrb	r2, [r7, #14]
					maxBlue - index * blueInc);
 8001a00:	7c7b      	ldrb	r3, [r7, #17]
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
			setWHOLEcolor(maxRed - index * redInc, maxGreen - index * greenInc,
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	f7fe fec3 	bl	8000798 <setWHOLEcolor>
			osDelay(interval / 45);
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <stripEffect_HeartBeat+0x188>)
 8001a16:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1a:	1ad2      	subs	r2, r2, r3
 8001a1c:	0852      	lsrs	r2, r2, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fdd2 	bl	80065cc <osDelay>
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d9d8      	bls.n	80019e6 <stripEffect_HeartBeat+0x9a>
		}
		// second stroke
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e019      	b.n	8001a6e <stripEffect_HeartBeat+0x122>
			setWHOLEcolor(index * redInc, index * greenInc, index * blueInc);
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	fb02 f003 	mul.w	r0, r2, r3
 8001a42:	7cbb      	ldrb	r3, [r7, #18]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	fb02 f103 	mul.w	r1, r2, r3
 8001a4a:	7c7b      	ldrb	r3, [r7, #17]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7fe fea0 	bl	8000798 <setWHOLEcolor>
			osDelay(interval / 40);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <stripEffect_HeartBeat+0x18c>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fdb2 	bl	80065cc <osDelay>
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d9e2      	bls.n	8001a3a <stripEffect_HeartBeat+0xee>
		}
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e023      	b.n	8001ac2 <stripEffect_HeartBeat+0x176>
			setWHOLEcolor(maxRed - index * redInc, maxGreen - index * greenInc,
 8001a7a:	7c3a      	ldrb	r2, [r7, #16]
 8001a7c:	7cfb      	ldrb	r3, [r7, #19]
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	1ad0      	subs	r0, r2, r3
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	7cbb      	ldrb	r3, [r7, #18]
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	1ad4      	subs	r4, r2, r3
 8001a92:	7bba      	ldrb	r2, [r7, #14]
					maxBlue - index * blueInc);
 8001a94:	7c7b      	ldrb	r3, [r7, #17]
 8001a96:	6979      	ldr	r1, [r7, #20]
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
			setWHOLEcolor(maxRed - index * redInc, maxGreen - index * greenInc,
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	f7fe fe79 	bl	8000798 <setWHOLEcolor>
			osDelay(interval / 35);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <stripEffect_HeartBeat+0x190>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	1ad2      	subs	r2, r2, r3
 8001ab0:	0852      	lsrs	r2, r2, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fd88 	bl	80065cc <osDelay>
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d9d8      	bls.n	8001a7a <stripEffect_HeartBeat+0x12e>
		}
		// relax..
		osDelay(interval);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f004 fd7f 	bl	80065cc <osDelay>
		for (index = 0; index < HEARTBEAT_STEPS; index++) {
 8001ace:	e767      	b.n	80019a0 <stripEffect_HeartBeat+0x54>
 8001ad0:	51eb851f 	.word	0x51eb851f
 8001ad4:	6c16c16d 	.word	0x6c16c16d
 8001ad8:	cccccccd 	.word	0xcccccccd
 8001adc:	d41d41d5 	.word	0xd41d41d5

08001ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
	}

return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f9db 	bl	8000ef0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
	}
	return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_isatty>:

int _isatty(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x50>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x16>
		heap_end = &end;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <_sbrk+0x50>)
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <_sbrk+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <_sbrk+0x50>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <_sbrk+0x50>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	466a      	mov	r2, sp
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d907      	bls.n	8001bf6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001be6:	f009 fa09 	bl	800affc <__errno>
 8001bea:	4602      	mov	r2, r0
 8001bec:	230c      	movs	r3, #12
 8001bee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e006      	b.n	8001c04 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <_sbrk+0x50>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <_sbrk+0x50>)
 8001c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000b8c 	.word	0x20000b8c
 8001c10:	20004798 	.word	0x20004798

08001c14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <SystemInit+0x64>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <SystemInit+0x64>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <SystemInit+0x68>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <SystemInit+0x68>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <SystemInit+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <SystemInit+0x68>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <SystemInit+0x68>)
 8001c40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <SystemInit+0x68>)
 8001c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <SystemInit+0x68>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <SystemInit+0x68>)
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <SystemInit+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SystemInit+0x64>)
 8001c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	40021000 	.word	0x40021000

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c86:	e003      	b.n	8001c90 <LoopCopyDataInit>

08001c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c8e:	3104      	adds	r1, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c98:	d3f6      	bcc.n	8001c88 <CopyDataInit>
	ldr	r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c9c:	e002      	b.n	8001ca4 <LoopFillZerobss>

08001c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ca0:	f842 3b04 	str.w	r3, [r2], #4

08001ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <LoopForever+0x16>)
	cmp	r2, r3
 8001ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ca8:	d3f9      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001caa:	f7ff ffb3 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f009 f9ab 	bl	800b008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7fe fe27 	bl	8000904 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cb8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001cbc:	0800c3c8 	.word	0x0800c3c8
	ldr	r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc4:	20000970 	.word	0x20000970
	ldr	r2, =_sbss
 8001cc8:	20000970 	.word	0x20000970
	ldr	r3, = _ebss
 8001ccc:	20004798 	.word	0x20004798

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>

08001cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f915 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fd0c 	bl	8001700 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf4:	f7ff fb30 	bl	8001358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000904 	.word	0x20000904
 8001d28:	20004750 	.word	0x20004750

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20004750 	.word	0x20004750

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db10      	blt.n	8001e18 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <__NVIC_DisableIRQ+0x40>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <__NVIC_SystemReset+0x20>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <__NVIC_SystemReset+0x20>)
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_SystemReset+0x24>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
 8001efc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <__NVIC_SystemReset+0x1c>
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	05fa0004 	.word	0x05fa0004

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff15 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff2a 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff9c 	bl	8001e7c <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff6b 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff1d 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff2d 	bl	8001de4 <__NVIC_DisableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f96:	f7ff ffa5 	bl	8001ee4 <__NVIC_SystemReset>
	...

08001f9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e098      	b.n	80020e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_DMA_Init+0x150>)
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d80f      	bhi.n	8001fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_DMA_Init+0x154>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_DMA_Init+0x158>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	009a      	lsls	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_DMA_Init+0x15c>)
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd8:	e00e      	b.n	8001ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_DMA_Init+0x160>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a43      	ldr	r2, [pc, #268]	; (80020f4 <HAL_DMA_Init+0x158>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	009a      	lsls	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_DMA_Init+0x164>)
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002052:	d039      	beq.n	80020c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_DMA_Init+0x15c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11a      	bne.n	8002094 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_DMA_Init+0x168>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 031c 	and.w	r3, r3, #28
 800206a:	210f      	movs	r1, #15
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4924      	ldr	r1, [pc, #144]	; (8002104 <HAL_DMA_Init+0x168>)
 8002074:	4013      	ands	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_DMA_Init+0x168>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f003 031c 	and.w	r3, r3, #28
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	491d      	ldr	r1, [pc, #116]	; (8002104 <HAL_DMA_Init+0x168>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e019      	b.n	80020c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_DMA_Init+0x16c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 031c 	and.w	r3, r3, #28
 80020a0:	210f      	movs	r1, #15
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4917      	ldr	r1, [pc, #92]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f003 031c 	and.w	r3, r3, #28
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <HAL_DMA_Init+0x16c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40020407 	.word	0x40020407
 80020f0:	bffdfff8 	.word	0xbffdfff8
 80020f4:	cccccccd 	.word	0xcccccccd
 80020f8:	40020000 	.word	0x40020000
 80020fc:	bffdfbf8 	.word	0xbffdfbf8
 8002100:	40020400 	.word	0x40020400
 8002104:	400200a8 	.word	0x400200a8
 8002108:	400204a8 	.word	0x400204a8

0800210c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e072      	b.n	8002204 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_DMA_DeInit+0x104>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d80f      	bhi.n	800215a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_DMA_DeInit+0x108>)
 8002142:	4413      	add	r3, r2
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_DeInit+0x10c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_DMA_DeInit+0x110>)
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
 8002158:	e00e      	b.n	8002178 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_DMA_DeInit+0x114>)
 8002162:	4413      	add	r3, r2
 8002164:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <HAL_DMA_DeInit+0x10c>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_DMA_DeInit+0x118>)
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f003 021c 	and.w	r2, r3, #28
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f202 	lsl.w	r2, r1, r2
 8002192:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_DMA_DeInit+0x110>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10d      	bne.n	80021ba <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_DMA_DeInit+0x11c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 031c 	and.w	r3, r3, #28
 80021aa:	210f      	movs	r1, #15
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	491d      	ldr	r1, [pc, #116]	; (8002228 <HAL_DMA_DeInit+0x11c>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e00c      	b.n	80021d4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_DMA_DeInit+0x120>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 031c 	and.w	r3, r3, #28
 80021c6:	210f      	movs	r1, #15
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4917      	ldr	r1, [pc, #92]	; (800222c <HAL_DMA_DeInit+0x120>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40020407 	.word	0x40020407
 8002214:	bffdfff8 	.word	0xbffdfff8
 8002218:	cccccccd 	.word	0xcccccccd
 800221c:	40020000 	.word	0x40020000
 8002220:	bffdfbf8 	.word	0xbffdfbf8
 8002224:	40020400 	.word	0x40020400
 8002228:	400200a8 	.word	0x400200a8
 800222c:	400204a8 	.word	0x400204a8

08002230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_DMA_Start_IT+0x20>
 800224c:	2302      	movs	r3, #2
 800224e:	e04b      	b.n	80022e8 <HAL_DMA_Start_IT+0xb8>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d13a      	bne.n	80022da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f921 	bl	80024d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 020e 	orr.w	r2, r2, #14
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e00f      	b.n	80022c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 020a 	orr.w	r2, r2, #10
 80022c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e005      	b.n	80022e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d005      	beq.n	8002314 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2204      	movs	r2, #4
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	e029      	b.n	8002368 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020e 	bic.w	r2, r2, #14
 8002322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f003 021c 	and.w	r2, r3, #28
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    }
  }
  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f003 031c 	and.w	r3, r3, #28
 8002392:	2204      	movs	r2, #4
 8002394:	409a      	lsls	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d026      	beq.n	80023ec <HAL_DMA_IRQHandler+0x7a>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d021      	beq.n	80023ec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0204 	bic.w	r2, r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 021c 	and.w	r2, r3, #28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2104      	movs	r1, #4
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d071      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80023ea:	e06c      	b.n	80024c6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f003 031c 	and.w	r3, r3, #28
 80023f4:	2202      	movs	r2, #2
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02e      	beq.n	800245e <HAL_DMA_IRQHandler+0xec>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d029      	beq.n	800245e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10b      	bne.n	8002430 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020a 	bic.w	r2, r2, #10
 8002426:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f003 021c 	and.w	r2, r3, #28
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2102      	movs	r1, #2
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d038      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800245c:	e033      	b.n	80024c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 031c 	and.w	r3, r3, #28
 8002466:	2208      	movs	r2, #8
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x156>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d025      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 020e 	bic.w	r2, r2, #14
 800248a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f003 021c 	and.w	r2, r3, #28
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
}
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 021c 	and.w	r2, r3, #28
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d108      	bne.n	8002514 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002512:	e007      	b.n	8002524 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e14e      	b.n	80027de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8140 	beq.w	80027d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00b      	beq.n	8002578 <HAL_GPIO_Init+0x48>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256c:	2b11      	cmp	r3, #17
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0201 	and.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0xea>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b12      	cmp	r3, #18
 8002618:	d123      	bne.n	8002662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0203 	and.w	r2, r3, #3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 809a 	beq.w	80027d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 80026a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6613      	str	r3, [r2, #96]	; 0x60
 80026b0:	4b52      	ldr	r3, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026e6:	d013      	beq.n	8002710 <HAL_GPIO_Init+0x1e0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2d4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00d      	beq.n	800270c <HAL_GPIO_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <HAL_GPIO_Init+0x1d8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a44      	ldr	r2, [pc, #272]	; (800280c <HAL_GPIO_Init+0x2dc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_GPIO_Init+0x1d4>
 8002700:	2303      	movs	r3, #3
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002704:	2307      	movs	r3, #7
 8002706:	e004      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002708:	2302      	movs	r3, #2
 800270a:	e002      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002710:	2300      	movs	r3, #0
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	4093      	lsls	r3, r2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002722:	4937      	ldr	r1, [pc, #220]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800277e:	4a24      	ldr	r2, [pc, #144]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_GPIO_Init+0x2e0>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f aea9 	bne.w	8002540 <HAL_GPIO_Init+0x10>
  }
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	48000400 	.word	0x48000400
 8002808:	48000800 	.word	0x48000800
 800280c:	48000c00 	.word	0x48000c00
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002822:	e0b1      	b.n	8002988 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002824:	2201      	movs	r2, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a4 	beq.w	8002982 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800283a:	4a5a      	ldr	r2, [pc, #360]	; (80029a4 <HAL_GPIO_DeInit+0x190>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002862:	d013      	beq.n	800288c <HAL_GPIO_DeInit+0x78>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_DeInit+0x194>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_GPIO_DeInit+0x74>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_DeInit+0x198>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_DeInit+0x70>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_DeInit+0x19c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_GPIO_DeInit+0x6c>
 800287c:	2303      	movs	r3, #3
 800287e:	e006      	b.n	800288e <HAL_GPIO_DeInit+0x7a>
 8002880:	2307      	movs	r3, #7
 8002882:	e004      	b.n	800288e <HAL_GPIO_DeInit+0x7a>
 8002884:	2302      	movs	r3, #2
 8002886:	e002      	b.n	800288e <HAL_GPIO_DeInit+0x7a>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_GPIO_DeInit+0x7a>
 800288c:	2300      	movs	r3, #0
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	429a      	cmp	r2, r3
 800289c:	d132      	bne.n	8002904 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4943      	ldr	r1, [pc, #268]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80028ac:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	493f      	ldr	r1, [pc, #252]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	493c      	ldr	r1, [pc, #240]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80028c8:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	4938      	ldr	r1, [pc, #224]	; (80029b4 <HAL_GPIO_DeInit+0x1a0>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028e6:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_GPIO_DeInit+0x190>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <HAL_GPIO_DeInit+0x190>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	400a      	ands	r2, r1
 80028fe:	3302      	adds	r3, #2
 8002900:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2103      	movs	r1, #3
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	08d2      	lsrs	r2, r2, #3
 8002938:	4019      	ands	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2103      	movs	r1, #3
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	2101      	movs	r1, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2103      	movs	r1, #3
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	401a      	ands	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f af47 	bne.w	8002824 <HAL_GPIO_DeInit+0x10>
  }
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	48000400 	.word	0x48000400
 80029ac:	48000800 	.word	0x48000800
 80029b0:	48000c00 	.word	0x48000c00
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e001      	b.n	80029da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f806 	bl	8002a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40010400 	.word	0x40010400

08002a48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40007000 	.word	0x40007000

08002a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aaa:	d130      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d038      	beq.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2232      	movs	r2, #50	; 0x32
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9b      	lsrs	r3, r3, #18
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae0:	e002      	b.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af4:	d102      	bne.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f2      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b08:	d110      	bne.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d007      	beq.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	200008fc 	.word	0x200008fc
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f000 bc56 	b.w	8003408 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5c:	4ba1      	ldr	r3, [pc, #644]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b66:	4b9f      	ldr	r3, [pc, #636]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e6 	beq.w	8002d4a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4c>
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	f040 808d 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	f040 8089 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b94:	4b93      	ldr	r3, [pc, #588]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d006      	beq.n	8002bae <HAL_RCC_OscConfig+0x66>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f000 bc2d 	b.w	8003408 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb2:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x80>
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_OscConfig+0x8c>
 8002bc8:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d224      	bcs.n	8002c22 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fdef 	bl	80037c0 <RCC_SetFlashLatencyFromMSIRange>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f000 bc0d 	b.w	8003408 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	4977      	ldr	r1, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4972      	ldr	r1, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e025      	b.n	8002c6e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6f      	ldr	r2, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	496a      	ldr	r1, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4965      	ldr	r1, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fdae 	bl	80037c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e3cc      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6e:	f000 fcb3 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8002c72:	4601      	mov	r1, r0
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <HAL_RCC_OscConfig+0x2a0>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	fa21 f303 	lsr.w	r3, r1, r3
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x2a4>)
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd34 	bl	8001700 <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d052      	beq.n	8002d48 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	e3b0      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d032      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cba:	f7ff f837 	bl	8001d2c <HAL_GetTick>
 8002cbe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc2:	f7ff f833 	bl	8001d2c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e399      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	493a      	ldr	r1, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e01a      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f804 	bl	8001d2c <HAL_GetTick>
 8002d24:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d28:	f7ff f800 	bl	8001d2c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e366      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1e0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d073      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x220>
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d063      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2f4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e343      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x250>
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x274>
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe ffa6 	bl	8001d2c <HAL_GetTick>
 8002de0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	e010      	b.n	8002e06 <HAL_RCC_OscConfig+0x2be>
 8002de4:	40021000 	.word	0x40021000
 8002de8:	0800c2c8 	.word	0x0800c2c8
 8002dec:	200008fc 	.word	0x200008fc
 8002df0:	20000900 	.word	0x20000900
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe ff9a 	bl	8001d2c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e300      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	4ba0      	ldr	r3, [pc, #640]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2ac>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe ff8a 	bl	8001d2c <HAL_GetTick>
 8002e18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe ff86 	bl	8001d2c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2ec      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	4b96      	ldr	r3, [pc, #600]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2d4>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x314>
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x32c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2c9      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b84      	ldr	r3, [pc, #528]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4981      	ldr	r1, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	e040      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe ff45 	bl	8001d2c <HAL_GetTick>
 8002ea2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe ff41 	bl	8001d2c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e2a7      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb8:	4b73      	ldr	r3, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	496d      	ldr	r1, [pc, #436]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e018      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe ff21 	bl	8001d2c <HAL_GetTick>
 8002eea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe ff1d 	bl	8001d2c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e283      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d07f      	beq.n	8003018 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05f      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d037      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e25c      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f58:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	4a4a      	ldr	r2, [pc, #296]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f68:	f7fe fee0 	bl	8001d2c <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fedc 	bl	8001d2c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b11      	cmp	r3, #17
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e242      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f90:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f96:	f023 0210 	bic.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	493a      	ldr	r1, [pc, #232]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a36      	ldr	r2, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe feb9 	bl	8001d2c <HAL_GetTick>
 8002fba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe feb5 	bl	8001d2c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b11      	cmp	r3, #17
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e21b      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ef      	beq.n	8002fbe <HAL_RCC_OscConfig+0x476>
 8002fde:	e01b      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	4a28      	ldr	r2, [pc, #160]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fe9c 	bl	8001d2c <HAL_GetTick>
 8002ff4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fe98 	bl	8001d2c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b11      	cmp	r3, #17
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1fe      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ef      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80c1 	beq.w	80031a8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10e      	bne.n	8003056 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	6593      	str	r3, [r2, #88]	; 0x58
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x540>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RCC_OscConfig+0x544>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_RCC_OscConfig+0x544>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_RCC_OscConfig+0x544>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7fe fe5d 	bl	8001d2c <HAL_GetTick>
 8003072:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003074:	e00c      	b.n	8003090 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe fe59 	bl	8001d2c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d905      	bls.n	8003090 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1bf      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003090:	4bb1      	ldr	r3, [pc, #708]	; (8003358 <HAL_RCC_OscConfig+0x810>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ec      	beq.n	8003076 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02c      	beq.n	8003102 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80030a8:	4bac      	ldr	r3, [pc, #688]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	49a8      	ldr	r1, [pc, #672]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030ce:	4ba3      	ldr	r3, [pc, #652]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	4aa1      	ldr	r2, [pc, #644]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030de:	4b9f      	ldr	r3, [pc, #636]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	4a9d      	ldr	r2, [pc, #628]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ee:	e018      	b.n	8003122 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f0:	4b9a      	ldr	r3, [pc, #616]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	4a99      	ldr	r2, [pc, #612]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003100:	e00f      	b.n	8003122 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003102:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	4a94      	ldr	r2, [pc, #592]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003112:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4a90      	ldr	r2, [pc, #576]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe fdff 	bl	8001d2c <HAL_GetTick>
 800312e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fdfb 	bl	8001d2c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e15f      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ed      	beq.n	8003132 <HAL_RCC_OscConfig+0x5ea>
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fde8 	bl	8001d2c <HAL_GetTick>
 800315c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fde4 	bl	8001d2c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e148      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003176:	4b79      	ldr	r3, [pc, #484]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ed      	bne.n	8003160 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003184:	4b75      	ldr	r3, [pc, #468]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a74      	ldr	r2, [pc, #464]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003198:	2b01      	cmp	r3, #1
 800319a:	d105      	bne.n	80031a8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03c      	beq.n	800322e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01c      	beq.n	80031f6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031bc:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c2:	4a66      	ldr	r2, [pc, #408]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fdae 	bl	8001d2c <HAL_GetTick>
 80031d0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d4:	f7fe fdaa 	bl	8001d2c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e110      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e6:	4b5d      	ldr	r3, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ef      	beq.n	80031d4 <HAL_RCC_OscConfig+0x68c>
 80031f4:	e01b      	b.n	800322e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fc:	4a57      	ldr	r2, [pc, #348]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fe fd91 	bl	8001d2c <HAL_GetTick>
 800320a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320e:	f7fe fd8d 	bl	8001d2c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0f3      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003220:	4b4e      	ldr	r3, [pc, #312]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ef      	bne.n	800320e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80e7 	beq.w	8003406 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	2b02      	cmp	r3, #2
 800323e:	f040 80b7 	bne.w	80033b0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003242:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0203 	and.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	429a      	cmp	r2, r3
 8003254:	d124      	bne.n	80032a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	3b01      	subs	r3, #1
 8003262:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d11b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d113      	bne.n	80032a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d109      	bne.n	80032a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d061      	beq.n	8003364 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d056      	beq.n	8003354 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b2:	f7fe fd3b 	bl	8001d2c <HAL_GetTick>
 80032b6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe fd37 	bl	8001d2c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e09d      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032cc:	4b23      	ldr	r3, [pc, #140]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_OscConfig+0x814>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_OscConfig+0x818>)
 80032de:	4013      	ands	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032e8:	3a01      	subs	r2, #1
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	4311      	orrs	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032f2:	0212      	lsls	r2, r2, #8
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0552      	lsls	r2, r2, #21
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0652      	lsls	r2, r2, #25
 800330c:	430a      	orrs	r2, r1
 800330e:	4913      	ldr	r1, [pc, #76]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003310:	4313      	orrs	r3, r2
 8003312:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <HAL_RCC_OscConfig+0x814>)
 800331a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800332c:	f7fe fcfe 	bl	8001d2c <HAL_GetTick>
 8003330:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fcfa 	bl	8001d2c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e060      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_OscConfig+0x814>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003352:	e058      	b.n	8003406 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e057      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
 8003358:	40007000 	.word	0x40007000
 800335c:	40021000 	.word	0x40021000
 8003360:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d14a      	bne.n	8003406 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003388:	f7fe fcd0 	bl	8001d2c <HAL_GetTick>
 800338c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fccc 	bl	8001d2c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e032      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x848>
 80033ae:	e02a      	b.n	8003406 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d025      	beq.n	8003402 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033c8:	f023 0303 	bic.w	r3, r3, #3
 80033cc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fca7 	bl	8001d2c <HAL_GetTick>
 80033de:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fca3 	bl	8001d2c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e009      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x8c8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x89a>
 8003400:	e001      	b.n	8003406 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0c8      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4961      	ldr	r1, [pc, #388]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b0      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d04c      	beq.n	80034fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d121      	bne.n	80034bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e09e      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d107      	bne.n	8003494 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d115      	bne.n	80034bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e092      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349c:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e086      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ac:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e07e      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034bc:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 0203 	bic.w	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	493f      	ldr	r1, [pc, #252]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ce:	f7fe fc2d 	bl	8001d2c <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d6:	f7fe fc29 	bl	8001d2c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e066      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 020c 	and.w	r2, r3, #12
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d1eb      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	492c      	ldr	r1, [pc, #176]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d210      	bcs.n	800354c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4924      	ldr	r1, [pc, #144]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCC_ClockConfig+0x1b0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e036      	b.n	80035ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4918      	ldr	r1, [pc, #96]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800358a:	f000 f825 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 800358e:	4601      	mov	r1, r0
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	fa21 f303 	lsr.w	r3, r1, r3
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f8a6 	bl	8001700 <HAL_InitTick>
 80035b4:	4603      	mov	r3, r0
 80035b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80035b8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	0800c2c8 	.word	0x0800c2c8
 80035d0:	200008fc 	.word	0x200008fc
 80035d4:	20000900 	.word	0x20000900

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x34>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d121      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d11e      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d102      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e004      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d101      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800365e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d133      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0xa4>
 8003676:	2b03      	cmp	r3, #3
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0xaa>
 800367a:	e005      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800367e:	617b      	str	r3, [r7, #20]
      break;
 8003680:	e005      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003684:	617b      	str	r3, [r7, #20]
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	617b      	str	r3, [r7, #20]
      break;
 800368c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	3301      	adds	r3, #1
 800369a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	fb02 f203 	mul.w	r2, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_GetSysClockFreq+0x104>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0e5b      	lsrs	r3, r3, #25
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036ce:	69bb      	ldr	r3, [r7, #24]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3724      	adds	r7, #36	; 0x24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000
 80036e0:	0800c2e0 	.word	0x0800c2e0
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200008fc 	.word	0x200008fc

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4601      	mov	r1, r0
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <HAL_RCC_GetPCLK1Freq+0x28>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	0800c2d8 	.word	0x0800c2d8

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003734:	f7ff ffda 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0adb      	lsrs	r3, r3, #11
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	0800c2d8 	.word	0x0800c2d8

0800375c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	220f      	movs	r2, #15
 800376a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCC_GetClockConfig+0x5c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCC_GetClockConfig+0x60>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0207 	and.w	r2, r3, #7
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40022000 	.word	0x40022000

080037c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d8:	f7ff f952 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 80037dc:	6178      	str	r0, [r7, #20]
 80037de:	e014      	b.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f8:	f7ff f942 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 80037fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003810:	d10b      	bne.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d919      	bls.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2ba0      	cmp	r3, #160	; 0xa0
 800381c:	d902      	bls.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800381e:	2302      	movs	r3, #2
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e013      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003824:	2301      	movs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e010      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d902      	bls.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003830:	2303      	movs	r3, #3
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e00a      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d102      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383c:	2302      	movs	r3, #2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e004      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d101      	bne.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003848:	2301      	movs	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40022000 	.word	0x40022000

08003880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003888:	2300      	movs	r3, #0
 800388a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800388c:	2300      	movs	r3, #0
 800388e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 809e 	beq.w	80039da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038a2:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b40      	ldr	r3, [pc, #256]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	4a3f      	ldr	r2, [pc, #252]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6593      	str	r3, [r2, #88]	; 0x58
 80038c4:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d4:	4b3a      	ldr	r3, [pc, #232]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a39      	ldr	r2, [pc, #228]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038e0:	f7fe fa24 	bl	8001d2c <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038e6:	e009      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fe fa20 	bl	8001d2c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d902      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	74fb      	strb	r3, [r7, #19]
        break;
 80038fa:	e005      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038fc:	4b30      	ldr	r3, [pc, #192]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ef      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d15a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01e      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d019      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003956:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d016      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f9e0 	bl	8001d2c <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	e00b      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe f9dc 	bl	8001d2c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d902      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	74fb      	strb	r3, [r7, #19]
            break;
 8003986:	e006      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ec      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4904      	ldr	r1, [pc, #16]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039b2:	e009      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c8:	7c7b      	ldrb	r3, [r7, #17]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ce:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a6d      	ldr	r2, [pc, #436]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039e6:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f023 0203 	bic.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4964      	ldr	r1, [pc, #400]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a08:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 020c 	bic.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	495c      	ldr	r1, [pc, #368]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a2a:	4b57      	ldr	r3, [pc, #348]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4953      	ldr	r1, [pc, #332]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	494b      	ldr	r1, [pc, #300]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6e:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4942      	ldr	r1, [pc, #264]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a90:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	493a      	ldr	r1, [pc, #232]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab2:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4931      	ldr	r1, [pc, #196]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4929      	ldr	r1, [pc, #164]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4920      	ldr	r1, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	4918      	ldr	r1, [pc, #96]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b36:	d105      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b42:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	490a      	ldr	r1, [pc, #40]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000

08003b8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e049      	b.n	8003c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fbe8 	bl	80013a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f000 fed2 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e03b      	b.n	8003cec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x4e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_Base_Start_IT+0x4e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <HAL_TIM_Base_Start_IT+0xa0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d115      	bne.n	8003cd6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <HAL_TIM_Base_Start_IT+0xa4>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d015      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x8c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d011      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e008      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	00010007 	.word	0x00010007

08003d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e049      	b.n	8003daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f841 	bl	8003db2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 fe26 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_TIM_PWM_Start_DMA+0x28>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e03c      	b.n	8003e6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d109      	bne.n	8003e0a <HAL_TIM_PWM_Start_DMA+0x42>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e02f      	b.n	8003e6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d109      	bne.n	8003e24 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e022      	b.n	8003e6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d109      	bne.n	8003e3e <HAL_TIM_PWM_Start_DMA+0x76>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e015      	b.n	8003e6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d109      	bne.n	8003e58 <HAL_TIM_PWM_Start_DMA+0x90>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e008      	b.n	8003e6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e188      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_TIM_PWM_Start_DMA+0xc4>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e03c      	b.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d109      	bne.n	8003ea6 <HAL_TIM_PWM_Start_DMA+0xde>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e02f      	b.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d109      	bne.n	8003ec0 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e022      	b.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d109      	bne.n	8003eda <HAL_TIM_PWM_Start_DMA+0x112>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e015      	b.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d109      	bne.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d034      	beq.n	8003f74 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_PWM_Start_DMA+0x152>
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e134      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x162>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f28:	e026      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x172>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	e01e      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Start_DMA+0x182>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f48:	e016      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x192>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f58:	e00e      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f68:	e006      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f72:	e001      	b.n	8003f78 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e105      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
  }

  switch (Channel)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	f200 80ae 	bhi.w	80040dc <HAL_TIM_PWM_Start_DMA+0x314>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	080040dd 	.word	0x080040dd
 8003f90:	080040dd 	.word	0x080040dd
 8003f94:	080040dd 	.word	0x080040dd
 8003f98:	08004005 	.word	0x08004005
 8003f9c:	080040dd 	.word	0x080040dd
 8003fa0:	080040dd 	.word	0x080040dd
 8003fa4:	080040dd 	.word	0x080040dd
 8003fa8:	0800404d 	.word	0x0800404d
 8003fac:	080040dd 	.word	0x080040dd
 8003fb0:	080040dd 	.word	0x080040dd
 8003fb4:	080040dd 	.word	0x080040dd
 8003fb8:	08004095 	.word	0x08004095
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	4a72      	ldr	r2, [pc, #456]	; (800418c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	4a71      	ldr	r2, [pc, #452]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	4a70      	ldr	r2, [pc, #448]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003fd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3334      	adds	r3, #52	; 0x34
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	f7fe f924 	bl	8002230 <HAL_DMA_Start_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0c8      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	60da      	str	r2, [r3, #12]
      break;
 8004002:	e06c      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	4a60      	ldr	r2, [pc, #384]	; (800418c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004012:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	4a5e      	ldr	r2, [pc, #376]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3338      	adds	r3, #56	; 0x38
 8004028:	461a      	mov	r2, r3
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	f7fe f900 	bl	8002230 <HAL_DMA_Start_IT>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a4      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e048      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4a4e      	ldr	r2, [pc, #312]	; (800418c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004062:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	333c      	adds	r3, #60	; 0x3c
 8004070:	461a      	mov	r2, r3
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	f7fe f8dc 	bl	8002230 <HAL_DMA_Start_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e080      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004090:	60da      	str	r2, [r3, #12]
      break;
 8004092:	e024      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a3c      	ldr	r2, [pc, #240]	; (800418c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3340      	adds	r3, #64	; 0x40
 80040b8:	461a      	mov	r2, r3
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	f7fe f8b8 	bl	8002230 <HAL_DMA_Start_IT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e05c      	b.n	8004184 <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d8:	60da      	str	r2, [r3, #12]
      break;
 80040da:	e000      	b.n	80040de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80040dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ffd0 	bl	800508c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a29      	ldr	r2, [pc, #164]	; (8004198 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_TIM_PWM_Start_DMA+0x342>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a28      	ldr	r2, [pc, #160]	; (800419c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIM_PWM_Start_DMA+0x342>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_Start_DMA+0x346>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_TIM_PWM_Start_DMA+0x348>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIM_PWM_Start_DMA+0x37a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d004      	beq.n	8004142 <HAL_TIM_PWM_Start_DMA+0x37a>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d115      	bne.n	800416e <HAL_TIM_PWM_Start_DMA+0x3a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800414a:	4013      	ands	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d015      	beq.n	8004180 <HAL_TIM_PWM_Start_DMA+0x3b8>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d011      	beq.n	8004180 <HAL_TIM_PWM_Start_DMA+0x3b8>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e008      	b.n	8004180 <HAL_TIM_PWM_Start_DMA+0x3b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e000      	b.n	8004182 <HAL_TIM_PWM_Start_DMA+0x3ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	08004885 	.word	0x08004885
 8004190:	0800492d 	.word	0x0800492d
 8004194:	080047f3 	.word	0x080047f3
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	00010007 	.word	0x00010007

080041a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0202 	mvn.w	r2, #2
 80041d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 facf 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fac1 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fad2 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0204 	mvn.w	r2, #4
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 faa5 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa97 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 faa8 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0208 	mvn.w	r2, #8
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2204      	movs	r2, #4
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa7b 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa6d 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fa7e 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2208      	movs	r2, #8
 80042d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa51 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa43 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa54 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10e      	bne.n	800432c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d107      	bne.n	800432c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0201 	mvn.w	r2, #1
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fffc 	bl	8001324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b80      	cmp	r3, #128	; 0x80
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 ffa8 	bl	80052a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d10e      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d107      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 ff9b 	bl	80052bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d10e      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d107      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa0c 	bl	80047ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d10e      	bne.n	80043de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d107      	bne.n	80043de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0220 	mvn.w	r2, #32
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 ff5b 	bl	8005294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043fe:	2302      	movs	r3, #2
 8004400:	e0fd      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b14      	cmp	r3, #20
 800440e:	f200 80f0 	bhi.w	80045f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	0800446d 	.word	0x0800446d
 800441c:	080045f3 	.word	0x080045f3
 8004420:	080045f3 	.word	0x080045f3
 8004424:	080045f3 	.word	0x080045f3
 8004428:	080044ad 	.word	0x080044ad
 800442c:	080045f3 	.word	0x080045f3
 8004430:	080045f3 	.word	0x080045f3
 8004434:	080045f3 	.word	0x080045f3
 8004438:	080044ef 	.word	0x080044ef
 800443c:	080045f3 	.word	0x080045f3
 8004440:	080045f3 	.word	0x080045f3
 8004444:	080045f3 	.word	0x080045f3
 8004448:	0800452f 	.word	0x0800452f
 800444c:	080045f3 	.word	0x080045f3
 8004450:	080045f3 	.word	0x080045f3
 8004454:	080045f3 	.word	0x080045f3
 8004458:	08004571 	.word	0x08004571
 800445c:	080045f3 	.word	0x080045f3
 8004460:	080045f3 	.word	0x080045f3
 8004464:	080045f3 	.word	0x080045f3
 8004468:	080045b1 	.word	0x080045b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 faf2 	bl	8004a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0208 	orr.w	r2, r2, #8
 8004486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0204 	bic.w	r2, r2, #4
 8004496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6999      	ldr	r1, [r3, #24]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	619a      	str	r2, [r3, #24]
      break;
 80044aa:	e0a3      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fb4e 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	619a      	str	r2, [r3, #24]
      break;
 80044ec:	e082      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fba7 	bl	8004c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0208 	orr.w	r2, r2, #8
 8004508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0204 	bic.w	r2, r2, #4
 8004518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69d9      	ldr	r1, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	61da      	str	r2, [r3, #28]
      break;
 800452c:	e062      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fbff 	bl	8004d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	61da      	str	r2, [r3, #28]
      break;
 800456e:	e041      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc3c 	bl	8004df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045ae:	e021      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fc74 	bl	8004ea4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045f0:	e000      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80045f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIM_ConfigClockSource+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e0a8      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x16a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d067      	beq.n	800472c <HAL_TIM_ConfigClockSource+0x124>
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d80b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x70>
 8004660:	2b10      	cmp	r3, #16
 8004662:	d073      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x144>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d802      	bhi.n	800466e <HAL_TIM_ConfigClockSource+0x66>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d06f      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800466c:	e078      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800466e:	2b20      	cmp	r3, #32
 8004670:	d06c      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x144>
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d06a      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004676:	e073      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004678:	2b70      	cmp	r3, #112	; 0x70
 800467a:	d00d      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0x90>
 800467c:	2b70      	cmp	r3, #112	; 0x70
 800467e:	d804      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x82>
 8004680:	2b50      	cmp	r3, #80	; 0x50
 8004682:	d033      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xe4>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d041      	beq.n	800470c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004688:	e06a      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d066      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x156>
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d017      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004696:	e063      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f000 fcd0 	bl	800504c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	609a      	str	r2, [r3, #8]
      break;
 80046c4:	e04c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f000 fcb9 	bl	800504c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e8:	609a      	str	r2, [r3, #8]
      break;
 80046ea:	e039      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f000 fc2d 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2150      	movs	r1, #80	; 0x50
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc86 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800470a:	e029      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	461a      	mov	r2, r3
 800471a:	f000 fc4c 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2160      	movs	r1, #96	; 0x60
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fc76 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800472a:	e019      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	f000 fc0d 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2140      	movs	r1, #64	; 0x40
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fc66 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 800474a:	e009      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fc5d 	bl	8005016 <TIM_ITRx_SetConfig>
        break;
 800475c:	e000      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800475e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d107      	bne.n	800481a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	e02a      	b.n	8004870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2202      	movs	r2, #2
 8004828:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004832:	e01d      	b.n	8004870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d107      	bne.n	800484e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2204      	movs	r2, #4
 8004842:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	e010      	b.n	8004870 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d107      	bne.n	8004868 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2208      	movs	r2, #8
 800485c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004866:	e003      	b.n	8004870 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ffb4 	bl	80047de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d10b      	bne.n	80048b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d136      	bne.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b2:	e031      	b.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10b      	bne.n	80048d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2202      	movs	r2, #2
 80048c2:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d125      	bne.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d4:	e020      	b.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d10b      	bne.n	80048f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2204      	movs	r2, #4
 80048e4:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d114      	bne.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f6:	e00f      	b.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10a      	bne.n	8004918 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2208      	movs	r2, #8
 8004906:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff ff42 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	771a      	strb	r2, [r3, #28]
 800494a:	e019      	b.n	8004980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d103      	bne.n	800495e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	771a      	strb	r2, [r3, #28]
 800495c:	e010      	b.n	8004980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d103      	bne.n	8004970 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2204      	movs	r2, #4
 800496c:	771a      	strb	r2, [r3, #28]
 800496e:	e007      	b.n	8004980 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d102      	bne.n	8004980 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2208      	movs	r2, #8
 800497e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff18 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0xbc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0x20>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d108      	bne.n	80049c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <TIM_Base_SetConfig+0xbc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_Base_SetConfig+0x52>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d007      	beq.n	80049e6 <TIM_Base_SetConfig+0x52>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <TIM_Base_SetConfig+0xc0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_Base_SetConfig+0x52>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <TIM_Base_SetConfig+0xc4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <TIM_Base_SetConfig+0xbc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0xa0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <TIM_Base_SetConfig+0xc0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0xa0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <TIM_Base_SetConfig+0xc4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d103      	bne.n	8004a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	615a      	str	r2, [r3, #20]
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400

08004a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0302 	bic.w	r3, r3, #2
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <TIM_OC1_SetConfig+0xec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC1_SetConfig+0x70>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <TIM_OC1_SetConfig+0xf0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC1_SetConfig+0x70>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <TIM_OC1_SetConfig+0xf4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0308 	bic.w	r3, r3, #8
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <TIM_OC1_SetConfig+0xec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_OC1_SetConfig+0xa2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <TIM_OC1_SetConfig+0xf0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC1_SetConfig+0xa2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <TIM_OC1_SetConfig+0xf4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0320 	bic.w	r3, r3, #32
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10d      	bne.n	8004bd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_OC2_SetConfig+0x98>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <TIM_OC2_SetConfig+0xec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC2_SetConfig+0x98>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <TIM_OC2_SetConfig+0xf0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d113      	bne.n	8004c14 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400

08004c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <TIM_OC3_SetConfig+0xe4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC3_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_OC3_SetConfig+0x96>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC3_SetConfig+0xe8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_OC3_SetConfig+0x96>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC3_SetConfig+0xec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d113      	bne.n	8004d06 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400

08004d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC4_SetConfig+0xb0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_OC4_SetConfig+0x74>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <TIM_OC4_SetConfig+0xb4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC4_SetConfig+0x74>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <TIM_OC4_SetConfig+0xb8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d109      	bne.n	8004dc0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	019b      	lsls	r3, r3, #6
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400

08004df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <TIM_OC5_SetConfig+0xa4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_OC5_SetConfig+0x6a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <TIM_OC5_SetConfig+0xa8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC5_SetConfig+0x6a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <TIM_OC5_SetConfig+0xac>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d109      	bne.n	8004e72 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	621a      	str	r2, [r3, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400

08004ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	051b      	lsls	r3, r3, #20
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <TIM_OC6_SetConfig+0xa8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d007      	beq.n	8004f10 <TIM_OC6_SetConfig+0x6c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <TIM_OC6_SetConfig+0xac>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC6_SetConfig+0x6c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <TIM_OC6_SetConfig+0xb0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d109      	bne.n	8004f24 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2201      	movs	r2, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e04f      	b.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a21      	ldr	r2, [pc, #132]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d108      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005120:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d004      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10c      	bne.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40014000 	.word	0x40014000

080051a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e060      	b.n	8005282 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d115      	bne.n	8005270 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00

08005294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e040      	b.n	8005364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc f8dc 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	; 0x24
 80052fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fafc 	bl	800590c <UART_SetConfig>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e022      	b.n	8005364 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fd26 	bl	8005d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fdad 	bl	8005ebc <UART_CheckIdleState>
 8005362:	4603      	mov	r3, r0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e027      	b.n	80053ce <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fc f969 	bl	8001684 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08a      	sub	sp, #40	; 0x28
 80053da:	af02      	add	r7, sp, #8
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	f040 8081 	bne.w	80054f2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Transmit+0x26>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e079      	b.n	80054f4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_UART_Transmit+0x38>
 800540a:	2302      	movs	r3, #2
 800540c:	e072      	b.n	80054f4 <HAL_UART_Transmit+0x11e>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2221      	movs	r2, #33	; 0x21
 8005420:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005422:	f7fc fc83 	bl	8001d2c <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d108      	bne.n	8005454 <HAL_UART_Transmit+0x7e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	e003      	b.n	800545c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005464:	e02d      	b.n	80054c2 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fd68 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e039      	b.n	80054f4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005492:	b292      	uxth	r2, r2
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	3302      	adds	r3, #2
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	e008      	b.n	80054b0 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	b292      	uxth	r2, r2
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1cb      	bne.n	8005466 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2140      	movs	r1, #64	; 0x40
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fd34 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e005      	b.n	80054f4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	2b20      	cmp	r3, #32
 8005510:	f040 808a 	bne.w	8005628 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_UART_Receive_IT+0x24>
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e082      	b.n	800562a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_UART_Receive_IT+0x36>
 800552e:	2302      	movs	r3, #2
 8005530:	e07b      	b.n	800562a <HAL_UART_Receive_IT+0x12e>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	d10e      	bne.n	800557e <HAL_UART_Receive_IT+0x82>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_UART_Receive_IT+0x78>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800556e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005572:	e02d      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	22ff      	movs	r2, #255	; 0xff
 8005578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800557c:	e028      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10d      	bne.n	80055a2 <HAL_UART_Receive_IT+0xa6>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <HAL_UART_Receive_IT+0x9c>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005596:	e01b      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	227f      	movs	r2, #127	; 0x7f
 800559c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055a0:	e016      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055aa:	d10d      	bne.n	80055c8 <HAL_UART_Receive_IT+0xcc>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_UART_Receive_IT+0xc2>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	227f      	movs	r2, #127	; 0x7f
 80055b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055bc:	e008      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	223f      	movs	r2, #63	; 0x3f
 80055c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055c6:	e003      	b.n	80055d0 <HAL_UART_Receive_IT+0xd4>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2222      	movs	r2, #34	; 0x22
 80055da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d107      	bne.n	8005606 <HAL_UART_Receive_IT+0x10a>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <HAL_UART_Receive_IT+0x13c>)
 8005602:	661a      	str	r2, [r3, #96]	; 0x60
 8005604:	e002      	b.n	800560c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a0c      	ldr	r2, [pc, #48]	; (800563c <HAL_UART_Receive_IT+0x140>)
 800560a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005622:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	08006185 	.word	0x08006185
 800563c:	080060db 	.word	0x080060db

08005640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f640 030f 	movw	r3, #2063	; 0x80f
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d113      	bne.n	8005698 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8114 	beq.w	80058b6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
      }
      return;
 8005696:	e10e      	b.n	80058b6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80d6 	beq.w	800584c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4b86      	ldr	r3, [pc, #536]	; (80058c8 <HAL_UART_IRQHandler+0x288>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80cb 	beq.w	800584c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <HAL_UART_IRQHandler+0x9e>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2201      	movs	r2, #1
 80056d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_UART_IRQHandler+0xc6>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2202      	movs	r2, #2
 80056f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <HAL_UART_IRQHandler+0xee>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2204      	movs	r2, #4
 8005720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005726:	f043 0202 	orr.w	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d013      	beq.n	8005760 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005758:	f043 0208 	orr.w	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00f      	beq.n	800578a <HAL_UART_IRQHandler+0x14a>
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8093 	beq.w	80058ba <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d004      	beq.n	80057d6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d031      	beq.n	800583a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fc30 	bl	800603c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d123      	bne.n	8005832 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005806:	4a31      	ldr	r2, [pc, #196]	; (80058cc <HAL_UART_IRQHandler+0x28c>)
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	4618      	mov	r0, r3
 8005810:	f7fc fd6e 	bl	80022f0 <HAL_DMA_Abort_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e00e      	b.n	8005848 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f864 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00a      	b.n	8005848 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f860 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e006      	b.n	8005848 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f85c 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005846:	e038      	b.n	80058ba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	bf00      	nop
    return;
 800584a:	e036      	b.n	80058ba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_UART_IRQHandler+0x232>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fcdf 	bl	800622e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005870:	e026      	b.n	80058c0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4798      	blx	r3
    }
    return;
 8005896:	e012      	b.n	80058be <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <HAL_UART_IRQHandler+0x280>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbfb 	bl	80060a8 <UART_EndTransmit_IT>
    return;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <HAL_UART_IRQHandler+0x280>
      return;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_UART_IRQHandler+0x280>
    return;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_UART_IRQHandler+0x280>
    return;
 80058be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	04000120 	.word	0x04000120
 80058cc:	0800607d 	.word	0x0800607d

080058d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4baa      	ldr	r3, [pc, #680]	; (8005be4 <UART_SetConfig+0x2d8>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	69f9      	ldr	r1, [r7, #28]
 8005942:	430b      	orrs	r3, r1
 8005944:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4aa0      	ldr	r2, [pc, #640]	; (8005be8 <UART_SetConfig+0x2dc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	4313      	orrs	r3, r2
 8005974:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	430a      	orrs	r2, r1
 8005988:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a97      	ldr	r2, [pc, #604]	; (8005bec <UART_SetConfig+0x2e0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d121      	bne.n	80059d8 <UART_SetConfig+0xcc>
 8005994:	4b96      	ldr	r3, [pc, #600]	; (8005bf0 <UART_SetConfig+0x2e4>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d816      	bhi.n	80059d0 <UART_SetConfig+0xc4>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x9c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059c5 	.word	0x080059c5
 80059b0:	080059bf 	.word	0x080059bf
 80059b4:	080059cb 	.word	0x080059cb
 80059b8:	2301      	movs	r3, #1
 80059ba:	76fb      	strb	r3, [r7, #27]
 80059bc:	e098      	b.n	8005af0 <UART_SetConfig+0x1e4>
 80059be:	2302      	movs	r3, #2
 80059c0:	76fb      	strb	r3, [r7, #27]
 80059c2:	e095      	b.n	8005af0 <UART_SetConfig+0x1e4>
 80059c4:	2304      	movs	r3, #4
 80059c6:	76fb      	strb	r3, [r7, #27]
 80059c8:	e092      	b.n	8005af0 <UART_SetConfig+0x1e4>
 80059ca:	2308      	movs	r3, #8
 80059cc:	76fb      	strb	r3, [r7, #27]
 80059ce:	e08f      	b.n	8005af0 <UART_SetConfig+0x1e4>
 80059d0:	2310      	movs	r3, #16
 80059d2:	76fb      	strb	r3, [r7, #27]
 80059d4:	bf00      	nop
 80059d6:	e08b      	b.n	8005af0 <UART_SetConfig+0x1e4>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a85      	ldr	r2, [pc, #532]	; (8005bf4 <UART_SetConfig+0x2e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d134      	bne.n	8005a4c <UART_SetConfig+0x140>
 80059e2:	4b83      	ldr	r3, [pc, #524]	; (8005bf0 <UART_SetConfig+0x2e4>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d829      	bhi.n	8005a44 <UART_SetConfig+0x138>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0xec>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a45 	.word	0x08005a45
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a39 	.word	0x08005a39
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a45 	.word	0x08005a45
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a33 	.word	0x08005a33
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a45 	.word	0x08005a45
 8005a28:	08005a3f 	.word	0x08005a3f
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	76fb      	strb	r3, [r7, #27]
 8005a30:	e05e      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a32:	2302      	movs	r3, #2
 8005a34:	76fb      	strb	r3, [r7, #27]
 8005a36:	e05b      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e058      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	76fb      	strb	r3, [r7, #27]
 8005a42:	e055      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a44:	2310      	movs	r3, #16
 8005a46:	76fb      	strb	r3, [r7, #27]
 8005a48:	bf00      	nop
 8005a4a:	e051      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a69      	ldr	r2, [pc, #420]	; (8005bf8 <UART_SetConfig+0x2ec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d120      	bne.n	8005a98 <UART_SetConfig+0x18c>
 8005a56:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <UART_SetConfig+0x2e4>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d00f      	beq.n	8005a84 <UART_SetConfig+0x178>
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d802      	bhi.n	8005a6e <UART_SetConfig+0x162>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <UART_SetConfig+0x16c>
 8005a6c:	e010      	b.n	8005a90 <UART_SetConfig+0x184>
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d005      	beq.n	8005a7e <UART_SetConfig+0x172>
 8005a72:	2b30      	cmp	r3, #48	; 0x30
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0x17e>
 8005a76:	e00b      	b.n	8005a90 <UART_SetConfig+0x184>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e038      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	76fb      	strb	r3, [r7, #27]
 8005a82:	e035      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a84:	2304      	movs	r3, #4
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e032      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	76fb      	strb	r3, [r7, #27]
 8005a8e:	e02f      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a90:	2310      	movs	r3, #16
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	bf00      	nop
 8005a96:	e02b      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	; (8005be8 <UART_SetConfig+0x2dc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d124      	bne.n	8005aec <UART_SetConfig+0x1e0>
 8005aa2:	4b53      	ldr	r3, [pc, #332]	; (8005bf0 <UART_SetConfig+0x2e4>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d012      	beq.n	8005ad8 <UART_SetConfig+0x1cc>
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d802      	bhi.n	8005abe <UART_SetConfig+0x1b2>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <UART_SetConfig+0x1c0>
 8005abc:	e012      	b.n	8005ae4 <UART_SetConfig+0x1d8>
 8005abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac2:	d006      	beq.n	8005ad2 <UART_SetConfig+0x1c6>
 8005ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac8:	d009      	beq.n	8005ade <UART_SetConfig+0x1d2>
 8005aca:	e00b      	b.n	8005ae4 <UART_SetConfig+0x1d8>
 8005acc:	2300      	movs	r3, #0
 8005ace:	76fb      	strb	r3, [r7, #27]
 8005ad0:	e00e      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	76fb      	strb	r3, [r7, #27]
 8005ad6:	e00b      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	76fb      	strb	r3, [r7, #27]
 8005adc:	e008      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	76fb      	strb	r3, [r7, #27]
 8005ae2:	e005      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	bf00      	nop
 8005aea:	e001      	b.n	8005af0 <UART_SetConfig+0x1e4>
 8005aec:	2310      	movs	r3, #16
 8005aee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <UART_SetConfig+0x2dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f040 8082 	bne.w	8005c00 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005afc:	7efb      	ldrb	r3, [r7, #27]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d823      	bhi.n	8005b4a <UART_SetConfig+0x23e>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x1fc>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b4b 	.word	0x08005b4b
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b4b 	.word	0x08005b4b
 8005b18:	08005b3b 	.word	0x08005b3b
 8005b1c:	08005b4b 	.word	0x08005b4b
 8005b20:	08005b4b 	.word	0x08005b4b
 8005b24:	08005b4b 	.word	0x08005b4b
 8005b28:	08005b43 	.word	0x08005b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fd fdea 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8005b30:	6178      	str	r0, [r7, #20]
        break;
 8005b32:	e00f      	b.n	8005b54 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <UART_SetConfig+0x2f0>)
 8005b36:	617b      	str	r3, [r7, #20]
        break;
 8005b38:	e00c      	b.n	8005b54 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd fd4d 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8005b3e:	6178      	str	r0, [r7, #20]
        break;
 8005b40:	e008      	b.n	8005b54 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	617b      	str	r3, [r7, #20]
        break;
 8005b48:	e004      	b.n	8005b54 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	76bb      	strb	r3, [r7, #26]
        break;
 8005b52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8100 	beq.w	8005d5c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d305      	bcc.n	8005b78 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d902      	bls.n	8005b7e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	76bb      	strb	r3, [r7, #26]
 8005b7c:	e0ee      	b.n	8005d5c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0214      	lsls	r4, r2, #8
 8005b90:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b94:	020b      	lsls	r3, r1, #8
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6852      	ldr	r2, [r2, #4]
 8005b9a:	0852      	lsrs	r2, r2, #1
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	eb13 0b01 	adds.w	fp, r3, r1
 8005ba6:	eb44 0c02 	adc.w	ip, r4, r2
 8005baa:	4658      	mov	r0, fp
 8005bac:	4661      	mov	r1, ip
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4623      	mov	r3, r4
 8005bba:	f7fa fb59 	bl	8000270 <__aeabi_uldivmod>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bca:	d308      	bcc.n	8005bde <UART_SetConfig+0x2d2>
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d204      	bcs.n	8005bde <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	60da      	str	r2, [r3, #12]
 8005bdc:	e0be      	b.n	8005d5c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	76bb      	strb	r3, [r7, #26]
 8005be2:	e0bb      	b.n	8005d5c <UART_SetConfig+0x450>
 8005be4:	efff69f3 	.word	0xefff69f3
 8005be8:	40008000 	.word	0x40008000
 8005bec:	40013800 	.word	0x40013800
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	40004800 	.word	0x40004800
 8005bfc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	d15c      	bne.n	8005cc4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8005c0a:	7efb      	ldrb	r3, [r7, #27]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d828      	bhi.n	8005c62 <UART_SetConfig+0x356>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x30c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c63 	.word	0x08005c63
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c63 	.word	0x08005c63
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	08005c5b 	.word	0x08005c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7fd fd62 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8005c40:	6178      	str	r0, [r7, #20]
        break;
 8005c42:	e013      	b.n	8005c6c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c44:	f7fd fd74 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8005c48:	6178      	str	r0, [r7, #20]
        break;
 8005c4a:	e00f      	b.n	8005c6c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <UART_SetConfig+0x468>)
 8005c4e:	617b      	str	r3, [r7, #20]
        break;
 8005c50:	e00c      	b.n	8005c6c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c52:	f7fd fcc1 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8005c56:	6178      	str	r0, [r7, #20]
        break;
 8005c58:	e008      	b.n	8005c6c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	617b      	str	r3, [r7, #20]
        break;
 8005c60:	e004      	b.n	8005c6c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	76bb      	strb	r3, [r7, #26]
        break;
 8005c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d074      	beq.n	8005d5c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005a      	lsls	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d916      	bls.n	8005cbe <UART_SetConfig+0x3b2>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c96:	d212      	bcs.n	8005cbe <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f023 030f 	bic.w	r3, r3, #15
 8005ca0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	89fa      	ldrh	r2, [r7, #14]
 8005cba:	60da      	str	r2, [r3, #12]
 8005cbc:	e04e      	b.n	8005d5c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	76bb      	strb	r3, [r7, #26]
 8005cc2:	e04b      	b.n	8005d5c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cc4:	7efb      	ldrb	r3, [r7, #27]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d827      	bhi.n	8005d1a <UART_SetConfig+0x40e>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <UART_SetConfig+0x3c4>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d1b 	.word	0x08005d1b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fd fd06 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	6178      	str	r0, [r7, #20]
        break;
 8005cfa:	e013      	b.n	8005d24 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fd fd18 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8005d00:	6178      	str	r0, [r7, #20]
        break;
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <UART_SetConfig+0x468>)
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e00c      	b.n	8005d24 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fd fc65 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8005d0e:	6178      	str	r0, [r7, #20]
        break;
 8005d10:	e008      	b.n	8005d24 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	617b      	str	r3, [r7, #20]
        break;
 8005d18:	e004      	b.n	8005d24 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	76bb      	strb	r3, [r7, #26]
        break;
 8005d22:	bf00      	nop
    }

    if (pclk != 0U)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	085a      	lsrs	r2, r3, #1
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	441a      	add	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b0f      	cmp	r3, #15
 8005d44:	d908      	bls.n	8005d58 <UART_SetConfig+0x44c>
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d204      	bcs.n	8005d58 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e001      	b.n	8005d5c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005d68:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005d74:	00f42400 	.word	0x00f42400

08005d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d10a      	bne.n	8005e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005eca:	f7fb ff2f 	bl	8001d2c <HAL_GetTick>
 8005ece:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d10e      	bne.n	8005efc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ede:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f82a 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e020      	b.n	8005f3e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d10e      	bne.n	8005f28 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f814 	bl	8005f46 <UART_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e00a      	b.n	8005f3e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	e05d      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d059      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f60:	f7fb fee4 	bl	8001d2c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11b      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0201 	bic.w	r2, r2, #1
 8005f94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e042      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02b      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fca:	d123      	bne.n	8006014 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e00f      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	d092      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006052:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff fc2c 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fbff 	bl	80058d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060e8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ee:	2b22      	cmp	r3, #34	; 0x22
 80060f0:	d13a      	bne.n	8006168 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060f8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060fa:	89bb      	ldrh	r3, [r7, #12]
 80060fc:	b2d9      	uxtb	r1, r3
 80060fe:	89fb      	ldrh	r3, [r7, #14]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	400a      	ands	r2, r1
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d123      	bne.n	800617c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006142:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fbbf 	bl	80058e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006166:	e009      	b.n	800617c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	8b1b      	ldrh	r3, [r3, #24]
 800616e:	b29a      	uxth	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0208 	orr.w	r2, r2, #8
 8006178:	b292      	uxth	r2, r2
 800617a:	831a      	strh	r2, [r3, #24]
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006192:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006198:	2b22      	cmp	r3, #34	; 0x22
 800619a:	d13a      	bne.n	8006212 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061a2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80061aa:	89ba      	ldrh	r2, [r7, #12]
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	4013      	ands	r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d123      	bne.n	8006226 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fb6a 	bl	80058e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006210:	e009      	b.n	8006226 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	8b1b      	ldrh	r3, [r3, #24]
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0208 	orr.w	r2, r2, #8
 8006222:	b292      	uxth	r2, r2
 8006224:	831a      	strh	r2, [r3, #24]
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006246:	bf00      	nop
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006256:	f3ef 8305 	mrs	r3, IPSR
 800625a:	60bb      	str	r3, [r7, #8]
  return(result);
 800625c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006262:	f3ef 8310 	mrs	r3, PRIMASK
 8006266:	607b      	str	r3, [r7, #4]
  return(result);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	603b      	str	r3, [r7, #0]
  return(result);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <osKernelInitialize+0x3a>
 800627a:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <osKernelInitialize+0x64>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d103      	bne.n	800628a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006282:	f06f 0305 	mvn.w	r3, #5
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e00c      	b.n	80062a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <osKernelInitialize+0x64>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d105      	bne.n	800629e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <osKernelInitialize+0x64>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e002      	b.n	80062a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000b90 	.word	0x20000b90

080062b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ca:	f3ef 8310 	mrs	r3, PRIMASK
 80062ce:	607b      	str	r3, [r7, #4]
  return(result);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062d6:	f3ef 8311 	mrs	r3, BASEPRI
 80062da:	603b      	str	r3, [r7, #0]
  return(result);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <osKernelStart+0x3a>
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <osKernelStart+0x68>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d103      	bne.n	80062f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80062ea:	f06f 0305 	mvn.w	r3, #5
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e010      	b.n	8006314 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <osKernelStart+0x68>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d109      	bne.n	800630e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062fa:	f7ff ffa2 	bl	8006242 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <osKernelStart+0x68>)
 8006300:	2202      	movs	r2, #2
 8006302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006304:	f002 f962 	bl	80085cc <vTaskStartScheduler>
      stat = osOK;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e002      	b.n	8006314 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800630e:	f04f 33ff 	mov.w	r3, #4294967295
 8006312:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000b90 	.word	0x20000b90

08006324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b090      	sub	sp, #64	; 0x40
 8006328:	af04      	add	r7, sp, #16
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006334:	f3ef 8305 	mrs	r3, IPSR
 8006338:	61fb      	str	r3, [r7, #28]
  return(result);
 800633a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 808f 	bne.w	8006460 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006342:	f3ef 8310 	mrs	r3, PRIMASK
 8006346:	61bb      	str	r3, [r7, #24]
  return(result);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800634e:	f3ef 8311 	mrs	r3, BASEPRI
 8006352:	617b      	str	r3, [r7, #20]
  return(result);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <osThreadNew+0x3e>
 800635a:	4b44      	ldr	r3, [pc, #272]	; (800646c <osThreadNew+0x148>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d07e      	beq.n	8006460 <osThreadNew+0x13c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d07b      	beq.n	8006460 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800636c:	2318      	movs	r3, #24
 800636e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006374:	f04f 33ff 	mov.w	r3, #4294967295
 8006378:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d045      	beq.n	800640c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <osThreadNew+0x6a>
        name = attr->name;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <osThreadNew+0x90>
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	2b38      	cmp	r3, #56	; 0x38
 80063a6:	d805      	bhi.n	80063b4 <osThreadNew+0x90>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <osThreadNew+0x94>
        return (NULL);
 80063b4:	2300      	movs	r3, #0
 80063b6:	e054      	b.n	8006462 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <osThreadNew+0xca>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b5b      	cmp	r3, #91	; 0x5b
 80063d6:	d90a      	bls.n	80063ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <osThreadNew+0xca>
        mem = 1;
 80063e8:	2301      	movs	r3, #1
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	e010      	b.n	8006410 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <osThreadNew+0xec>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d108      	bne.n	8006410 <osThreadNew+0xec>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <osThreadNew+0xec>
          mem = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	e001      	b.n	8006410 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d110      	bne.n	8006438 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800641e:	9202      	str	r2, [sp, #8]
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f001 fd21 	bl	8007e74 <xTaskCreateStatic>
 8006432:	4603      	mov	r3, r0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	e013      	b.n	8006460 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d110      	bne.n	8006460 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	b29a      	uxth	r2, r3
 8006442:	f107 0310 	add.w	r3, r7, #16
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 fd69 	bl	8007f28 <xTaskCreate>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d001      	beq.n	8006460 <osThreadNew+0x13c>
          hTask = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006460:	693b      	ldr	r3, [r7, #16]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3730      	adds	r7, #48	; 0x30
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000b90 	.word	0x20000b90

08006470 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800647c:	f3ef 8305 	mrs	r3, IPSR
 8006480:	617b      	str	r3, [r7, #20]
  return(result);
 8006482:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10f      	bne.n	80064a8 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006488:	f3ef 8310 	mrs	r3, PRIMASK
 800648c:	613b      	str	r3, [r7, #16]
  return(result);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006494:	f3ef 8311 	mrs	r3, BASEPRI
 8006498:	60fb      	str	r3, [r7, #12]
  return(result);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <osThreadSuspend+0x40>
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <osThreadSuspend+0x64>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d103      	bne.n	80064b0 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80064a8:	f06f 0305 	mvn.w	r3, #5
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	e00b      	b.n	80064c8 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80064b6:	f06f 0303 	mvn.w	r3, #3
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e004      	b.n	80064c8 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80064c2:	69b8      	ldr	r0, [r7, #24]
 80064c4:	f001 ff80 	bl	80083c8 <vTaskSuspend>
  }

  return (stat);
 80064c8:	69fb      	ldr	r3, [r7, #28]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000b90 	.word	0x20000b90

080064d8 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e4:	f3ef 8305 	mrs	r3, IPSR
 80064e8:	617b      	str	r3, [r7, #20]
  return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f0:	f3ef 8310 	mrs	r3, PRIMASK
 80064f4:	613b      	str	r3, [r7, #16]
  return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006500:	60fb      	str	r3, [r7, #12]
  return(result);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <osThreadResume+0x40>
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <osThreadResume+0x64>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d103      	bne.n	8006518 <osThreadResume+0x40>
    stat = osErrorISR;
 8006510:	f06f 0305 	mvn.w	r3, #5
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e00b      	b.n	8006530 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800651e:	f06f 0303 	mvn.w	r3, #3
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e004      	b.n	8006530 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800652a:	69b8      	ldr	r0, [r7, #24]
 800652c:	f001 fff0 	bl	8008510 <vTaskResume>
  }

  return (stat);
 8006530:	69fb      	ldr	r3, [r7, #28]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000b90 	.word	0x20000b90

08006540 <osThreadExit>:

__NO_RETURN void osThreadExit (void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8006544:	2000      	movs	r0, #0
 8006546:	f001 fe33 	bl	80081b0 <vTaskDelete>
#endif
  for (;;);
 800654a:	e7fe      	b.n	800654a <osThreadExit+0xa>

0800654c <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006558:	f3ef 8305 	mrs	r3, IPSR
 800655c:	613b      	str	r3, [r7, #16]
  return(result);
 800655e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10f      	bne.n	8006584 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006564:	f3ef 8310 	mrs	r3, PRIMASK
 8006568:	60fb      	str	r3, [r7, #12]
  return(result);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006570:	f3ef 8311 	mrs	r3, BASEPRI
 8006574:	60bb      	str	r3, [r7, #8]
  return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <osThreadTerminate+0x40>
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <osThreadTerminate+0x7c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d103      	bne.n	800658c <osThreadTerminate+0x40>
    stat = osErrorISR;
 8006584:	f06f 0305 	mvn.w	r3, #5
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e017      	b.n	80065bc <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d103      	bne.n	800659a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8006592:	f06f 0303 	mvn.w	r3, #3
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e010      	b.n	80065bc <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800659a:	69b8      	ldr	r0, [r7, #24]
 800659c:	f001 feae 	bl	80082fc <eTaskGetState>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d005      	beq.n	80065b6 <osThreadTerminate+0x6a>
      stat = osOK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 80065ae:	69b8      	ldr	r0, [r7, #24]
 80065b0:	f001 fdfe 	bl	80081b0 <vTaskDelete>
 80065b4:	e002      	b.n	80065bc <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 80065b6:	f06f 0302 	mvn.w	r3, #2
 80065ba:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000b90 	.word	0x20000b90

080065cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	613b      	str	r3, [r7, #16]
  return(result);
 80065da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10f      	bne.n	8006600 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e0:	f3ef 8310 	mrs	r3, PRIMASK
 80065e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ec:	f3ef 8311 	mrs	r3, BASEPRI
 80065f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <osDelay+0x3c>
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <osDelay+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d103      	bne.n	8006608 <osDelay+0x3c>
    stat = osErrorISR;
 8006600:	f06f 0305 	mvn.w	r3, #5
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e007      	b.n	8006618 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fe3e 	bl	8008294 <vTaskDelay>
    }
  }

  return (stat);
 8006618:	697b      	ldr	r3, [r7, #20]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000b90 	.word	0x20000b90

08006628 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f003 f9c9 	bl	80099c8 <pvTimerGetTimerID>
 8006636:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <TimerCallback+0x22>
    callb->func (callb->arg);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	6852      	ldr	r2, [r2, #4]
 8006646:	4610      	mov	r0, r2
 8006648:	4798      	blx	r3
  }
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	607a      	str	r2, [r7, #4]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	460b      	mov	r3, r1
 8006662:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006668:	f3ef 8305 	mrs	r3, IPSR
 800666c:	61bb      	str	r3, [r7, #24]
  return(result);
 800666e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8006670:	2b00      	cmp	r3, #0
 8006672:	d16a      	bne.n	800674a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	617b      	str	r3, [r7, #20]
  return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	613b      	str	r3, [r7, #16]
  return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <osTimerNew+0x40>
 800668c:	4b31      	ldr	r3, [pc, #196]	; (8006754 <osTimerNew+0x100>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d05a      	beq.n	800674a <osTimerNew+0xf6>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d057      	beq.n	800674a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800669a:	2008      	movs	r0, #8
 800669c:	f003 fbf8 	bl	8009e90 <pvPortMalloc>
 80066a0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d050      	beq.n	800674a <osTimerNew+0xf6>
      callb->func = func;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <osTimerNew+0x6c>
        reload = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	e001      	b.n	80066c4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295
 80066c8:	623b      	str	r3, [r7, #32]
      name = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01c      	beq.n	800670e <osTimerNew+0xba>
        if (attr->name != NULL) {
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <osTimerNew+0x8e>
          name = attr->name;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <osTimerNew+0xa4>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b2b      	cmp	r3, #43	; 0x2b
 80066f0:	d902      	bls.n	80066f8 <osTimerNew+0xa4>
          mem = 1;
 80066f2:	2301      	movs	r3, #1
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	e00c      	b.n	8006712 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d108      	bne.n	8006712 <osTimerNew+0xbe>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <osTimerNew+0xbe>
            mem = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	623b      	str	r3, [r7, #32]
 800670c:	e001      	b.n	8006712 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10c      	bne.n	8006732 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <osTimerNew+0x104>)
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	2101      	movs	r1, #1
 8006728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800672a:	f002 fdd8 	bl	80092de <xTimerCreateStatic>
 800672e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006730:	e00b      	b.n	800674a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <osTimerNew+0x104>)
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	2101      	movs	r1, #1
 8006742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006744:	f002 fdaa 	bl	800929c <xTimerCreate>
 8006748:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800674c:	4618      	mov	r0, r3
 800674e:	3730      	adds	r7, #48	; 0x30
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000b90 	.word	0x20000b90
 8006758:	08006629 	.word	0x08006629

0800675c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af02      	add	r7, sp, #8
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800676a:	f3ef 8305 	mrs	r3, IPSR
 800676e:	617b      	str	r3, [r7, #20]
  return(result);
 8006770:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006776:	f3ef 8310 	mrs	r3, PRIMASK
 800677a:	613b      	str	r3, [r7, #16]
  return(result);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	60fb      	str	r3, [r7, #12]
  return(result);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <osTimerStart+0x42>
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <osTimerStart+0x7c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d103      	bne.n	800679e <osTimerStart+0x42>
    stat = osErrorISR;
 8006796:	f06f 0305 	mvn.w	r3, #5
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e017      	b.n	80067ce <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <osTimerStart+0x50>
    stat = osErrorParameter;
 80067a4:	f06f 0303 	mvn.w	r3, #3
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	e010      	b.n	80067ce <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	2300      	movs	r3, #0
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	2104      	movs	r1, #4
 80067b6:	69b8      	ldr	r0, [r7, #24]
 80067b8:	f002 fe08 	bl	80093cc <xTimerGenericCommand>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d102      	bne.n	80067c8 <osTimerStart+0x6c>
      stat = osOK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	e002      	b.n	80067ce <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80067c8:	f06f 0302 	mvn.w	r3, #2
 80067cc:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80067ce:	69fb      	ldr	r3, [r7, #28]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000b90 	.word	0x20000b90

080067dc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e8:	f3ef 8305 	mrs	r3, IPSR
 80067ec:	613b      	str	r3, [r7, #16]
  return(result);
 80067ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 8085 	bne.w	8006900 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f6:	f3ef 8310 	mrs	r3, PRIMASK
 80067fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006802:	f3ef 8311 	mrs	r3, BASEPRI
 8006806:	60bb      	str	r3, [r7, #8]
  return(result);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <osMutexNew+0x3a>
 800680e:	4b3f      	ldr	r3, [pc, #252]	; (800690c <osMutexNew+0x130>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d074      	beq.n	8006900 <osMutexNew+0x124>
    if (attr != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <osMutexNew+0x48>
      type = attr->attr_bits;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e001      	b.n	8006828 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osMutexNew+0x5c>
      rmtx = 1U;
 8006832:	2301      	movs	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	e001      	b.n	800683c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d15c      	bne.n	8006900 <osMutexNew+0x124>
      mem = -1;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d015      	beq.n	800687e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <osMutexNew+0x8c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b4f      	cmp	r3, #79	; 0x4f
 8006860:	d902      	bls.n	8006868 <osMutexNew+0x8c>
          mem = 1;
 8006862:	2301      	movs	r3, #1
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e00c      	b.n	8006882 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <osMutexNew+0xa6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <osMutexNew+0xa6>
            mem = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	e001      	b.n	8006882 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d112      	bne.n	80068ae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4619      	mov	r1, r3
 8006894:	2004      	movs	r0, #4
 8006896:	f000 fc44 	bl	8007122 <xQueueCreateMutexStatic>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24
 800689c:	e016      	b.n	80068cc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4619      	mov	r1, r3
 80068a4:	2001      	movs	r0, #1
 80068a6:	f000 fc3c 	bl	8007122 <xQueueCreateMutexStatic>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24
 80068ac:	e00e      	b.n	80068cc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80068ba:	2004      	movs	r0, #4
 80068bc:	f000 fc19 	bl	80070f2 <xQueueCreateMutex>
 80068c0:	6278      	str	r0, [r7, #36]	; 0x24
 80068c2:	e003      	b.n	80068cc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80068c4:	2001      	movs	r0, #1
 80068c6:	f000 fc14 	bl	80070f2 <xQueueCreateMutex>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <osMutexNew+0x110>
        if (attr != NULL) {
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <osMutexNew+0x104>
          name = attr->name;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e001      	b.n	80068e4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068e8:	f001 fa3e 	bl	8007d68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <osMutexNew+0x124>
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000b90 	.word	0x20000b90

08006910 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800692e:	f3ef 8305 	mrs	r3, IPSR
 8006932:	613b      	str	r3, [r7, #16]
  return(result);
 8006934:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693a:	f3ef 8310 	mrs	r3, PRIMASK
 800693e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	60bb      	str	r3, [r7, #8]
  return(result);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <osMutexAcquire+0x52>
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <osMutexAcquire+0xb8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d103      	bne.n	8006962 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800695a:	f06f 0305 	mvn.w	r3, #5
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	e02c      	b.n	80069bc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006968:	f06f 0303 	mvn.w	r3, #3
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	e025      	b.n	80069bc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d011      	beq.n	800699a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	69b8      	ldr	r0, [r7, #24]
 800697a:	f000 fc20 	bl	80071be <xQueueTakeMutexRecursive>
 800697e:	4603      	mov	r3, r0
 8006980:	2b01      	cmp	r3, #1
 8006982:	d01b      	beq.n	80069bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800698a:	f06f 0301 	mvn.w	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e014      	b.n	80069bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006992:	f06f 0302 	mvn.w	r3, #2
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e010      	b.n	80069bc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	69b8      	ldr	r0, [r7, #24]
 800699e:	f000 ff13 	bl	80077c8 <xQueueSemaphoreTake>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d009      	beq.n	80069bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80069ae:	f06f 0301 	mvn.w	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	e002      	b.n	80069bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80069b6:	f06f 0302 	mvn.w	r3, #2
 80069ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80069bc:	69fb      	ldr	r3, [r7, #28]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000b90 	.word	0x20000b90

080069cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f023 0301 	bic.w	r3, r3, #1
 80069da:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e8:	f3ef 8305 	mrs	r3, IPSR
 80069ec:	613b      	str	r3, [r7, #16]
  return(result);
 80069ee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10f      	bne.n	8006a14 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f4:	f3ef 8310 	mrs	r3, PRIMASK
 80069f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <osMutexRelease+0x50>
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <osMutexRelease+0x9c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d103      	bne.n	8006a1c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006a14:	f06f 0305 	mvn.w	r3, #5
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e01f      	b.n	8006a5c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006a22:	f06f 0303 	mvn.w	r3, #3
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e018      	b.n	8006a5c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006a30:	69b8      	ldr	r0, [r7, #24]
 8006a32:	f000 fb91 	bl	8007158 <xQueueGiveMutexRecursive>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d00f      	beq.n	8006a5c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006a3c:	f06f 0302 	mvn.w	r3, #2
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e00b      	b.n	8006a5c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006a44:	2300      	movs	r3, #0
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f000 fc52 	bl	80072f4 <xQueueGenericSend>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006a56:	f06f 0302 	mvn.w	r3, #2
 8006a5a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000b90 	.word	0x20000b90

08006a6c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a7c:	f3ef 8305 	mrs	r3, IPSR
 8006a80:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a82:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f040 8087 	bne.w	8006b98 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8e:	617b      	str	r3, [r7, #20]
  return(result);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a96:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9a:	613b      	str	r3, [r7, #16]
  return(result);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <osSemaphoreNew+0x3e>
 8006aa2:	4b40      	ldr	r3, [pc, #256]	; (8006ba4 <osSemaphoreNew+0x138>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d076      	beq.n	8006b98 <osSemaphoreNew+0x12c>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d073      	beq.n	8006b98 <osSemaphoreNew+0x12c>
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d86f      	bhi.n	8006b98 <osSemaphoreNew+0x12c>
    mem = -1;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <osSemaphoreNew+0x6e>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ad2:	d902      	bls.n	8006ada <osSemaphoreNew+0x6e>
        mem = 1;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	e00c      	b.n	8006af4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <osSemaphoreNew+0x88>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <osSemaphoreNew+0x88>
          mem = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	e001      	b.n	8006af4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d04d      	beq.n	8006b98 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d129      	bne.n	8006b56 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d10b      	bne.n	8006b20 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	2001      	movs	r0, #1
 8006b18:	f000 f9fc 	bl	8006f14 <xQueueGenericCreateStatic>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24
 8006b1e:	e005      	b.n	8006b2c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006b20:	2203      	movs	r2, #3
 8006b22:	2100      	movs	r1, #0
 8006b24:	2001      	movs	r0, #1
 8006b26:	f000 fa68 	bl	8006ffa <xQueueGenericCreate>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d022      	beq.n	8006b78 <osSemaphoreNew+0x10c>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01f      	beq.n	8006b78 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b40:	f000 fbd8 	bl	80072f4 <xQueueGenericSend>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d016      	beq.n	8006b78 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8006b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b4c:	f000 ffc1 	bl	8007ad2 <vQueueDelete>
            hSemaphore = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
 8006b54:	e010      	b.n	8006b78 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d108      	bne.n	8006b6e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fb5f 	bl	8007228 <xQueueCreateCountingSemaphoreStatic>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b6c:	e004      	b.n	8006b78 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fb8e 	bl	8007292 <xQueueCreateCountingSemaphore>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <osSemaphoreNew+0x120>
          name = attr->name;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e001      	b.n	8006b90 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b94:	f001 f8e8 	bl	8007d68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3728      	adds	r7, #40	; 0x28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000b90 	.word	0x20000b90

08006ba8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d103      	bne.n	8006bc8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006bc0:	f06f 0303 	mvn.w	r3, #3
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e04b      	b.n	8006c60 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc8:	f3ef 8305 	mrs	r3, IPSR
 8006bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10f      	bne.n	8006bf4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006be0:	f3ef 8311 	mrs	r3, BASEPRI
 8006be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d026      	beq.n	8006c3a <osSemaphoreAcquire+0x92>
 8006bec:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <osSemaphoreAcquire+0xc4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d122      	bne.n	8006c3a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006bfa:	f06f 0303 	mvn.w	r3, #3
 8006bfe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006c00:	e02d      	b.n	8006c5e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	69b8      	ldr	r0, [r7, #24]
 8006c10:	f000 fee2 	bl	80079d8 <xQueueReceiveFromISR>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d003      	beq.n	8006c22 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006c1a:	f06f 0302 	mvn.w	r3, #2
 8006c1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006c20:	e01d      	b.n	8006c5e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01a      	beq.n	8006c5e <osSemaphoreAcquire+0xb6>
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <osSemaphoreAcquire+0xc8>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006c38:	e011      	b.n	8006c5e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	69b8      	ldr	r0, [r7, #24]
 8006c3e:	f000 fdc3 	bl	80077c8 <xQueueSemaphoreTake>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d00b      	beq.n	8006c60 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006c4e:	f06f 0301 	mvn.w	r3, #1
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e004      	b.n	8006c60 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006c56:	f06f 0302 	mvn.w	r3, #2
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e000      	b.n	8006c60 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006c5e:	bf00      	nop
      }
    }
  }

  return (stat);
 8006c60:	69fb      	ldr	r3, [r7, #28]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000b90 	.word	0x20000b90
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <vApplicationGetIdleTaskMemory+0x30>)
 8006c8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000b94 	.word	0x20000b94
 8006ca4:	20000bf0 	.word	0x20000bf0

08006ca8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a06      	ldr	r2, [pc, #24]	; (8006cd8 <vApplicationGetTimerTaskMemory+0x30>)
 8006cbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cc6:	601a      	str	r2, [r3, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000df0 	.word	0x20000df0
 8006cd8:	20000e4c 	.word	0x20000e4c

08006cdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f103 0208 	add.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f103 0208 	add.w	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f103 0208 	add.w	r2, r3, #8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d94:	d103      	bne.n	8006d9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e00c      	b.n	8006db8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3308      	adds	r3, #8
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e002      	b.n	8006dac <vListInsert+0x2e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d2f6      	bcs.n	8006da6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6892      	ldr	r2, [r2, #8]
 8006e06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6852      	ldr	r2, [r2, #4]
 8006e10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d103      	bne.n	8006e24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1e5a      	subs	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	e7fe      	b.n	8006e6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e6c:	f002 fef6 	bl	8009c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d114      	bne.n	8006eec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01a      	beq.n	8006f00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3310      	adds	r3, #16
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fdfc 	bl	8008acc <xTaskRemoveFromEventList>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d012      	beq.n	8006f00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <xQueueGenericReset+0xcc>)
 8006edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	e009      	b.n	8006f00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fef3 	bl	8006cdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3324      	adds	r3, #36	; 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff feee 	bl	8006cdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f00:	f002 feda 	bl	8009cb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f04:	2301      	movs	r3, #1
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	; 0x38
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <xQueueGenericCreateStatic+0x28>
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3a:	e7fe      	b.n	8006f3a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <xQueueGenericCreateStatic+0x42>
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <xQueueGenericCreateStatic+0x4e>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <xQueueGenericCreateStatic+0x52>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueGenericCreateStatic+0x54>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <xQueueGenericCreateStatic+0x6c>
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	e7fe      	b.n	8006f7e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <xQueueGenericCreateStatic+0x78>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <xQueueGenericCreateStatic+0x7c>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <xQueueGenericCreateStatic+0x7e>
 8006f90:	2300      	movs	r3, #0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <xQueueGenericCreateStatic+0x96>
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006faa:	2350      	movs	r3, #80	; 0x50
 8006fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b50      	cmp	r3, #80	; 0x50
 8006fb2:	d009      	beq.n	8006fc8 <xQueueGenericCreateStatic+0xb4>
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e7fe      	b.n	8006fc6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f844 	bl	8007078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3730      	adds	r7, #48	; 0x30
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b08a      	sub	sp, #40	; 0x28
 8006ffe:	af02      	add	r7, sp, #8
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	4613      	mov	r3, r2
 8007006:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <xQueueGenericCreate+0x28>
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e7fe      	b.n	8007020 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e004      	b.n	8007038 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	3350      	adds	r3, #80	; 0x50
 800703c:	4618      	mov	r0, r3
 800703e:	f002 ff27 	bl	8009e90 <pvPortMalloc>
 8007042:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d011      	beq.n	800706e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	3350      	adds	r3, #80	; 0x50
 8007052:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800705c:	79fa      	ldrb	r2, [r7, #7]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	4613      	mov	r3, r2
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f805 	bl	8007078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800706e:	69bb      	ldr	r3, [r7, #24]
	}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e002      	b.n	800709a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070a6:	2101      	movs	r1, #1
 80070a8:	69b8      	ldr	r0, [r7, #24]
 80070aa:	f7ff fecb 	bl	8006e44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80070de:	2300      	movs	r3, #0
 80070e0:	2200      	movs	r2, #0
 80070e2:	2100      	movs	r1, #0
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f905 	bl	80072f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	4603      	mov	r3, r0
 80070fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070fc:	2301      	movs	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	461a      	mov	r2, r3
 8007108:	6939      	ldr	r1, [r7, #16]
 800710a:	6978      	ldr	r0, [r7, #20]
 800710c:	f7ff ff75 	bl	8006ffa <xQueueGenericCreate>
 8007110:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff ffd3 	bl	80070be <prvInitialiseMutex>

		return xNewQueue;
 8007118:	68fb      	ldr	r3, [r7, #12]
	}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007122:	b580      	push	{r7, lr}
 8007124:	b088      	sub	sp, #32
 8007126:	af02      	add	r7, sp, #8
 8007128:	4603      	mov	r3, r0
 800712a:	6039      	str	r1, [r7, #0]
 800712c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800712e:	2301      	movs	r3, #1
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	2300      	movs	r3, #0
 8007134:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	6939      	ldr	r1, [r7, #16]
 8007140:	6978      	ldr	r0, [r7, #20]
 8007142:	f7ff fee7 	bl	8006f14 <xQueueGenericCreateStatic>
 8007146:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff ffb8 	bl	80070be <prvInitialiseMutex>

		return xNewQueue;
 800714e:	68fb      	ldr	r3, [r7, #12]
	}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <xQueueGiveMutexRecursive+0x26>
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	e7fe      	b.n	800717c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	689c      	ldr	r4, [r3, #8]
 8007182:	f001 fe59 	bl	8008e38 <xTaskGetCurrentTaskHandle>
 8007186:	4603      	mov	r3, r0
 8007188:	429c      	cmp	r4, r3
 800718a:	d111      	bne.n	80071b0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	1e5a      	subs	r2, r3, #1
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800719e:	2300      	movs	r3, #0
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	6938      	ldr	r0, [r7, #16]
 80071a6:	f000 f8a5 	bl	80072f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80071aa:	2301      	movs	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e001      	b.n	80071b4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
	}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}

080071be <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80071be:	b590      	push	{r4, r7, lr}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <xQueueTakeMutexRecursive+0x28>
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e7fe      	b.n	80071e4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	689c      	ldr	r4, [r3, #8]
 80071ea:	f001 fe25 	bl	8008e38 <xTaskGetCurrentTaskHandle>
 80071ee:	4603      	mov	r3, r0
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d107      	bne.n	8007204 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80071fe:	2301      	movs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e00c      	b.n	800721e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6938      	ldr	r0, [r7, #16]
 8007208:	f000 fade 	bl	80077c8 <xQueueSemaphoreTake>
 800720c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800721e:	697b      	ldr	r3, [r7, #20]
	}
 8007220:	4618      	mov	r0, r3
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <xQueueCreateCountingSemaphoreStatic+0x26>
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e7fe      	b.n	800724c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d909      	bls.n	800726a <xQueueCreateCountingSemaphoreStatic+0x42>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e7fe      	b.n	8007268 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800726a:	2302      	movs	r3, #2
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	2100      	movs	r1, #0
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fe4d 	bl	8006f14 <xQueueGenericCreateStatic>
 800727a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007288:	69fb      	ldr	r3, [r7, #28]
	}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <xQueueCreateCountingSemaphore+0x24>
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	e7fe      	b.n	80072b4 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d909      	bls.n	80072d2 <xQueueCreateCountingSemaphore+0x40>
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e7fe      	b.n	80072d0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072d2:	2202      	movs	r2, #2
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fe8f 	bl	8006ffa <xQueueGenericCreate>
 80072dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072ea:	697b      	ldr	r3, [r7, #20]
	}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08e      	sub	sp, #56	; 0x38
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007302:	2300      	movs	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <xQueueGenericSend+0x30>
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
 8007322:	e7fe      	b.n	8007322 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <xQueueGenericSend+0x3e>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <xQueueGenericSend+0x42>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericSend+0x44>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <xQueueGenericSend+0x5c>
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
 800734e:	e7fe      	b.n	800734e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d103      	bne.n	800735e <xQueueGenericSend+0x6a>
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <xQueueGenericSend+0x6e>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <xQueueGenericSend+0x70>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <xQueueGenericSend+0x88>
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	e7fe      	b.n	800737a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800737c:	f001 fd6c 	bl	8008e58 <xTaskGetSchedulerState>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <xQueueGenericSend+0x98>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSend+0x9c>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSend+0x9e>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <xQueueGenericSend+0xb6>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073aa:	f002 fc57 	bl	8009c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <xQueueGenericSend+0xcc>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d129      	bne.n	8007414 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c6:	f000 fbbe 	bl	8007b46 <prvCopyDataToQueue>
 80073ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d010      	beq.n	80073f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fb77 	bl	8008acc <xTaskRemoveFromEventList>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d013      	beq.n	800740c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073e4:	4b3f      	ldr	r3, [pc, #252]	; (80074e4 <xQueueGenericSend+0x1f0>)
 80073e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	e00a      	b.n	800740c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073fc:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <xQueueGenericSend+0x1f0>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800740c:	f002 fc54 	bl	8009cb8 <vPortExitCritical>
				return pdPASS;
 8007410:	2301      	movs	r3, #1
 8007412:	e063      	b.n	80074dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800741a:	f002 fc4d 	bl	8009cb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800741e:	2300      	movs	r3, #0
 8007420:	e05c      	b.n	80074dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fbaf 	bl	8008b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007432:	2301      	movs	r3, #1
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007436:	f002 fc3f 	bl	8009cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800743a:	f001 f92b 	bl	8008694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800743e:	f002 fc0d 	bl	8009c5c <vPortEnterCritical>
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007448:	b25b      	sxtb	r3, r3
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d103      	bne.n	8007458 <xQueueGenericSend+0x164>
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800745e:	b25b      	sxtb	r3, r3
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007464:	d103      	bne.n	800746e <xQueueGenericSend+0x17a>
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800746e:	f002 fc23 	bl	8009cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007472:	1d3a      	adds	r2, r7, #4
 8007474:	f107 0314 	add.w	r3, r7, #20
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fb9e 	bl	8008bbc <xTaskCheckForTimeOut>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d124      	bne.n	80074d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007488:	f000 fc55 	bl	8007d36 <prvIsQueueFull>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d018      	beq.n	80074c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	3310      	adds	r3, #16
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fac8 	bl	8008a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074a2:	f000 fbe0 	bl	8007c66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074a6:	f001 f903 	bl	80086b0 <xTaskResumeAll>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f47f af7c 	bne.w	80073aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <xQueueGenericSend+0x1f0>)
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	e772      	b.n	80073aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c6:	f000 fbce 	bl	8007c66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ca:	f001 f8f1 	bl	80086b0 <xTaskResumeAll>
 80074ce:	e76c      	b.n	80073aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d2:	f000 fbc8 	bl	8007c66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074d6:	f001 f8eb 	bl	80086b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3738      	adds	r7, #56	; 0x38
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <xQueueGenericSendFromISR+0x2c>
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	e7fe      	b.n	8007512 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <xQueueGenericSendFromISR+0x3a>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <xQueueGenericSendFromISR+0x3e>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueGenericSendFromISR+0x40>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <xQueueGenericSendFromISR+0x58>
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
 800753e:	e7fe      	b.n	800753e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d103      	bne.n	800754e <xQueueGenericSendFromISR+0x66>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <xQueueGenericSendFromISR+0x6a>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSendFromISR+0x6c>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <xQueueGenericSendFromISR+0x84>
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	e7fe      	b.n	800756a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800756c:	f002 fc52 	bl	8009e14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007570:	f3ef 8211 	mrs	r2, BASEPRI
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	61ba      	str	r2, [r7, #24]
 8007586:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007588:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <xQueueGenericSendFromISR+0xb6>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d12c      	bne.n	80075f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ae:	f000 faca 	bl	8007b46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d112      	bne.n	80075e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fa7f 	bl	8008acc <xTaskRemoveFromEventList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e007      	b.n	80075f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	b25a      	sxtb	r2, r3
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075f2:	2301      	movs	r3, #1
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80075f6:	e001      	b.n	80075fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007608:	4618      	mov	r0, r3
 800760a:	3738      	adds	r7, #56	; 0x38
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08c      	sub	sp, #48	; 0x30
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800761c:	2300      	movs	r3, #0
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <xQueueReceive+0x2e>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	623b      	str	r3, [r7, #32]
 800763c:	e7fe      	b.n	800763c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <xQueueReceive+0x3c>
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueReceive+0x40>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueReceive+0x42>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <xQueueReceive+0x5a>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e7fe      	b.n	8007668 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800766a:	f001 fbf5 	bl	8008e58 <xTaskGetSchedulerState>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <xQueueReceive+0x6a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <xQueueReceive+0x6e>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueReceive+0x70>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <xQueueReceive+0x88>
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	e7fe      	b.n	8007696 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007698:	f002 fae0 	bl	8009c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01f      	beq.n	80076e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ac:	f000 fab5 	bl	8007c1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	1e5a      	subs	r2, r3, #1
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	3310      	adds	r3, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fa01 	bl	8008acc <xTaskRemoveFromEventList>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076d0:	4b3c      	ldr	r3, [pc, #240]	; (80077c4 <xQueueReceive+0x1b4>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076e0:	f002 faea 	bl	8009cb8 <vPortExitCritical>
				return pdPASS;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e069      	b.n	80077bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ee:	f002 fae3 	bl	8009cb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e062      	b.n	80077bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d106      	bne.n	800770a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076fc:	f107 0310 	add.w	r3, r7, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fa45 	bl	8008b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800770a:	f002 fad5 	bl	8009cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800770e:	f000 ffc1 	bl	8008694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007712:	f002 faa3 	bl	8009c5c <vPortEnterCritical>
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800771c:	b25b      	sxtb	r3, r3
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d103      	bne.n	800772c <xQueueReceive+0x11c>
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007732:	b25b      	sxtb	r3, r3
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d103      	bne.n	8007742 <xQueueReceive+0x132>
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007742:	f002 fab9 	bl	8009cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007746:	1d3a      	adds	r2, r7, #4
 8007748:	f107 0310 	add.w	r3, r7, #16
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fa34 	bl	8008bbc <xTaskCheckForTimeOut>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d123      	bne.n	80077a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800775a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775c:	f000 fad5 	bl	8007d0a <prvIsQueueEmpty>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d017      	beq.n	8007796 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	3324      	adds	r3, #36	; 0x24
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	4611      	mov	r1, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f001 f95e 	bl	8008a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007776:	f000 fa76 	bl	8007c66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800777a:	f000 ff99 	bl	80086b0 <xTaskResumeAll>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d189      	bne.n	8007698 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <xQueueReceive+0x1b4>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	e780      	b.n	8007698 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007798:	f000 fa65 	bl	8007c66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800779c:	f000 ff88 	bl	80086b0 <xTaskResumeAll>
 80077a0:	e77a      	b.n	8007698 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a4:	f000 fa5f 	bl	8007c66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077a8:	f000 ff82 	bl	80086b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ae:	f000 faac 	bl	8007d0a <prvIsQueueEmpty>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f43f af6f 	beq.w	8007698 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3730      	adds	r7, #48	; 0x30
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08e      	sub	sp, #56	; 0x38
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <xQueueSemaphoreTake+0x30>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	e7fe      	b.n	80077f6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <xQueueSemaphoreTake+0x4c>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	e7fe      	b.n	8007812 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007814:	f001 fb20 	bl	8008e58 <xTaskGetSchedulerState>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <xQueueSemaphoreTake+0x5c>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <xQueueSemaphoreTake+0x60>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <xQueueSemaphoreTake+0x62>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d109      	bne.n	8007842 <xQueueSemaphoreTake+0x7a>
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	e7fe      	b.n	8007840 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007842:	f002 fa0b 	bl	8009c5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d024      	beq.n	800789c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	1e5a      	subs	r2, r3, #1
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007862:	f001 fc6b 	bl	800913c <pvTaskIncrementMutexHeldCount>
 8007866:	4602      	mov	r2, r0
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00f      	beq.n	8007894 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	3310      	adds	r3, #16
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f927 	bl	8008acc <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b53      	ldr	r3, [pc, #332]	; (80079d4 <xQueueSemaphoreTake+0x20c>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007894:	f002 fa10 	bl	8009cb8 <vPortExitCritical>
				return pdPASS;
 8007898:	2301      	movs	r3, #1
 800789a:	e096      	b.n	80079ca <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d110      	bne.n	80078c4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d009      	beq.n	80078bc <xQueueSemaphoreTake+0xf4>
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e7fe      	b.n	80078ba <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078bc:	f002 f9fc 	bl	8009cb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078c0:	2300      	movs	r3, #0
 80078c2:	e082      	b.n	80079ca <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 f95e 	bl	8008b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078d8:	f002 f9ee 	bl	8009cb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078dc:	f000 feda 	bl	8008694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e0:	f002 f9bc 	bl	8009c5c <vPortEnterCritical>
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ea:	b25b      	sxtb	r3, r3
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f0:	d103      	bne.n	80078fa <xQueueSemaphoreTake+0x132>
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007900:	b25b      	sxtb	r3, r3
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d103      	bne.n	8007910 <xQueueSemaphoreTake+0x148>
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007910:	f002 f9d2 	bl	8009cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007914:	463a      	mov	r2, r7
 8007916:	f107 030c 	add.w	r3, r7, #12
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f94d 	bl	8008bbc <xTaskCheckForTimeOut>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d132      	bne.n	800798e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800792a:	f000 f9ee 	bl	8007d0a <prvIsQueueEmpty>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d026      	beq.n	8007982 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d109      	bne.n	8007950 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800793c:	f002 f98e 	bl	8009c5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	4618      	mov	r0, r3
 8007946:	f001 faa5 	bl	8008e94 <xTaskPriorityInherit>
 800794a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800794c:	f002 f9b4 	bl	8009cb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f001 f869 	bl	8008a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800795e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007960:	f000 f981 	bl	8007c66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007964:	f000 fea4 	bl	80086b0 <xTaskResumeAll>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	f47f af69 	bne.w	8007842 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007970:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <xQueueSemaphoreTake+0x20c>)
 8007972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	e75f      	b.n	8007842 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007984:	f000 f96f 	bl	8007c66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007988:	f000 fe92 	bl	80086b0 <xTaskResumeAll>
 800798c:	e759      	b.n	8007842 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800798e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007990:	f000 f969 	bl	8007c66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007994:	f000 fe8c 	bl	80086b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800799a:	f000 f9b6 	bl	8007d0a <prvIsQueueEmpty>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f43f af4e 	beq.w	8007842 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00d      	beq.n	80079c8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80079ac:	f002 f956 	bl	8009c5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079b2:	f000 f8b0 	bl	8007b16 <prvGetDisinheritPriorityAfterTimeout>
 80079b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fb3c 	bl	800903c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079c4:	f002 f978 	bl	8009cb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3738      	adds	r7, #56	; 0x38
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08e      	sub	sp, #56	; 0x38
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <xQueueReceiveFromISR+0x2a>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	e7fe      	b.n	8007a00 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <xQueueReceiveFromISR+0x38>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <xQueueReceiveFromISR+0x3c>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <xQueueReceiveFromISR+0x3e>
 8007a14:	2300      	movs	r3, #0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <xQueueReceiveFromISR+0x56>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e7fe      	b.n	8007a2c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a2e:	f002 f9f1 	bl	8009e14 <vPortValidateInterruptPriority>
	__asm volatile
 8007a32:	f3ef 8211 	mrs	r2, BASEPRI
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	61ba      	str	r2, [r7, #24]
 8007a48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d02f      	beq.n	8007aba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a68:	f000 f8d7 	bl	8007c1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	1e5a      	subs	r2, r3, #1
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d112      	bne.n	8007aa4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d016      	beq.n	8007ab4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	3310      	adds	r3, #16
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f81e 	bl	8008acc <xTaskRemoveFromEventList>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e007      	b.n	8007ab4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	b25a      	sxtb	r2, r3
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab8:	e001      	b.n	8007abe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3738      	adds	r7, #56	; 0x38
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <vQueueDelete+0x26>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	e7fe      	b.n	8007af6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f95d 	bl	8007db8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f002 fa83 	bl	800a014 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d006      	beq.n	8007b34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e001      	b.n	8007b38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b38:	68fb      	ldr	r3, [r7, #12]
	}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d14d      	bne.n	8007c08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f9f7 	bl	8008f64 <xTaskPriorityDisinherit>
 8007b76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
 8007b7e:	e043      	b.n	8007c08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d119      	bne.n	8007bba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6858      	ldr	r0, [r3, #4]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	f003 fa5d 	bl	800b050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d32b      	bcc.n	8007c08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
 8007bb8:	e026      	b.n	8007c08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68d8      	ldr	r0, [r3, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	f003 fa43 	bl	800b050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	425b      	negs	r3, r3
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d207      	bcs.n	8007bf6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	425b      	negs	r3, r3
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d105      	bne.n	8007c08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c10:	697b      	ldr	r3, [r7, #20]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d018      	beq.n	8007c5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d303      	bcc.n	8007c4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68d9      	ldr	r1, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	461a      	mov	r2, r3
 8007c58:	6838      	ldr	r0, [r7, #0]
 8007c5a:	f003 f9f9 	bl	800b050 <memcpy>
	}
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c6e:	f001 fff5 	bl	8009c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c7a:	e011      	b.n	8007ca0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d012      	beq.n	8007caa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3324      	adds	r3, #36	; 0x24
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 ff1f 	bl	8008acc <xTaskRemoveFromEventList>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c94:	f000 fff2 	bl	8008c7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dce9      	bgt.n	8007c7c <prvUnlockQueue+0x16>
 8007ca8:	e000      	b.n	8007cac <prvUnlockQueue+0x46>
					break;
 8007caa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007cb4:	f002 f800 	bl	8009cb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cb8:	f001 ffd0 	bl	8009c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc4:	e011      	b.n	8007cea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d012      	beq.n	8007cf4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3310      	adds	r3, #16
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fefa 	bl	8008acc <xTaskRemoveFromEventList>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cde:	f000 ffcd 	bl	8008c7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dce9      	bgt.n	8007cc6 <prvUnlockQueue+0x60>
 8007cf2:	e000      	b.n	8007cf6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cf4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	22ff      	movs	r2, #255	; 0xff
 8007cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cfe:	f001 ffdb 	bl	8009cb8 <vPortExitCritical>
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d12:	f001 ffa3 	bl	8009c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	e001      	b.n	8007d28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d28:	f001 ffc6 	bl	8009cb8 <vPortExitCritical>

	return xReturn;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d3e:	f001 ff8d 	bl	8009c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d102      	bne.n	8007d54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e001      	b.n	8007d58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d58:	f001 ffae 	bl	8009cb8 <vPortExitCritical>

	return xReturn;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e014      	b.n	8007da2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d78:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <vQueueAddToRegistry+0x4c>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d84:	490b      	ldr	r1, [pc, #44]	; (8007db4 <vQueueAddToRegistry+0x4c>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <vQueueAddToRegistry+0x4c>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d9a:	e005      	b.n	8007da8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b07      	cmp	r3, #7
 8007da6:	d9e7      	bls.n	8007d78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20004754 	.word	0x20004754

08007db8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e016      	b.n	8007df4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007dc6:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <vQueueUnregisterQueue+0x50>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4413      	add	r3, r2
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d10b      	bne.n	8007dee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dd6:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <vQueueUnregisterQueue+0x50>)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007de0:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <vQueueUnregisterQueue+0x50>)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	2200      	movs	r2, #0
 8007dea:	605a      	str	r2, [r3, #4]
				break;
 8007dec:	e005      	b.n	8007dfa <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b07      	cmp	r3, #7
 8007df8:	d9e5      	bls.n	8007dc6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20004754 	.word	0x20004754

08007e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e1c:	f001 ff1e 	bl	8009c5c <vPortEnterCritical>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d103      	bne.n	8007e36 <vQueueWaitForMessageRestricted+0x2a>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d103      	bne.n	8007e4c <vQueueWaitForMessageRestricted+0x40>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4c:	f001 ff34 	bl	8009cb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fe09 	bl	8008a78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f7ff fefd 	bl	8007c66 <prvUnlockQueue>
	}
 8007e6c:	bf00      	nop
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	; 0x38
 8007e78:	af04      	add	r7, sp, #16
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <xTaskCreateStatic+0x28>
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	e7fe      	b.n	8007e9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <xTaskCreateStatic+0x42>
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e7fe      	b.n	8007eb4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007eb6:	235c      	movs	r3, #92	; 0x5c
 8007eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ebe:	d009      	beq.n	8007ed4 <xTaskCreateStatic+0x60>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e7fe      	b.n	8007ed2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ed4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <xTaskCreateStatic+0xa6>
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f850 	bl	8007fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f14:	f000 f8dc 	bl	80080d0 <prvAddNewTaskToReadyList>
 8007f18:	e001      	b.n	8007f1e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f1e:	697b      	ldr	r3, [r7, #20]
	}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 ffa7 	bl	8009e90 <pvPortMalloc>
 8007f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f4a:	205c      	movs	r0, #92	; 0x5c
 8007f4c:	f001 ffa0 	bl	8009e90 <pvPortMalloc>
 8007f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f5e:	e005      	b.n	8007f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f60:	6978      	ldr	r0, [r7, #20]
 8007f62:	f002 f857 	bl	800a014 <vPortFree>
 8007f66:	e001      	b.n	8007f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d017      	beq.n	8007fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f7a:	88fa      	ldrh	r2, [r7, #6]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f80e 	bl	8007fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f96:	69f8      	ldr	r0, [r7, #28]
 8007f98:	f000 f89a 	bl	80080d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	e002      	b.n	8007fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	21a5      	movs	r1, #165	; 0xa5
 8007fcc:	f003 f84b 	bl	800b066 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <prvInitialiseNewTask+0x56>
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e7fe      	b.n	8008006 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01f      	beq.n	800804e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	e012      	b.n	800803a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	7819      	ldrb	r1, [r3, #0]
 800801c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	3334      	adds	r3, #52	; 0x34
 8008024:	460a      	mov	r2, r1
 8008026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2b0f      	cmp	r3, #15
 800803e:	d9e9      	bls.n	8008014 <prvInitialiseNewTask+0x62>
 8008040:	e000      	b.n	8008044 <prvInitialiseNewTask+0x92>
			{
				break;
 8008042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800804c:	e003      	b.n	8008056 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	2b37      	cmp	r3, #55	; 0x37
 800805a:	d901      	bls.n	8008060 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800805c:	2337      	movs	r3, #55	; 0x37
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	2200      	movs	r2, #0
 8008070:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	3304      	adds	r3, #4
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fe50 	bl	8006d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	3318      	adds	r3, #24
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fe4b 	bl	8006d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	2200      	movs	r2, #0
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	68f9      	ldr	r1, [r7, #12]
 80080ae:	69b8      	ldr	r0, [r7, #24]
 80080b0:	f001 fcaa 	bl	8009a08 <pxPortInitialiseStack>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c6:	bf00      	nop
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080d8:	f001 fdc0 	bl	8009c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080dc:	4b2d      	ldr	r3, [pc, #180]	; (8008194 <prvAddNewTaskToReadyList+0xc4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3301      	adds	r3, #1
 80080e2:	4a2c      	ldr	r2, [pc, #176]	; (8008194 <prvAddNewTaskToReadyList+0xc4>)
 80080e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080e6:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <prvAddNewTaskToReadyList+0xc8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080ee:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <prvAddNewTaskToReadyList+0xc8>)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080f4:	4b27      	ldr	r3, [pc, #156]	; (8008194 <prvAddNewTaskToReadyList+0xc4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d110      	bne.n	800811e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080fc:	f000 fde2 	bl	8008cc4 <prvInitialiseTaskLists>
 8008100:	e00d      	b.n	800811e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008102:	4b26      	ldr	r3, [pc, #152]	; (800819c <prvAddNewTaskToReadyList+0xcc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800810a:	4b23      	ldr	r3, [pc, #140]	; (8008198 <prvAddNewTaskToReadyList+0xc8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	429a      	cmp	r2, r3
 8008116:	d802      	bhi.n	800811e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008118:	4a1f      	ldr	r2, [pc, #124]	; (8008198 <prvAddNewTaskToReadyList+0xc8>)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <prvAddNewTaskToReadyList+0xd0>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <prvAddNewTaskToReadyList+0xd0>)
 8008126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <prvAddNewTaskToReadyList+0xd0>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <prvAddNewTaskToReadyList+0xd4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d903      	bls.n	8008144 <prvAddNewTaskToReadyList+0x74>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <prvAddNewTaskToReadyList+0xd4>)
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <prvAddNewTaskToReadyList+0xd8>)
 8008152:	441a      	add	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe fdeb 	bl	8006d36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008160:	f001 fdaa 	bl	8009cb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <prvAddNewTaskToReadyList+0xcc>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00e      	beq.n	800818a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <prvAddNewTaskToReadyList+0xc8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	429a      	cmp	r2, r3
 8008178:	d207      	bcs.n	800818a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <prvAddNewTaskToReadyList+0xdc>)
 800817c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20001720 	.word	0x20001720
 8008198:	2000124c 	.word	0x2000124c
 800819c:	2000172c 	.word	0x2000172c
 80081a0:	2000173c 	.word	0x2000173c
 80081a4:	20001728 	.word	0x20001728
 80081a8:	20001250 	.word	0x20001250
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80081b8:	f001 fd50 	bl	8009c5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <vTaskDelete+0x18>
 80081c2:	4b2c      	ldr	r3, [pc, #176]	; (8008274 <vTaskDelete+0xc4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	e000      	b.n	80081ca <vTaskDelete+0x1a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fe0d 	bl	8006df0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3318      	adds	r3, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fe04 	bl	8006df0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80081e8:	4b23      	ldr	r3, [pc, #140]	; (8008278 <vTaskDelete+0xc8>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	4a22      	ldr	r2, [pc, #136]	; (8008278 <vTaskDelete+0xc8>)
 80081f0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <vTaskDelete+0xc4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d10b      	bne.n	8008214 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	481e      	ldr	r0, [pc, #120]	; (800827c <vTaskDelete+0xcc>)
 8008204:	f7fe fd97 	bl	8006d36 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008208:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <vTaskDelete+0xd0>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <vTaskDelete+0xd0>)
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e009      	b.n	8008228 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <vTaskDelete+0xd4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3b01      	subs	r3, #1
 800821a:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <vTaskDelete+0xd4>)
 800821c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fdbc 	bl	8008d9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008224:	f000 fde8 	bl	8008df8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008228:	f001 fd46 	bl	8009cb8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <vTaskDelete+0xd8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01a      	beq.n	800826a <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <vTaskDelete+0xc4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	429a      	cmp	r2, r3
 800823c:	d115      	bne.n	800826a <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <vTaskDelete+0xdc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <vTaskDelete+0xaa>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	e7fe      	b.n	8008258 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <vTaskDelete+0xe0>)
 800825c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2000124c 	.word	0x2000124c
 8008278:	2000173c 	.word	0x2000173c
 800827c:	200016f4 	.word	0x200016f4
 8008280:	20001708 	.word	0x20001708
 8008284:	20001720 	.word	0x20001720
 8008288:	2000172c 	.word	0x2000172c
 800828c:	20001748 	.word	0x20001748
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d016      	beq.n	80082d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <vTaskDelay+0x60>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <vTaskDelay+0x2e>
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	e7fe      	b.n	80082c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80082c2:	f000 f9e7 	bl	8008694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 ff4b 	bl	8009164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ce:	f000 f9ef 	bl	80086b0 <xTaskResumeAll>
 80082d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d107      	bne.n	80082ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <vTaskDelay+0x64>)
 80082dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20001748 	.word	0x20001748
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <eTaskGetState+0x26>
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	e7fe      	b.n	8008320 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 8008322:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <eTaskGetState+0xb8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	429a      	cmp	r2, r3
 800832a:	d102      	bne.n	8008332 <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800832c:	2300      	movs	r3, #0
 800832e:	77fb      	strb	r3, [r7, #31]
 8008330:	e03a      	b.n	80083a8 <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 8008332:	f001 fc93 	bl	8009c5c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800833c:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <eTaskGetState+0xbc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008342:	4b1e      	ldr	r3, [pc, #120]	; (80083bc <eTaskGetState+0xc0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008348:	f001 fcb6 	bl	8009cb8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	429a      	cmp	r2, r3
 8008352:	d003      	beq.n	800835c <eTaskGetState+0x60>
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	429a      	cmp	r2, r3
 800835a:	d102      	bne.n	8008362 <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800835c:	2302      	movs	r3, #2
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e022      	b.n	80083a8 <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <eTaskGetState+0xc4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d112      	bne.n	8008390 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	d102      	bne.n	8008384 <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 800837e:	2302      	movs	r3, #2
 8008380:	77fb      	strb	r3, [r7, #31]
 8008382:	e011      	b.n	80083a8 <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 8008384:	2303      	movs	r3, #3
 8008386:	77fb      	strb	r3, [r7, #31]
 8008388:	e00e      	b.n	80083a8 <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800838a:	2302      	movs	r3, #2
 800838c:	77fb      	strb	r3, [r7, #31]
 800838e:	e00b      	b.n	80083a8 <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4a0c      	ldr	r2, [pc, #48]	; (80083c4 <eTaskGetState+0xc8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d002      	beq.n	800839e <eTaskGetState+0xa2>
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800839e:	2304      	movs	r3, #4
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e001      	b.n	80083a8 <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80083a4:	2301      	movs	r3, #1
 80083a6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80083aa:	4618      	mov	r0, r3
 80083ac:	3720      	adds	r7, #32
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	2000124c 	.word	0x2000124c
 80083b8:	200016d8 	.word	0x200016d8
 80083bc:	200016dc 	.word	0x200016dc
 80083c0:	2000170c 	.word	0x2000170c
 80083c4:	200016f4 	.word	0x200016f4

080083c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80083d0:	f001 fc44 	bl	8009c5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <vTaskSuspend+0x18>
 80083da:	4b2f      	ldr	r3, [pc, #188]	; (8008498 <vTaskSuspend+0xd0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	e000      	b.n	80083e2 <vTaskSuspend+0x1a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fd01 	bl	8006df0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3318      	adds	r3, #24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fcf8 	bl	8006df0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3304      	adds	r3, #4
 8008404:	4619      	mov	r1, r3
 8008406:	4825      	ldr	r0, [pc, #148]	; (800849c <vTaskSuspend+0xd4>)
 8008408:	f7fe fc95 	bl	8006d36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	d103      	bne.n	8008420 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008420:	f001 fc4a 	bl	8009cb8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008424:	4b1e      	ldr	r3, [pc, #120]	; (80084a0 <vTaskSuspend+0xd8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800842c:	f001 fc16 	bl	8009c5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008430:	f000 fce2 	bl	8008df8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008434:	f001 fc40 	bl	8009cb8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <vTaskSuspend+0xd0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d126      	bne.n	8008490 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8008442:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <vTaskSuspend+0xd8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d016      	beq.n	8008478 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800844a:	4b16      	ldr	r3, [pc, #88]	; (80084a4 <vTaskSuspend+0xdc>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <vTaskSuspend+0x9e>
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	e7fe      	b.n	8008464 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <vTaskSuspend+0xe0>)
 8008468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008476:	e00b      	b.n	8008490 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008478:	4b08      	ldr	r3, [pc, #32]	; (800849c <vTaskSuspend+0xd4>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <vTaskSuspend+0xe4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d103      	bne.n	800848c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <vTaskSuspend+0xd0>)
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
	}
 800848a:	e001      	b.n	8008490 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800848c:	f000 fa74 	bl	8008978 <vTaskSwitchContext>
	}
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	2000124c 	.word	0x2000124c
 800849c:	2000170c 	.word	0x2000170c
 80084a0:	2000172c 	.word	0x2000172c
 80084a4:	20001748 	.word	0x20001748
 80084a8:	e000ed04 	.word	0xe000ed04
 80084ac:	20001720 	.word	0x20001720

080084b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <prvTaskIsTaskSuspended+0x2a>
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e7fe      	b.n	80084d8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	4a0a      	ldr	r2, [pc, #40]	; (8008508 <prvTaskIsTaskSuspended+0x58>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d10a      	bne.n	80084fa <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <prvTaskIsTaskSuspended+0x5c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d005      	beq.n	80084fa <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80084f6:	2301      	movs	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084fa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084fc:	4618      	mov	r0, r3
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	2000170c 	.word	0x2000170c
 800850c:	200016e0 	.word	0x200016e0

08008510 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <vTaskResume+0x26>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	e7fe      	b.n	8008534 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008536:	4b21      	ldr	r3, [pc, #132]	; (80085bc <vTaskResume+0xac>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d038      	beq.n	80085b2 <vTaskResume+0xa2>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d035      	beq.n	80085b2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8008546:	f001 fb89 	bl	8009c5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff ffb0 	bl	80084b0 <prvTaskIsTaskSuspended>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d02b      	beq.n	80085ae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fc48 	bl	8006df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <vTaskResume+0xb0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <vTaskResume+0x64>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <vTaskResume+0xb0>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a10      	ldr	r2, [pc, #64]	; (80085c4 <vTaskResume+0xb4>)
 8008582:	441a      	add	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7fe fbd3 	bl	8006d36 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <vTaskResume+0xac>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	429a      	cmp	r2, r3
 800859c:	d307      	bcc.n	80085ae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <vTaskResume+0xb8>)
 80085a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80085ae:	f001 fb83 	bl	8009cb8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	2000124c 	.word	0x2000124c
 80085c0:	20001728 	.word	0x20001728
 80085c4:	20001250 	.word	0x20001250
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085da:	463a      	mov	r2, r7
 80085dc:	1d39      	adds	r1, r7, #4
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fb46 	bl	8006c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	9202      	str	r2, [sp, #8]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	2300      	movs	r3, #0
 80085f8:	460a      	mov	r2, r1
 80085fa:	4920      	ldr	r1, [pc, #128]	; (800867c <vTaskStartScheduler+0xb0>)
 80085fc:	4820      	ldr	r0, [pc, #128]	; (8008680 <vTaskStartScheduler+0xb4>)
 80085fe:	f7ff fc39 	bl	8007e74 <xTaskCreateStatic>
 8008602:	4602      	mov	r2, r0
 8008604:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <vTaskStartScheduler+0xb8>)
 8008606:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008608:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <vTaskStartScheduler+0xb8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e001      	b.n	800861a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d102      	bne.n	8008626 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008620:	f000 fdf4 	bl	800920c <xTimerCreateTimerTask>
 8008624:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d115      	bne.n	8008658 <vTaskStartScheduler+0x8c>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <vTaskStartScheduler+0xbc>)
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008646:	4b11      	ldr	r3, [pc, #68]	; (800868c <vTaskStartScheduler+0xc0>)
 8008648:	2201      	movs	r2, #1
 800864a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800864c:	4b10      	ldr	r3, [pc, #64]	; (8008690 <vTaskStartScheduler+0xc4>)
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008652:	f001 fa65 	bl	8009b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008656:	e00d      	b.n	8008674 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d109      	bne.n	8008674 <vTaskStartScheduler+0xa8>
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e7fe      	b.n	8008672 <vTaskStartScheduler+0xa6>
}
 8008674:	bf00      	nop
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	0800c16c 	.word	0x0800c16c
 8008680:	08008c95 	.word	0x08008c95
 8008684:	20001744 	.word	0x20001744
 8008688:	20001740 	.word	0x20001740
 800868c:	2000172c 	.word	0x2000172c
 8008690:	20001724 	.word	0x20001724

08008694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <vTaskSuspendAll+0x18>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	4a03      	ldr	r2, [pc, #12]	; (80086ac <vTaskSuspendAll+0x18>)
 80086a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80086a2:	bf00      	nop
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	20001748 	.word	0x20001748

080086b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <xTaskResumeAll+0x114>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <xTaskResumeAll+0x2a>
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	e7fe      	b.n	80086d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086da:	f001 fabf 	bl	8009c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <xTaskResumeAll+0x114>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4a37      	ldr	r2, [pc, #220]	; (80087c4 <xTaskResumeAll+0x114>)
 80086e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e8:	4b36      	ldr	r3, [pc, #216]	; (80087c4 <xTaskResumeAll+0x114>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d162      	bne.n	80087b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086f0:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <xTaskResumeAll+0x118>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05e      	beq.n	80087b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086f8:	e02f      	b.n	800875a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fa:	4b34      	ldr	r3, [pc, #208]	; (80087cc <xTaskResumeAll+0x11c>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3318      	adds	r3, #24
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fb72 	bl	8006df0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3304      	adds	r3, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fb6d 	bl	8006df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871a:	4b2d      	ldr	r3, [pc, #180]	; (80087d0 <xTaskResumeAll+0x120>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d903      	bls.n	800872a <xTaskResumeAll+0x7a>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	4a2a      	ldr	r2, [pc, #168]	; (80087d0 <xTaskResumeAll+0x120>)
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4a27      	ldr	r2, [pc, #156]	; (80087d4 <xTaskResumeAll+0x124>)
 8008738:	441a      	add	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3304      	adds	r3, #4
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f7fe faf8 	bl	8006d36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <xTaskResumeAll+0x128>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	429a      	cmp	r2, r3
 8008752:	d302      	bcc.n	800875a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008754:	4b21      	ldr	r3, [pc, #132]	; (80087dc <xTaskResumeAll+0x12c>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800875a:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <xTaskResumeAll+0x11c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1cb      	bne.n	80086fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008768:	f000 fb46 	bl	8008df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <xTaskResumeAll+0x130>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d010      	beq.n	800879a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008778:	f000 f846 	bl	8008808 <xTaskIncrementTick>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008782:	4b16      	ldr	r3, [pc, #88]	; (80087dc <xTaskResumeAll+0x12c>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3b01      	subs	r3, #1
 800878c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1f1      	bne.n	8008778 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <xTaskResumeAll+0x130>)
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800879a:	4b10      	ldr	r3, [pc, #64]	; (80087dc <xTaskResumeAll+0x12c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087a6:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <xTaskResumeAll+0x134>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087b6:	f001 fa7f 	bl	8009cb8 <vPortExitCritical>

	return xAlreadyYielded;
 80087ba:	68bb      	ldr	r3, [r7, #8]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20001748 	.word	0x20001748
 80087c8:	20001720 	.word	0x20001720
 80087cc:	200016e0 	.word	0x200016e0
 80087d0:	20001728 	.word	0x20001728
 80087d4:	20001250 	.word	0x20001250
 80087d8:	2000124c 	.word	0x2000124c
 80087dc:	20001734 	.word	0x20001734
 80087e0:	20001730 	.word	0x20001730
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <xTaskGetTickCount+0x1c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087f4:	687b      	ldr	r3, [r7, #4]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20001724 	.word	0x20001724

08008808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008812:	4b4e      	ldr	r3, [pc, #312]	; (800894c <xTaskIncrementTick+0x144>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 8088 	bne.w	800892c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800881c:	4b4c      	ldr	r3, [pc, #304]	; (8008950 <xTaskIncrementTick+0x148>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3301      	adds	r3, #1
 8008822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008824:	4a4a      	ldr	r2, [pc, #296]	; (8008950 <xTaskIncrementTick+0x148>)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11f      	bne.n	8008870 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008830:	4b48      	ldr	r3, [pc, #288]	; (8008954 <xTaskIncrementTick+0x14c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <xTaskIncrementTick+0x46>
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	e7fe      	b.n	800884c <xTaskIncrementTick+0x44>
 800884e:	4b41      	ldr	r3, [pc, #260]	; (8008954 <xTaskIncrementTick+0x14c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	4b40      	ldr	r3, [pc, #256]	; (8008958 <xTaskIncrementTick+0x150>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3e      	ldr	r2, [pc, #248]	; (8008954 <xTaskIncrementTick+0x14c>)
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	4a3e      	ldr	r2, [pc, #248]	; (8008958 <xTaskIncrementTick+0x150>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	4b3e      	ldr	r3, [pc, #248]	; (800895c <xTaskIncrementTick+0x154>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3301      	adds	r3, #1
 8008868:	4a3c      	ldr	r2, [pc, #240]	; (800895c <xTaskIncrementTick+0x154>)
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	f000 fac4 	bl	8008df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008870:	4b3b      	ldr	r3, [pc, #236]	; (8008960 <xTaskIncrementTick+0x158>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	429a      	cmp	r2, r3
 8008878:	d349      	bcc.n	800890e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800887a:	4b36      	ldr	r3, [pc, #216]	; (8008954 <xTaskIncrementTick+0x14c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008884:	4b36      	ldr	r3, [pc, #216]	; (8008960 <xTaskIncrementTick+0x158>)
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	601a      	str	r2, [r3, #0]
					break;
 800888c:	e03f      	b.n	800890e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888e:	4b31      	ldr	r3, [pc, #196]	; (8008954 <xTaskIncrementTick+0x14c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d203      	bcs.n	80088ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088a6:	4a2e      	ldr	r2, [pc, #184]	; (8008960 <xTaskIncrementTick+0x158>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088ac:	e02f      	b.n	800890e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fa9c 	bl	8006df0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3318      	adds	r3, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fa93 	bl	8006df0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <xTaskIncrementTick+0x15c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <xTaskIncrementTick+0xd6>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	4a22      	ldr	r2, [pc, #136]	; (8008964 <xTaskIncrementTick+0x15c>)
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4a1f      	ldr	r2, [pc, #124]	; (8008968 <xTaskIncrementTick+0x160>)
 80088ec:	441a      	add	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe fa1e 	bl	8006d36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	4b1b      	ldr	r3, [pc, #108]	; (800896c <xTaskIncrementTick+0x164>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	429a      	cmp	r2, r3
 8008906:	d3b8      	bcc.n	800887a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800890c:	e7b5      	b.n	800887a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800890e:	4b17      	ldr	r3, [pc, #92]	; (800896c <xTaskIncrementTick+0x164>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4914      	ldr	r1, [pc, #80]	; (8008968 <xTaskIncrementTick+0x160>)
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d907      	bls.n	8008936 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008926:	2301      	movs	r3, #1
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	e004      	b.n	8008936 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <xTaskIncrementTick+0x168>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a0f      	ldr	r2, [pc, #60]	; (8008970 <xTaskIncrementTick+0x168>)
 8008934:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <xTaskIncrementTick+0x16c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008942:	697b      	ldr	r3, [r7, #20]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20001748 	.word	0x20001748
 8008950:	20001724 	.word	0x20001724
 8008954:	200016d8 	.word	0x200016d8
 8008958:	200016dc 	.word	0x200016dc
 800895c:	20001738 	.word	0x20001738
 8008960:	20001740 	.word	0x20001740
 8008964:	20001728 	.word	0x20001728
 8008968:	20001250 	.word	0x20001250
 800896c:	2000124c 	.word	0x2000124c
 8008970:	20001730 	.word	0x20001730
 8008974:	20001734 	.word	0x20001734

08008978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800897e:	4b27      	ldr	r3, [pc, #156]	; (8008a1c <vTaskSwitchContext+0xa4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008986:	4b26      	ldr	r3, [pc, #152]	; (8008a20 <vTaskSwitchContext+0xa8>)
 8008988:	2201      	movs	r2, #1
 800898a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800898c:	e040      	b.n	8008a10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800898e:	4b24      	ldr	r3, [pc, #144]	; (8008a20 <vTaskSwitchContext+0xa8>)
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008994:	4b23      	ldr	r3, [pc, #140]	; (8008a24 <vTaskSwitchContext+0xac>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e00f      	b.n	80089bc <vTaskSwitchContext+0x44>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <vTaskSwitchContext+0x3e>
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	e7fe      	b.n	80089b4 <vTaskSwitchContext+0x3c>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	491a      	ldr	r1, [pc, #104]	; (8008a28 <vTaskSwitchContext+0xb0>)
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0e5      	beq.n	800899c <vTaskSwitchContext+0x24>
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4a13      	ldr	r2, [pc, #76]	; (8008a28 <vTaskSwitchContext+0xb0>)
 80089dc:	4413      	add	r3, r2
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	605a      	str	r2, [r3, #4]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	3308      	adds	r3, #8
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d104      	bne.n	8008a00 <vTaskSwitchContext+0x88>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	605a      	str	r2, [r3, #4]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <vTaskSwitchContext+0xb4>)
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	4a06      	ldr	r2, [pc, #24]	; (8008a24 <vTaskSwitchContext+0xac>)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6013      	str	r3, [r2, #0]
}
 8008a10:	bf00      	nop
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20001748 	.word	0x20001748
 8008a20:	20001734 	.word	0x20001734
 8008a24:	20001728 	.word	0x20001728
 8008a28:	20001250 	.word	0x20001250
 8008a2c:	2000124c 	.word	0x2000124c

08008a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <vTaskPlaceOnEventList+0x24>
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	e7fe      	b.n	8008a52 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <vTaskPlaceOnEventList+0x44>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3318      	adds	r3, #24
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fe f98e 	bl	8006d7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a62:	2101      	movs	r1, #1
 8008a64:	6838      	ldr	r0, [r7, #0]
 8008a66:	f000 fb7d 	bl	8009164 <prvAddCurrentTaskToDelayedList>
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000124c 	.word	0x2000124c

08008a78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <vTaskPlaceOnEventListRestricted+0x26>
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e7fe      	b.n	8008a9c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <vTaskPlaceOnEventListRestricted+0x50>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7fe f945 	bl	8006d36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f000 fb52 	bl	8009164 <prvAddCurrentTaskToDelayedList>
	}
 8008ac0:	bf00      	nop
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	2000124c 	.word	0x2000124c

08008acc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <xTaskRemoveFromEventList+0x2a>
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e7fe      	b.n	8008af4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3318      	adds	r3, #24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe f978 	bl	8006df0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <xTaskRemoveFromEventList+0xac>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11d      	bne.n	8008b44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe f96f 	bl	8006df0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b16:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <xTaskRemoveFromEventList+0xb0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d903      	bls.n	8008b26 <xTaskRemoveFromEventList+0x5a>
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	4a16      	ldr	r2, [pc, #88]	; (8008b7c <xTaskRemoveFromEventList+0xb0>)
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <xTaskRemoveFromEventList+0xb4>)
 8008b34:	441a      	add	r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7fe f8fa 	bl	8006d36 <vListInsertEnd>
 8008b42:	e005      	b.n	8008b50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	3318      	adds	r3, #24
 8008b48:	4619      	mov	r1, r3
 8008b4a:	480e      	ldr	r0, [pc, #56]	; (8008b84 <xTaskRemoveFromEventList+0xb8>)
 8008b4c:	f7fe f8f3 	bl	8006d36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <xTaskRemoveFromEventList+0xbc>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d905      	bls.n	8008b6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <xTaskRemoveFromEventList+0xc0>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e001      	b.n	8008b6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b6e:	697b      	ldr	r3, [r7, #20]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20001748 	.word	0x20001748
 8008b7c:	20001728 	.word	0x20001728
 8008b80:	20001250 	.word	0x20001250
 8008b84:	200016e0 	.word	0x200016e0
 8008b88:	2000124c 	.word	0x2000124c
 8008b8c:	20001734 	.word	0x20001734

08008b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b98:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <vTaskInternalSetTimeOutState+0x24>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <vTaskInternalSetTimeOutState+0x28>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	20001738 	.word	0x20001738
 8008bb8:	20001724 	.word	0x20001724

08008bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <xTaskCheckForTimeOut+0x24>
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	e7fe      	b.n	8008bde <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <xTaskCheckForTimeOut+0x3e>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e7fe      	b.n	8008bf8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008bfa:	f001 f82f 	bl	8009c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <xTaskCheckForTimeOut+0xb8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d102      	bne.n	8008c1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	e023      	b.n	8008c66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <xTaskCheckForTimeOut+0xbc>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d007      	beq.n	8008c3a <xTaskCheckForTimeOut+0x7e>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	e015      	b.n	8008c66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d20b      	bcs.n	8008c5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ff9d 	bl	8008b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	e004      	b.n	8008c66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c62:	2301      	movs	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c66:	f001 f827 	bl	8009cb8 <vPortExitCritical>

	return xReturn;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20001724 	.word	0x20001724
 8008c78:	20001738 	.word	0x20001738

08008c7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <vTaskMissedYield+0x14>)
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
}
 8008c86:	bf00      	nop
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20001734 	.word	0x20001734

08008c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c9c:	f000 f852 	bl	8008d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ca0:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <prvIdleTask+0x28>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d9f9      	bls.n	8008c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <prvIdleTask+0x2c>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cb8:	e7f0      	b.n	8008c9c <prvIdleTask+0x8>
 8008cba:	bf00      	nop
 8008cbc:	20001250 	.word	0x20001250
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cca:	2300      	movs	r3, #0
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	e00c      	b.n	8008cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a12      	ldr	r2, [pc, #72]	; (8008d24 <prvInitialiseTaskLists+0x60>)
 8008cdc:	4413      	add	r3, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd fffc 	bl	8006cdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	607b      	str	r3, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b37      	cmp	r3, #55	; 0x37
 8008cee:	d9ef      	bls.n	8008cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cf0:	480d      	ldr	r0, [pc, #52]	; (8008d28 <prvInitialiseTaskLists+0x64>)
 8008cf2:	f7fd fff3 	bl	8006cdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cf6:	480d      	ldr	r0, [pc, #52]	; (8008d2c <prvInitialiseTaskLists+0x68>)
 8008cf8:	f7fd fff0 	bl	8006cdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cfc:	480c      	ldr	r0, [pc, #48]	; (8008d30 <prvInitialiseTaskLists+0x6c>)
 8008cfe:	f7fd ffed 	bl	8006cdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d02:	480c      	ldr	r0, [pc, #48]	; (8008d34 <prvInitialiseTaskLists+0x70>)
 8008d04:	f7fd ffea 	bl	8006cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d08:	480b      	ldr	r0, [pc, #44]	; (8008d38 <prvInitialiseTaskLists+0x74>)
 8008d0a:	f7fd ffe7 	bl	8006cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <prvInitialiseTaskLists+0x78>)
 8008d10:	4a05      	ldr	r2, [pc, #20]	; (8008d28 <prvInitialiseTaskLists+0x64>)
 8008d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <prvInitialiseTaskLists+0x7c>)
 8008d16:	4a05      	ldr	r2, [pc, #20]	; (8008d2c <prvInitialiseTaskLists+0x68>)
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20001250 	.word	0x20001250
 8008d28:	200016b0 	.word	0x200016b0
 8008d2c:	200016c4 	.word	0x200016c4
 8008d30:	200016e0 	.word	0x200016e0
 8008d34:	200016f4 	.word	0x200016f4
 8008d38:	2000170c 	.word	0x2000170c
 8008d3c:	200016d8 	.word	0x200016d8
 8008d40:	200016dc 	.word	0x200016dc

08008d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d4a:	e019      	b.n	8008d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d4c:	f000 ff86 	bl	8009c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <prvCheckTasksWaitingTermination+0x4c>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe f847 	bl	8006df0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <prvCheckTasksWaitingTermination+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <prvCheckTasksWaitingTermination+0x50>)
 8008d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	4a09      	ldr	r2, [pc, #36]	; (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d76:	f000 ff9f 	bl	8009cb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f80e 	bl	8008d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e1      	bne.n	8008d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200016f4 	.word	0x200016f4
 8008d94:	20001720 	.word	0x20001720
 8008d98:	20001708 	.word	0x20001708

08008d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d108      	bne.n	8008dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 f92e 	bl	800a014 <vPortFree>
				vPortFree( pxTCB );
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f92b 	bl	800a014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dbe:	e017      	b.n	8008df0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d103      	bne.n	8008dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f922 	bl	800a014 <vPortFree>
	}
 8008dd0:	e00e      	b.n	8008df0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d009      	beq.n	8008df0 <prvDeleteTCB+0x54>
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e7fe      	b.n	8008dee <prvDeleteTCB+0x52>
	}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <prvResetNextTaskUnblockTime+0x38>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <prvResetNextTaskUnblockTime+0x3c>)
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e10:	e008      	b.n	8008e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <prvResetNextTaskUnblockTime+0x38>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4a04      	ldr	r2, [pc, #16]	; (8008e34 <prvResetNextTaskUnblockTime+0x3c>)
 8008e22:	6013      	str	r3, [r2, #0]
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	200016d8 	.word	0x200016d8
 8008e34:	20001740 	.word	0x20001740

08008e38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <xTaskGetCurrentTaskHandle+0x1c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008e44:	687b      	ldr	r3, [r7, #4]
	}
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000124c 	.word	0x2000124c

08008e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <xTaskGetSchedulerState+0x34>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e66:	2301      	movs	r3, #1
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	e008      	b.n	8008e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e6c:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <xTaskGetSchedulerState+0x38>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d102      	bne.n	8008e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e74:	2302      	movs	r3, #2
 8008e76:	607b      	str	r3, [r7, #4]
 8008e78:	e001      	b.n	8008e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e7e:	687b      	ldr	r3, [r7, #4]
	}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000172c 	.word	0x2000172c
 8008e90:	20001748 	.word	0x20001748

08008e94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d051      	beq.n	8008f4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	4b2a      	ldr	r3, [pc, #168]	; (8008f58 <xTaskPriorityInherit+0xc4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d241      	bcs.n	8008f3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db06      	blt.n	8008ece <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec0:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <xTaskPriorityInherit+0xc4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	6959      	ldr	r1, [r3, #20]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a1f      	ldr	r2, [pc, #124]	; (8008f5c <xTaskPriorityInherit+0xc8>)
 8008ee0:	4413      	add	r3, r2
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	d122      	bne.n	8008f2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fd ff80 	bl	8006df0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ef0:	4b19      	ldr	r3, [pc, #100]	; (8008f58 <xTaskPriorityInherit+0xc4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <xTaskPriorityInherit+0xcc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d903      	bls.n	8008f0e <xTaskPriorityInherit+0x7a>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <xTaskPriorityInherit+0xcc>)
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4a10      	ldr	r2, [pc, #64]	; (8008f5c <xTaskPriorityInherit+0xc8>)
 8008f1c:	441a      	add	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f7fd ff06 	bl	8006d36 <vListInsertEnd>
 8008f2a:	e004      	b.n	8008f36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <xTaskPriorityInherit+0xc4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	e008      	b.n	8008f4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <xTaskPriorityInherit+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d201      	bcs.n	8008f4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	2000124c 	.word	0x2000124c
 8008f5c:	20001250 	.word	0x20001250
 8008f60:	20001728 	.word	0x20001728

08008f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d054      	beq.n	8009024 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f7a:	4b2d      	ldr	r3, [pc, #180]	; (8009030 <xTaskPriorityDisinherit+0xcc>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d009      	beq.n	8008f98 <xTaskPriorityDisinherit+0x34>
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e7fe      	b.n	8008f96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d109      	bne.n	8008fb4 <xTaskPriorityDisinherit+0x50>
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	e7fe      	b.n	8008fb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	1e5a      	subs	r2, r3, #1
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d02c      	beq.n	8009024 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d128      	bne.n	8009024 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fd ff0a 	bl	8006df0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <xTaskPriorityDisinherit+0xd0>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d903      	bls.n	8009004 <xTaskPriorityDisinherit+0xa0>
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4a0c      	ldr	r2, [pc, #48]	; (8009034 <xTaskPriorityDisinherit+0xd0>)
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4a09      	ldr	r2, [pc, #36]	; (8009038 <xTaskPriorityDisinherit+0xd4>)
 8009012:	441a      	add	r2, r3
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	3304      	adds	r3, #4
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f7fd fe8b 	bl	8006d36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009024:	697b      	ldr	r3, [r7, #20]
	}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	2000124c 	.word	0x2000124c
 8009034:	20001728 	.word	0x20001728
 8009038:	20001250 	.word	0x20001250

0800903c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800904a:	2301      	movs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d068      	beq.n	8009126 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e7fe      	b.n	800906e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d902      	bls.n	8009080 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	e002      	b.n	8009086 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009084:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	429a      	cmp	r2, r3
 800908e:	d04a      	beq.n	8009126 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	429a      	cmp	r2, r3
 8009098:	d145      	bne.n	8009126 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800909a:	4b25      	ldr	r3, [pc, #148]	; (8009130 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d109      	bne.n	80090b8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	e7fe      	b.n	80090b6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db04      	blt.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	6959      	ldr	r1, [r3, #20]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a13      	ldr	r2, [pc, #76]	; (8009134 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80090e6:	4413      	add	r3, r2
 80090e8:	4299      	cmp	r1, r3
 80090ea:	d11c      	bne.n	8009126 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fd fe7d 	bl	8006df0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d903      	bls.n	800910a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4a0c      	ldr	r2, [pc, #48]	; (8009138 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4a07      	ldr	r2, [pc, #28]	; (8009134 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009118:	441a      	add	r2, r3
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	3304      	adds	r3, #4
 800911e:	4619      	mov	r1, r3
 8009120:	4610      	mov	r0, r2
 8009122:	f7fd fe08 	bl	8006d36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009126:	bf00      	nop
 8009128:	3720      	adds	r7, #32
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	2000124c 	.word	0x2000124c
 8009134:	20001250 	.word	0x20001250
 8009138:	20001728 	.word	0x20001728

0800913c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <pvTaskIncrementMutexHeldCount+0x24>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <pvTaskIncrementMutexHeldCount+0x24>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800914e:	3201      	adds	r2, #1
 8009150:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009152:	4b03      	ldr	r3, [pc, #12]	; (8009160 <pvTaskIncrementMutexHeldCount+0x24>)
 8009154:	681b      	ldr	r3, [r3, #0]
	}
 8009156:	4618      	mov	r0, r3
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	2000124c 	.word	0x2000124c

08009164 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800916e:	4b21      	ldr	r3, [pc, #132]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009174:	4b20      	ldr	r3, [pc, #128]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3304      	adds	r3, #4
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fe38 	bl	8006df0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d10a      	bne.n	800919e <prvAddCurrentTaskToDelayedList+0x3a>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800918e:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4819      	ldr	r0, [pc, #100]	; (80091fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009198:	f7fd fdcd 	bl	8006d36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800919c:	e026      	b.n	80091ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4413      	add	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d209      	bcs.n	80091ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f7fd fddb 	bl	8006d7e <vListInsert>
}
 80091c8:	e010      	b.n	80091ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ca:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7fd fdd1 	bl	8006d7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d202      	bcs.n	80091ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091e6:	4a08      	ldr	r2, [pc, #32]	; (8009208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6013      	str	r3, [r2, #0]
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20001724 	.word	0x20001724
 80091f8:	2000124c 	.word	0x2000124c
 80091fc:	2000170c 	.word	0x2000170c
 8009200:	200016dc 	.word	0x200016dc
 8009204:	200016d8 	.word	0x200016d8
 8009208:	20001740 	.word	0x20001740

0800920c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009216:	f000 fb97 	bl	8009948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800921a:	4b1c      	ldr	r3, [pc, #112]	; (800928c <xTimerCreateTimerTask+0x80>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d021      	beq.n	8009266 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800922a:	1d3a      	adds	r2, r7, #4
 800922c:	f107 0108 	add.w	r1, r7, #8
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd fd37 	bl	8006ca8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	2302      	movs	r3, #2
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	2300      	movs	r3, #0
 800924a:	460a      	mov	r2, r1
 800924c:	4910      	ldr	r1, [pc, #64]	; (8009290 <xTimerCreateTimerTask+0x84>)
 800924e:	4811      	ldr	r0, [pc, #68]	; (8009294 <xTimerCreateTimerTask+0x88>)
 8009250:	f7fe fe10 	bl	8007e74 <xTaskCreateStatic>
 8009254:	4602      	mov	r2, r0
 8009256:	4b10      	ldr	r3, [pc, #64]	; (8009298 <xTimerCreateTimerTask+0x8c>)
 8009258:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <xTimerCreateTimerTask+0x8c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <xTimerCreateTimerTask+0x74>
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	e7fe      	b.n	800927e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009280:	697b      	ldr	r3, [r7, #20]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	2000177c 	.word	0x2000177c
 8009290:	0800c174 	.word	0x0800c174
 8009294:	080094fd 	.word	0x080094fd
 8009298:	20001780 	.word	0x20001780

0800929c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80092aa:	202c      	movs	r0, #44	; 0x2c
 80092ac:	f000 fdf0 	bl	8009e90 <pvPortMalloc>
 80092b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00d      	beq.n	80092d4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f841 	bl	8009356 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80092d4:	697b      	ldr	r3, [r7, #20]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b08a      	sub	sp, #40	; 0x28
 80092e2:	af02      	add	r7, sp, #8
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80092ec:	232c      	movs	r3, #44	; 0x2c
 80092ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b2c      	cmp	r3, #44	; 0x2c
 80092f4:	d009      	beq.n	800930a <xTimerCreateStatic+0x2c>
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	e7fe      	b.n	8009308 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800930a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <xTimerCreateStatic+0x48>
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e7fe      	b.n	8009324 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00d      	beq.n	800934c <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f805 	bl	8009356 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800934c:	69fb      	ldr	r3, [r7, #28]
	}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b086      	sub	sp, #24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d109      	bne.n	800937e <prvInitialiseNewTimer+0x28>
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	e7fe      	b.n	800937c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01e      	beq.n	80093c2 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009384:	f000 fae0 	bl	8009948 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	3304      	adds	r3, #4
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fd fcb9 	bl	8006d1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d008      	beq.n	80093c2 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b6:	f043 0304 	orr.w	r3, r3, #4
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80093c2:	bf00      	nop
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	; 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093da:	2300      	movs	r3, #0
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <xTimerGenericCommand+0x2c>
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	623b      	str	r3, [r7, #32]
 80093f6:	e7fe      	b.n	80093f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093f8:	4b19      	ldr	r3, [pc, #100]	; (8009460 <xTimerGenericCommand+0x94>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d02a      	beq.n	8009456 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b05      	cmp	r3, #5
 8009410:	dc18      	bgt.n	8009444 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009412:	f7ff fd21 	bl	8008e58 <xTaskGetSchedulerState>
 8009416:	4603      	mov	r3, r0
 8009418:	2b02      	cmp	r3, #2
 800941a:	d109      	bne.n	8009430 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <xTimerGenericCommand+0x94>)
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	f107 0110 	add.w	r1, r7, #16
 8009424:	2300      	movs	r3, #0
 8009426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009428:	f7fd ff64 	bl	80072f4 <xQueueGenericSend>
 800942c:	6278      	str	r0, [r7, #36]	; 0x24
 800942e:	e012      	b.n	8009456 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009430:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <xTimerGenericCommand+0x94>)
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	f107 0110 	add.w	r1, r7, #16
 8009438:	2300      	movs	r3, #0
 800943a:	2200      	movs	r2, #0
 800943c:	f7fd ff5a 	bl	80072f4 <xQueueGenericSend>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24
 8009442:	e008      	b.n	8009456 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009444:	4b06      	ldr	r3, [pc, #24]	; (8009460 <xTimerGenericCommand+0x94>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	f107 0110 	add.w	r1, r7, #16
 800944c:	2300      	movs	r3, #0
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	f7fe f84a 	bl	80074e8 <xQueueGenericSendFromISR>
 8009454:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009458:	4618      	mov	r0, r3
 800945a:	3728      	adds	r7, #40	; 0x28
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	2000177c 	.word	0x2000177c

08009464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <prvProcessExpiredTimer+0x94>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fcb7 	bl	8006df0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d021      	beq.n	80094d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	18d1      	adds	r1, r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f000 f8d1 	bl	8009644 <prvInsertTimerInActiveList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01e      	beq.n	80094e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff ff8a 	bl	80093cc <xTimerGenericCommand>
 80094b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d112      	bne.n	80094e6 <prvProcessExpiredTimer+0x82>
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	e7fe      	b.n	80094d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	6978      	ldr	r0, [r7, #20]
 80094ec:	4798      	blx	r3
}
 80094ee:	bf00      	nop
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20001774 	.word	0x20001774

080094fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009504:	f107 0308 	add.w	r3, r7, #8
 8009508:	4618      	mov	r0, r3
 800950a:	f000 f857 	bl	80095bc <prvGetNextExpireTime>
 800950e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4619      	mov	r1, r3
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f803 	bl	8009520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800951a:	f000 f8d5 	bl	80096c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800951e:	e7f1      	b.n	8009504 <prvTimerTask+0x8>

08009520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800952a:	f7ff f8b3 	bl	8008694 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800952e:	f107 0308 	add.w	r3, r7, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f866 	bl	8009604 <prvSampleTimeNow>
 8009538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d130      	bne.n	80095a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <prvProcessTimerOrBlockTask+0x3c>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d806      	bhi.n	800955c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800954e:	f7ff f8af 	bl	80086b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009552:	68f9      	ldr	r1, [r7, #12]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff85 	bl	8009464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800955a:	e024      	b.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d008      	beq.n	8009574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <prvProcessTimerOrBlockTask+0x90>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <prvProcessTimerOrBlockTask+0x50>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <prvProcessTimerOrBlockTask+0x52>
 8009570:	2300      	movs	r3, #0
 8009572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <prvProcessTimerOrBlockTask+0x94>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	f7fe fc43 	bl	8007e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009586:	f7ff f893 	bl	80086b0 <xTaskResumeAll>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <prvProcessTimerOrBlockTask+0x98>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
}
 80095a0:	e001      	b.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095a2:	f7ff f885 	bl	80086b0 <xTaskResumeAll>
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20001778 	.word	0x20001778
 80095b4:	2000177c 	.word	0x2000177c
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c4:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <prvGetNextExpireTime+0x44>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <prvGetNextExpireTime+0x16>
 80095ce:	2201      	movs	r2, #1
 80095d0:	e000      	b.n	80095d4 <prvGetNextExpireTime+0x18>
 80095d2:	2200      	movs	r2, #0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <prvGetNextExpireTime+0x44>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	e001      	b.n	80095f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20001774 	.word	0x20001774

08009604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800960c:	f7ff f8ec 	bl	80087e8 <xTaskGetTickCount>
 8009610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009612:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <prvSampleTimeNow+0x3c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	429a      	cmp	r2, r3
 800961a:	d205      	bcs.n	8009628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800961c:	f000 f930 	bl	8009880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e002      	b.n	800962e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800962e:	4a04      	ldr	r2, [pc, #16]	; (8009640 <prvSampleTimeNow+0x3c>)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009634:	68fb      	ldr	r3, [r7, #12]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20001784 	.word	0x20001784

08009644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d812      	bhi.n	8009690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e01b      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <prvInsertTimerInActiveList+0x7c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3304      	adds	r3, #4
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f7fd fb78 	bl	8006d7e <vListInsert>
 800968e:	e012      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d206      	bcs.n	80096a6 <prvInsertTimerInActiveList+0x62>
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e007      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <prvInsertTimerInActiveList+0x80>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f7fd fb64 	bl	8006d7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096b6:	697b      	ldr	r3, [r7, #20]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20001778 	.word	0x20001778
 80096c4:	20001774 	.word	0x20001774

080096c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ce:	e0c6      	b.n	800985e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	da17      	bge.n	8009706 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096d6:	1d3b      	adds	r3, r7, #4
 80096d8:	3304      	adds	r3, #4
 80096da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <prvProcessReceivedCommands+0x2e>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	e7fe      	b.n	80096f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fc:	6850      	ldr	r0, [r2, #4]
 80096fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009700:	6892      	ldr	r2, [r2, #8]
 8009702:	4611      	mov	r1, r2
 8009704:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f2c0 80a7 	blt.w	800985c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	3304      	adds	r3, #4
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd fb66 	bl	8006df0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009724:	463b      	mov	r3, r7
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff ff6c 	bl	8009604 <prvSampleTimeNow>
 800972c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b09      	cmp	r3, #9
 8009732:	f200 8094 	bhi.w	800985e <prvProcessReceivedCommands+0x196>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <prvProcessReceivedCommands+0x74>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009765 	.word	0x08009765
 8009740:	08009765 	.word	0x08009765
 8009744:	08009765 	.word	0x08009765
 8009748:	080097d7 	.word	0x080097d7
 800974c:	080097eb 	.word	0x080097eb
 8009750:	08009833 	.word	0x08009833
 8009754:	08009765 	.word	0x08009765
 8009758:	08009765 	.word	0x08009765
 800975c:	080097d7 	.word	0x080097d7
 8009760:	080097eb 	.word	0x080097eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	18d1      	adds	r1, r2, r3
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009784:	f7ff ff5e 	bl	8009644 <prvInsertTimerInActiveList>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d067      	beq.n	800985e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d05c      	beq.n	800985e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	441a      	add	r2, r3
 80097ac:	2300      	movs	r3, #0
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	2300      	movs	r3, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b6:	f7ff fe09 	bl	80093cc <xTimerGenericCommand>
 80097ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d14d      	bne.n	800985e <prvProcessReceivedCommands+0x196>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61bb      	str	r3, [r7, #24]
 80097d4:	e7fe      	b.n	80097d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097dc:	f023 0301 	bic.w	r3, r3, #1
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097e8:	e039      	b.n	800985e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097f0:	f043 0301 	orr.w	r3, r3, #1
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d109      	bne.n	800981e <prvProcessReceivedCommands+0x156>
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e7fe      	b.n	800981c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	18d1      	adds	r1, r2, r3
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982c:	f7ff ff0a 	bl	8009644 <prvInsertTimerInActiveList>
					break;
 8009830:	e015      	b.n	800985e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8009840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009842:	f000 fbe7 	bl	800a014 <vPortFree>
 8009846:	e00a      	b.n	800985e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800984e:	f023 0301 	bic.w	r3, r3, #1
 8009852:	b2da      	uxtb	r2, r3
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800985a:	e000      	b.n	800985e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800985c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <prvProcessReceivedCommands+0x1b4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	1d39      	adds	r1, r7, #4
 8009864:	2200      	movs	r2, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fd fed2 	bl	8007610 <xQueueReceive>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	f47f af2e 	bne.w	80096d0 <prvProcessReceivedCommands+0x8>
	}
}
 8009874:	bf00      	nop
 8009876:	3730      	adds	r7, #48	; 0x30
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	2000177c 	.word	0x2000177c

08009880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009886:	e047      	b.n	8009918 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009888:	4b2d      	ldr	r3, [pc, #180]	; (8009940 <prvSwitchTimerLists+0xc0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009892:	4b2b      	ldr	r3, [pc, #172]	; (8009940 <prvSwitchTimerLists+0xc0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3304      	adds	r3, #4
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd faa5 	bl	8006df0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d02d      	beq.n	8009918 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4413      	add	r3, r2
 80098c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d90e      	bls.n	80098ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098da:	4b19      	ldr	r3, [pc, #100]	; (8009940 <prvSwitchTimerLists+0xc0>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7fd fa4a 	bl	8006d7e <vListInsert>
 80098ea:	e015      	b.n	8009918 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098ec:	2300      	movs	r3, #0
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	2100      	movs	r1, #0
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7ff fd68 	bl	80093cc <xTimerGenericCommand>
 80098fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <prvSwitchTimerLists+0x98>
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	e7fe      	b.n	8009916 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009918:	4b09      	ldr	r3, [pc, #36]	; (8009940 <prvSwitchTimerLists+0xc0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1b2      	bne.n	8009888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <prvSwitchTimerLists+0xc0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <prvSwitchTimerLists+0xc4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a04      	ldr	r2, [pc, #16]	; (8009940 <prvSwitchTimerLists+0xc0>)
 800992e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009930:	4a04      	ldr	r2, [pc, #16]	; (8009944 <prvSwitchTimerLists+0xc4>)
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	6013      	str	r3, [r2, #0]
}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20001774 	.word	0x20001774
 8009944:	20001778 	.word	0x20001778

08009948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800994e:	f000 f985 	bl	8009c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <prvCheckForValidListAndQueue+0x60>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d120      	bne.n	800999c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800995a:	4814      	ldr	r0, [pc, #80]	; (80099ac <prvCheckForValidListAndQueue+0x64>)
 800995c:	f7fd f9be 	bl	8006cdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009960:	4813      	ldr	r0, [pc, #76]	; (80099b0 <prvCheckForValidListAndQueue+0x68>)
 8009962:	f7fd f9bb 	bl	8006cdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009966:	4b13      	ldr	r3, [pc, #76]	; (80099b4 <prvCheckForValidListAndQueue+0x6c>)
 8009968:	4a10      	ldr	r2, [pc, #64]	; (80099ac <prvCheckForValidListAndQueue+0x64>)
 800996a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <prvCheckForValidListAndQueue+0x70>)
 800996e:	4a10      	ldr	r2, [pc, #64]	; (80099b0 <prvCheckForValidListAndQueue+0x68>)
 8009970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009972:	2300      	movs	r3, #0
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4b11      	ldr	r3, [pc, #68]	; (80099bc <prvCheckForValidListAndQueue+0x74>)
 8009978:	4a11      	ldr	r2, [pc, #68]	; (80099c0 <prvCheckForValidListAndQueue+0x78>)
 800997a:	2110      	movs	r1, #16
 800997c:	200a      	movs	r0, #10
 800997e:	f7fd fac9 	bl	8006f14 <xQueueGenericCreateStatic>
 8009982:	4602      	mov	r2, r0
 8009984:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <prvCheckForValidListAndQueue+0x60>)
 8009986:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009988:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <prvCheckForValidListAndQueue+0x60>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <prvCheckForValidListAndQueue+0x60>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	490b      	ldr	r1, [pc, #44]	; (80099c4 <prvCheckForValidListAndQueue+0x7c>)
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe f9e6 	bl	8007d68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800999c:	f000 f98c 	bl	8009cb8 <vPortExitCritical>
}
 80099a0:	bf00      	nop
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2000177c 	.word	0x2000177c
 80099ac:	2000174c 	.word	0x2000174c
 80099b0:	20001760 	.word	0x20001760
 80099b4:	20001774 	.word	0x20001774
 80099b8:	20001778 	.word	0x20001778
 80099bc:	20001828 	.word	0x20001828
 80099c0:	20001788 	.word	0x20001788
 80099c4:	0800c17c 	.word	0x0800c17c

080099c8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <pvTimerGetTimerID+0x26>
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e7fe      	b.n	80099ec <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 80099ee:	f000 f935 	bl	8009c5c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80099f8:	f000 f95e 	bl	8009cb8 <vPortExitCritical>

	return pvReturn;
 80099fc:	693b      	ldr	r3, [r7, #16]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3b04      	subs	r3, #4
 8009a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3b04      	subs	r3, #4
 8009a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f023 0201 	bic.w	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3b04      	subs	r3, #4
 8009a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a38:	4a0c      	ldr	r2, [pc, #48]	; (8009a6c <pxPortInitialiseStack+0x64>)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3b14      	subs	r3, #20
 8009a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f06f 0202 	mvn.w	r2, #2
 8009a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3b20      	subs	r3, #32
 8009a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	08009a71 	.word	0x08009a71

08009a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a7a:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <prvTaskExitError+0x50>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	d009      	beq.n	8009a98 <prvTaskExitError+0x28>
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e7fe      	b.n	8009a96 <prvTaskExitError+0x26>
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009aaa:	bf00      	nop
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0fc      	beq.n	8009aac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ab2:	bf00      	nop
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000908 	.word	0x20000908
	...

08009ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <pxCurrentTCBConst2>)
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	6808      	ldr	r0, [r1, #0]
 8009ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ada:	f380 8809 	msr	PSP, r0
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f380 8811 	msr	BASEPRI, r0
 8009aea:	4770      	bx	lr
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst2>:
 8009af0:	2000124c 	.word	0x2000124c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009af8:	4808      	ldr	r0, [pc, #32]	; (8009b1c <prvPortStartFirstTask+0x24>)
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	6800      	ldr	r0, [r0, #0]
 8009afe:	f380 8808 	msr	MSP, r0
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8814 	msr	CONTROL, r0
 8009b0a:	b662      	cpsie	i
 8009b0c:	b661      	cpsie	f
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	df00      	svc	0
 8009b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b1a:	bf00      	nop
 8009b1c:	e000ed08 	.word	0xe000ed08

08009b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b26:	4b44      	ldr	r3, [pc, #272]	; (8009c38 <xPortStartScheduler+0x118>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a44      	ldr	r2, [pc, #272]	; (8009c3c <xPortStartScheduler+0x11c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d109      	bne.n	8009b44 <xPortStartScheduler+0x24>
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	e7fe      	b.n	8009b42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b44:	4b3c      	ldr	r3, [pc, #240]	; (8009c38 <xPortStartScheduler+0x118>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a3d      	ldr	r2, [pc, #244]	; (8009c40 <xPortStartScheduler+0x120>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d109      	bne.n	8009b62 <xPortStartScheduler+0x42>
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	e7fe      	b.n	8009b60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b62:	4b38      	ldr	r3, [pc, #224]	; (8009c44 <xPortStartScheduler+0x124>)
 8009b64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <xPortStartScheduler+0x128>)
 8009b88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b8a:	4b30      	ldr	r3, [pc, #192]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009b8c:	2207      	movs	r2, #7
 8009b8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b90:	e009      	b.n	8009ba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009b92:	4b2e      	ldr	r3, [pc, #184]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	4a2c      	ldr	r2, [pc, #176]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009b9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bae:	2b80      	cmp	r3, #128	; 0x80
 8009bb0:	d0ef      	beq.n	8009b92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bb2:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f1c3 0307 	rsb	r3, r3, #7
 8009bba:	2b04      	cmp	r3, #4
 8009bbc:	d009      	beq.n	8009bd2 <xPortStartScheduler+0xb2>
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	e7fe      	b.n	8009bd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	4a1c      	ldr	r2, [pc, #112]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009bda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009be4:	4a19      	ldr	r2, [pc, #100]	; (8009c4c <xPortStartScheduler+0x12c>)
 8009be6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bf0:	4b17      	ldr	r3, [pc, #92]	; (8009c50 <xPortStartScheduler+0x130>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <xPortStartScheduler+0x130>)
 8009bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bfc:	4b14      	ldr	r3, [pc, #80]	; (8009c50 <xPortStartScheduler+0x130>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <xPortStartScheduler+0x130>)
 8009c02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c08:	f000 f8d6 	bl	8009db8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c0c:	4b11      	ldr	r3, [pc, #68]	; (8009c54 <xPortStartScheduler+0x134>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c12:	f000 f8f5 	bl	8009e00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c16:	4b10      	ldr	r3, [pc, #64]	; (8009c58 <xPortStartScheduler+0x138>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a0f      	ldr	r2, [pc, #60]	; (8009c58 <xPortStartScheduler+0x138>)
 8009c1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c22:	f7ff ff69 	bl	8009af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c26:	f7fe fea7 	bl	8008978 <vTaskSwitchContext>
	prvTaskExitError();
 8009c2a:	f7ff ff21 	bl	8009a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed00 	.word	0xe000ed00
 8009c3c:	410fc271 	.word	0x410fc271
 8009c40:	410fc270 	.word	0x410fc270
 8009c44:	e000e400 	.word	0xe000e400
 8009c48:	20001878 	.word	0x20001878
 8009c4c:	2000187c 	.word	0x2000187c
 8009c50:	e000ed20 	.word	0xe000ed20
 8009c54:	20000908 	.word	0x20000908
 8009c58:	e000ef34 	.word	0xe000ef34

08009c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <vPortEnterCritical+0x54>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <vPortEnterCritical+0x54>)
 8009c7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <vPortEnterCritical+0x54>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d10e      	bne.n	8009ca4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <vPortEnterCritical+0x58>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <vPortEnterCritical+0x48>
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	603b      	str	r3, [r7, #0]
 8009ca2:	e7fe      	b.n	8009ca2 <vPortEnterCritical+0x46>
	}
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20000908 	.word	0x20000908
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cbe:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <vPortExitCritical+0x4c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d109      	bne.n	8009cda <vPortExitCritical+0x22>
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	e7fe      	b.n	8009cd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009cda:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <vPortExitCritical+0x4c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <vPortExitCritical+0x4c>)
 8009ce2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ce4:	4b07      	ldr	r3, [pc, #28]	; (8009d04 <vPortExitCritical+0x4c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d104      	bne.n	8009cf6 <vPortExitCritical+0x3e>
 8009cec:	2300      	movs	r3, #0
 8009cee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000908 	.word	0x20000908
	...

08009d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d10:	f3ef 8009 	mrs	r0, PSP
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <pxCurrentTCBConst>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	f01e 0f10 	tst.w	lr, #16
 8009d20:	bf08      	it	eq
 8009d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	6010      	str	r0, [r2, #0]
 8009d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d34:	f380 8811 	msr	BASEPRI, r0
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f7fe fe1a 	bl	8008978 <vTaskSwitchContext>
 8009d44:	f04f 0000 	mov.w	r0, #0
 8009d48:	f380 8811 	msr	BASEPRI, r0
 8009d4c:	bc09      	pop	{r0, r3}
 8009d4e:	6819      	ldr	r1, [r3, #0]
 8009d50:	6808      	ldr	r0, [r1, #0]
 8009d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d56:	f01e 0f10 	tst.w	lr, #16
 8009d5a:	bf08      	it	eq
 8009d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d60:	f380 8809 	msr	PSP, r0
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst>:
 8009d70:	2000124c 	.word	0x2000124c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d90:	f7fe fd3a 	bl	8008808 <xTaskIncrementTick>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d9a:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <SysTick_Handler+0x3c>)
 8009d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	2300      	movs	r3, #0
 8009da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009dbc:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <vPortSetupTimerInterrupt+0x34>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dc2:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <vPortSetupTimerInterrupt+0x38>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <vPortSetupTimerInterrupt+0x3c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <vPortSetupTimerInterrupt+0x40>)
 8009dce:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd2:	099b      	lsrs	r3, r3, #6
 8009dd4:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <vPortSetupTimerInterrupt+0x44>)
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dda:	4b04      	ldr	r3, [pc, #16]	; (8009dec <vPortSetupTimerInterrupt+0x34>)
 8009ddc:	2207      	movs	r2, #7
 8009dde:	601a      	str	r2, [r3, #0]
}
 8009de0:	bf00      	nop
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	e000e010 	.word	0xe000e010
 8009df0:	e000e018 	.word	0xe000e018
 8009df4:	200008fc 	.word	0x200008fc
 8009df8:	10624dd3 	.word	0x10624dd3
 8009dfc:	e000e014 	.word	0xe000e014

08009e00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e10 <vPortEnableVFP+0x10>
 8009e04:	6801      	ldr	r1, [r0, #0]
 8009e06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e0a:	6001      	str	r1, [r0, #0]
 8009e0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e0e:	bf00      	nop
 8009e10:	e000ed88 	.word	0xe000ed88

08009e14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e1a:	f3ef 8305 	mrs	r3, IPSR
 8009e1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b0f      	cmp	r3, #15
 8009e24:	d913      	bls.n	8009e4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e26:	4a16      	ldr	r2, [pc, #88]	; (8009e80 <vPortValidateInterruptPriority+0x6c>)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e30:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <vPortValidateInterruptPriority+0x70>)
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	7afa      	ldrb	r2, [r7, #11]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d209      	bcs.n	8009e4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
 8009e4c:	e7fe      	b.n	8009e4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e4e:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <vPortValidateInterruptPriority+0x74>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <vPortValidateInterruptPriority+0x78>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d909      	bls.n	8009e72 <vPortValidateInterruptPriority+0x5e>
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	e7fe      	b.n	8009e70 <vPortValidateInterruptPriority+0x5c>
	}
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	e000e3f0 	.word	0xe000e3f0
 8009e84:	20001878 	.word	0x20001878
 8009e88:	e000ed0c 	.word	0xe000ed0c
 8009e8c:	2000187c 	.word	0x2000187c

08009e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e9c:	f7fe fbfa 	bl	8008694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ea0:	4b57      	ldr	r3, [pc, #348]	; (800a000 <pvPortMalloc+0x170>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ea8:	f000 f90c 	bl	800a0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009eac:	4b55      	ldr	r3, [pc, #340]	; (800a004 <pvPortMalloc+0x174>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 808c 	bne.w	8009fd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01c      	beq.n	8009efa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d013      	beq.n	8009efa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f023 0307 	bic.w	r3, r3, #7
 8009ed8:	3308      	adds	r3, #8
 8009eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <pvPortMalloc+0x6a>
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e7fe      	b.n	8009ef8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d068      	beq.n	8009fd2 <pvPortMalloc+0x142>
 8009f00:	4b41      	ldr	r3, [pc, #260]	; (800a008 <pvPortMalloc+0x178>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d863      	bhi.n	8009fd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f0a:	4b40      	ldr	r3, [pc, #256]	; (800a00c <pvPortMalloc+0x17c>)
 8009f0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f0e:	4b3f      	ldr	r3, [pc, #252]	; (800a00c <pvPortMalloc+0x17c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f14:	e004      	b.n	8009f20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d903      	bls.n	8009f32 <pvPortMalloc+0xa2>
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1f1      	bne.n	8009f16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f32:	4b33      	ldr	r3, [pc, #204]	; (800a000 <pvPortMalloc+0x170>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d04a      	beq.n	8009fd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2208      	movs	r2, #8
 8009f42:	4413      	add	r3, r2
 8009f44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	1ad2      	subs	r2, r2, r3
 8009f56:	2308      	movs	r3, #8
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d91e      	bls.n	8009f9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4413      	add	r3, r2
 8009f64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <pvPortMalloc+0xf4>
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	613b      	str	r3, [r7, #16]
 8009f82:	e7fe      	b.n	8009f82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	1ad2      	subs	r2, r2, r3
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f96:	69b8      	ldr	r0, [r7, #24]
 8009f98:	f000 f8f6 	bl	800a188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <pvPortMalloc+0x178>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	4a18      	ldr	r2, [pc, #96]	; (800a008 <pvPortMalloc+0x178>)
 8009fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009faa:	4b17      	ldr	r3, [pc, #92]	; (800a008 <pvPortMalloc+0x178>)
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	4b18      	ldr	r3, [pc, #96]	; (800a010 <pvPortMalloc+0x180>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d203      	bcs.n	8009fbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fb6:	4b14      	ldr	r3, [pc, #80]	; (800a008 <pvPortMalloc+0x178>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a15      	ldr	r2, [pc, #84]	; (800a010 <pvPortMalloc+0x180>)
 8009fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <pvPortMalloc+0x174>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fd2:	f7fe fb6d 	bl	80086b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d009      	beq.n	8009ff4 <pvPortMalloc+0x164>
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e7fe      	b.n	8009ff2 <pvPortMalloc+0x162>
	return pvReturn;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3728      	adds	r7, #40	; 0x28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20004380 	.word	0x20004380
 800a004:	2000438c 	.word	0x2000438c
 800a008:	20004384 	.word	0x20004384
 800a00c:	20004378 	.word	0x20004378
 800a010:	20004388 	.word	0x20004388

0800a014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d046      	beq.n	800a0b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a026:	2308      	movs	r3, #8
 800a028:	425b      	negs	r3, r3
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4413      	add	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <vPortFree+0xa8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4013      	ands	r3, r2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <vPortFree+0x42>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e7fe      	b.n	800a054 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <vPortFree+0x5e>
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	e7fe      	b.n	800a070 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	4b11      	ldr	r3, [pc, #68]	; (800a0bc <vPortFree+0xa8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d019      	beq.n	800a0b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d115      	bne.n	800a0b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <vPortFree+0xa8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	43db      	mvns	r3, r3
 800a092:	401a      	ands	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a098:	f7fe fafc 	bl	8008694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <vPortFree+0xac>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	4a06      	ldr	r2, [pc, #24]	; (800a0c0 <vPortFree+0xac>)
 800a0a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0aa:	6938      	ldr	r0, [r7, #16]
 800a0ac:	f000 f86c 	bl	800a188 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a0b0:	f7fe fafe 	bl	80086b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0b4:	bf00      	nop
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2000438c 	.word	0x2000438c
 800a0c0:	20004384 	.word	0x20004384

0800a0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0ca:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800a0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0d0:	4b27      	ldr	r3, [pc, #156]	; (800a170 <prvHeapInit+0xac>)
 800a0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00c      	beq.n	800a0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	; (800a170 <prvHeapInit+0xac>)
 800a0f4:	4413      	add	r3, r2
 800a0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0fc:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <prvHeapInit+0xb0>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a102:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <prvHeapInit+0xb0>)
 800a104:	2200      	movs	r2, #0
 800a106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	4413      	add	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a110:	2208      	movs	r2, #8
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <prvHeapInit+0xb4>)
 800a124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a126:	4b14      	ldr	r3, [pc, #80]	; (800a178 <prvHeapInit+0xb4>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a12e:	4b12      	ldr	r3, [pc, #72]	; (800a178 <prvHeapInit+0xb4>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a144:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <prvHeapInit+0xb4>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	4a0a      	ldr	r2, [pc, #40]	; (800a17c <prvHeapInit+0xb8>)
 800a152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	4a09      	ldr	r2, [pc, #36]	; (800a180 <prvHeapInit+0xbc>)
 800a15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a15c:	4b09      	ldr	r3, [pc, #36]	; (800a184 <prvHeapInit+0xc0>)
 800a15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a162:	601a      	str	r2, [r3, #0]
}
 800a164:	bf00      	nop
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20001880 	.word	0x20001880
 800a174:	20004378 	.word	0x20004378
 800a178:	20004380 	.word	0x20004380
 800a17c:	20004388 	.word	0x20004388
 800a180:	20004384 	.word	0x20004384
 800a184:	2000438c 	.word	0x2000438c

0800a188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a190:	4b28      	ldr	r3, [pc, #160]	; (800a234 <prvInsertBlockIntoFreeList+0xac>)
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	e002      	b.n	800a19c <prvInsertBlockIntoFreeList+0x14>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d8f7      	bhi.n	800a196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d108      	bne.n	800a1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d118      	bne.n	800a210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <prvInsertBlockIntoFreeList+0xb0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d00d      	beq.n	800a206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	e008      	b.n	800a218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a206:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <prvInsertBlockIntoFreeList+0xb0>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	e003      	b.n	800a218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d002      	beq.n	800a226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20004378 	.word	0x20004378
 800a238:	20004380 	.word	0x20004380

0800a23c <lwow_ds18x20_start_raw>:
 * \param[in]       rom_id: 1-Wire device address to start measurement for.
 *                      Set to `NULL` to start measurement on all devices at the same time
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_start_raw(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
    uint8_t ret = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <lwow_ds18x20_start_raw+0x18>
 800a250:	2300      	movs	r3, #0
 800a252:	e018      	b.n	800a286 <lwow_ds18x20_start_raw+0x4a>

    if (lwow_reset_raw(ow) == lwowOK) {
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 faff 	bl	800a858 <lwow_reset_raw>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d111      	bne.n	800a284 <lwow_ds18x20_start_raw+0x48>
        if (rom_id == NULL) {                   /* Check for ROM id */
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <lwow_ds18x20_start_raw+0x32>
            lwow_skip_rom_raw(ow);              /* Skip ROM, send to all devices */
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fcb7 	bl	800abda <lwow_skip_rom_raw>
 800a26c:	e003      	b.n	800a276 <lwow_ds18x20_start_raw+0x3a>
        } else {
            lwow_match_rom_raw(ow, rom_id);     /* Select exact device by ROM address */
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fc7e 	bl	800ab72 <lwow_match_rom_raw>
        }
        lwow_write_byte_ex_raw(ow, 0x44, NULL); /* Start temperature conversion */
 800a276:	2200      	movs	r2, #0
 800a278:	2144      	movs	r1, #68	; 0x44
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fb30 	bl	800a8e0 <lwow_write_byte_ex_raw>
        ret = 1;
 800a280:	2301      	movs	r3, #1
 800a282:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <lwow_ds18x20_start>:
/**
 * \copydoc         lwow_ds18x20_start_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_start(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <lwow_ds18x20_start+0x14>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e00e      	b.n	800a2c0 <lwow_ds18x20_start+0x32>

    lwow_protect(ow, 1);
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fa95 	bl	800a7d4 <lwow_protect>
    res = lwow_ds18x20_start_raw(ow, rom_id);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff ffc5 	bl	800a23c <lwow_ds18x20_start_raw>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73fb      	strb	r3, [r7, #15]
    lwow_unprotect(ow, 1);
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 faac 	bl	800a816 <lwow_unprotect>
    return res;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <lwow_ds18x20_read_raw>:
 * \param[in]       rom_id: 1-Wire device address to read data from
 * \param[out]      t: Pointer to output float variable to save temperature
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_read_raw(lwow_t* const ow, const lwow_rom_t* const rom_id, float* const t) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08c      	sub	sp, #48	; 0x30
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
    float dec;
    uint16_t temp;
    uint8_t ret = 0, data[9], crc, resolution, m = 0, bit_val;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    int8_t digit;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <lwow_ds18x20_read_raw+0x22>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e0f9      	b.n	800a4de <lwow_ds18x20_read_raw+0x216>
    LWOW_ASSERT0("t != NULL", t != NULL);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <lwow_ds18x20_read_raw+0x2c>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e0f4      	b.n	800a4de <lwow_ds18x20_read_raw+0x216>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id));
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f9ad 	bl	800a656 <lwow_ds18x20_is_b>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d108      	bne.n	800a314 <lwow_ds18x20_read_raw+0x4c>
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 f9c2 	bl	800a68e <lwow_ds18x20_is_s>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <lwow_ds18x20_read_raw+0x4c>
 800a310:	2300      	movs	r3, #0
 800a312:	e0e4      	b.n	800a4de <lwow_ds18x20_read_raw+0x216>

    /*
     * First read bit and check if all devices completed with conversion.
     * If everything ready, try to reset the network and continue
     */
    if (lwow_read_bit_ex_raw(ow, &bit_val) == lwowOK && bit_val != 0 && lwow_reset_raw(ow) == lwowOK) {
 800a314:	f107 0317 	add.w	r3, r7, #23
 800a318:	4619      	mov	r1, r3
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fb5d 	bl	800a9da <lwow_read_bit_ex_raw>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	f040 80d9 	bne.w	800a4da <lwow_ds18x20_read_raw+0x212>
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 80d5 	beq.w	800a4da <lwow_ds18x20_read_raw+0x212>
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fa91 	bl	800a858 <lwow_reset_raw>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 80ce 	bne.w	800a4da <lwow_ds18x20_read_raw+0x212>
        if (rom_id == NULL) {
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <lwow_ds18x20_read_raw+0x84>
            lwow_skip_rom_raw(ow);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 fc48 	bl	800abda <lwow_skip_rom_raw>
 800a34a:	e003      	b.n	800a354 <lwow_ds18x20_read_raw+0x8c>
        } else {
            lwow_match_rom_raw(ow, rom_id);
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fc0f 	bl	800ab72 <lwow_match_rom_raw>
        }
        lwow_write_byte_ex_raw(ow, LWOW_CMD_RSCRATCHPAD, NULL);
 800a354:	2200      	movs	r2, #0
 800a356:	21be      	movs	r1, #190	; 0xbe
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fac1 	bl	800a8e0 <lwow_write_byte_ex_raw>

        /* Read plain data from device */
        for (uint8_t i = 0; i < 9; ++i) {
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a364:	e00d      	b.n	800a382 <lwow_ds18x20_read_raw+0xba>
            lwow_read_byte_ex_raw(ow, &data[i]);
 800a366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a36a:	f107 0218 	add.w	r2, r7, #24
 800a36e:	4413      	add	r3, r2
 800a370:	4619      	mov	r1, r3
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fb18 	bl	800a9a8 <lwow_read_byte_ex_raw>
        for (uint8_t i = 0; i < 9; ++i) {
 800a378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a37c:	3301      	adds	r3, #1
 800a37e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a386:	2b08      	cmp	r3, #8
 800a388:	d9ed      	bls.n	800a366 <lwow_ds18x20_read_raw+0x9e>
        }
        crc = lwow_crc(data, 0x09);             /* Calculate CRC */
 800a38a:	f107 0318 	add.w	r3, r7, #24
 800a38e:	2109      	movs	r1, #9
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fc35 	bl	800ac00 <lwow_crc>
 800a396:	4603      	mov	r3, r0
 800a398:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (crc == 0) {                         /* Result must be 0 to match the CRC */
 800a39c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f040 809a 	bne.w	800a4da <lwow_ds18x20_read_raw+0x212>
            temp = (data[1] << 0x08) | data[0]; /* Format data in integer format */
 800a3a6:	7e7b      	ldrb	r3, [r7, #25]
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	b21a      	sxth	r2, r3
 800a3ac:	7e3b      	ldrb	r3, [r7, #24]
 800a3ae:	b21b      	sxth	r3, r3
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	b21b      	sxth	r3, r3
 800a3b4:	857b      	strh	r3, [r7, #42]	; 0x2a
            resolution = ((data[4] & 0x60) >> 0x05) + 0x09; /* Set resolution in units of bits */
 800a3b6:	7f3b      	ldrb	r3, [r7, #28]
 800a3b8:	115b      	asrs	r3, r3, #5
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0303 	and.w	r3, r3, #3
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	3309      	adds	r3, #9
 800a3c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            if (temp & 0x8000) {                /* Check for negative temperature */
 800a3c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da05      	bge.n	800a3dc <lwow_ds18x20_read_raw+0x114>
                temp = ~temp + 1;               /* Perform two's complement */
 800a3d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3d2:	425b      	negs	r3, r3
 800a3d4:	857b      	strh	r3, [r7, #42]	; 0x2a
                m = 1;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            digit = (temp >> 0x04) | (((temp >> 0x08) & 0x07) << 0x04);
 800a3dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3de:	091b      	lsrs	r3, r3, #4
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	b25a      	sxtb	r2, r3
 800a3e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	b25b      	sxtb	r3, r3
 800a3ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (resolution) {               /* Check for resolution settings */
 800a3fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3fe:	3b09      	subs	r3, #9
 800a400:	2b03      	cmp	r3, #3
 800a402:	d849      	bhi.n	800a498 <lwow_ds18x20_read_raw+0x1d0>
 800a404:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <lwow_ds18x20_read_raw+0x144>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a41d 	.word	0x0800a41d
 800a410:	0800a43d 	.word	0x0800a43d
 800a414:	0800a45d 	.word	0x0800a45d
 800a418:	0800a47d 	.word	0x0800a47d
                case 9:
                    dec = ((temp >> 0x03) & 0x01) * 0.5f;
 800a41c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a41e:	08db      	lsrs	r3, r3, #3
 800a420:	b29b      	uxth	r3, r3
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a432:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a436:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 800a43a:	e032      	b.n	800a4a2 <lwow_ds18x20_read_raw+0x1da>
                case 10:
                    dec = ((temp >> 0x02) & 0x03) * 0.25f;
 800a43c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a43e:	089b      	lsrs	r3, r3, #2
 800a440:	b29b      	uxth	r3, r3
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a44e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800a452:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a456:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 800a45a:	e022      	b.n	800a4a2 <lwow_ds18x20_read_raw+0x1da>
                case 11:
                    dec = ((temp >> 0x01) & 0x07) * 0.125f;
 800a45c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a45e:	085b      	lsrs	r3, r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a46e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800a472:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a476:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 800a47a:	e012      	b.n	800a4a2 <lwow_ds18x20_read_raw+0x1da>
                case 12:
                    dec = (temp & 0x0F) * 0.0625f;
 800a47c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a47e:	f003 030f 	and.w	r3, r3, #15
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a48a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800a4e8 <lwow_ds18x20_read_raw+0x220>
 800a48e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a492:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 800a496:	e004      	b.n	800a4a2 <lwow_ds18x20_read_raw+0x1da>
                default:
                    dec = 0xFF, digit = 0;
 800a498:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <lwow_ds18x20_read_raw+0x224>)
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49c:	2300      	movs	r3, #0
 800a49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            dec += digit;
 800a4a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            if (m) {
 800a4ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d005      	beq.n	800a4ce <lwow_ds18x20_read_raw+0x206>
                dec = -dec;
 800a4c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a4c6:	eef1 7a67 	vneg.f32	s15, s15
 800a4ca:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }
            *t = dec;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d2:	601a      	str	r2, [r3, #0]
            ret = 1;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }
    }

    return ret;
 800a4da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3730      	adds	r7, #48	; 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	3d800000 	.word	0x3d800000
 800a4ec:	437f0000 	.word	0x437f0000

0800a4f0 <lwow_ds18x20_read>:
/**
 * \copydoc         lwow_ds18x20_read_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_read(lwow_t* const ow, const lwow_rom_t* const rom_id, float* const t) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <lwow_ds18x20_read+0x16>
 800a502:	2300      	movs	r3, #0
 800a504:	e024      	b.n	800a550 <lwow_ds18x20_read+0x60>
    LWOW_ASSERT0("t != NULL", t != NULL);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <lwow_ds18x20_read+0x20>
 800a50c:	2300      	movs	r3, #0
 800a50e:	e01f      	b.n	800a550 <lwow_ds18x20_read+0x60>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id));
 800a510:	68b9      	ldr	r1, [r7, #8]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 f89f 	bl	800a656 <lwow_ds18x20_is_b>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d108      	bne.n	800a530 <lwow_ds18x20_read+0x40>
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 f8b4 	bl	800a68e <lwow_ds18x20_is_s>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <lwow_ds18x20_read+0x40>
 800a52c:	2300      	movs	r3, #0
 800a52e:	e00f      	b.n	800a550 <lwow_ds18x20_read+0x60>

    lwow_protect(ow, 1);
 800a530:	2101      	movs	r1, #1
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 f94e 	bl	800a7d4 <lwow_protect>
    res = lwow_ds18x20_read_raw(ow, rom_id, t);
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fec3 	bl	800a2c8 <lwow_ds18x20_read_raw>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
    lwow_unprotect(ow, 1);
 800a546:	2101      	movs	r1, #1
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 f964 	bl	800a816 <lwow_unprotect>
    return res;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <lwow_ds18x20_get_resolution_raw>:
 * \param[in]       ow: 1-Wire handle
 * \param[in]       rom_id: 1-Wire device address to get resolution from
 * \return          Resolution in units of bits (`9 - 12`) on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_get_resolution_raw(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
    uint8_t res = 0, br;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <lwow_ds18x20_get_resolution_raw+0x18>
 800a56c:	2300      	movs	r3, #0
 800a56e:	e043      	b.n	800a5f8 <lwow_ds18x20_get_resolution_raw+0xa0>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <lwow_ds18x20_get_resolution_raw+0x22>
 800a576:	2300      	movs	r3, #0
 800a578:	e03e      	b.n	800a5f8 <lwow_ds18x20_get_resolution_raw+0xa0>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id));
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f86a 	bl	800a656 <lwow_ds18x20_is_b>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <lwow_ds18x20_get_resolution_raw+0x34>
 800a588:	2300      	movs	r3, #0
 800a58a:	e035      	b.n	800a5f8 <lwow_ds18x20_get_resolution_raw+0xa0>

    if (lwow_reset_raw(ow) == lwowOK) {         /* Reset bus */
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f963 	bl	800a858 <lwow_reset_raw>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d12e      	bne.n	800a5f6 <lwow_ds18x20_get_resolution_raw+0x9e>
        lwow_match_rom_raw(ow, rom_id);         /* Select device */
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fae9 	bl	800ab72 <lwow_match_rom_raw>
        lwow_write_byte_ex_raw(ow, LWOW_CMD_RSCRATCHPAD, NULL);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	21be      	movs	r1, #190	; 0xbe
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f99b 	bl	800a8e0 <lwow_write_byte_ex_raw>

        /* Read and ignore bytes */
        lwow_read_byte_ex_raw(ow, &br);
 800a5aa:	f107 030e 	add.w	r3, r7, #14
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f9f9 	bl	800a9a8 <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &br);
 800a5b6:	f107 030e 	add.w	r3, r7, #14
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f9f3 	bl	800a9a8 <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &br);
 800a5c2:	f107 030e 	add.w	r3, r7, #14
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f9ed 	bl	800a9a8 <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &br);
 800a5ce:	f107 030e 	add.w	r3, r7, #14
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f9e7 	bl	800a9a8 <lwow_read_byte_ex_raw>

        lwow_read_byte_ex_raw(ow, &br);
 800a5da:	f107 030e 	add.w	r3, r7, #14
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f9e1 	bl	800a9a8 <lwow_read_byte_ex_raw>
        res = ((br & 0x60) >> 0x05) + 9;  /* Read configuration byte and calculate bits */
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	115b      	asrs	r3, r3, #5
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 0303 	and.w	r3, r3, #3
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	3309      	adds	r3, #9
 800a5f4:	73fb      	strb	r3, [r7, #15]
    }

    return res;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <lwow_ds18x20_get_resolution>:
/**
 * \copydoc         lwow_ds18x20_get_resolution_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_get_resolution(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <lwow_ds18x20_get_resolution+0x14>
 800a610:	2300      	movs	r3, #0
 800a612:	e01c      	b.n	800a64e <lwow_ds18x20_get_resolution+0x4e>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <lwow_ds18x20_get_resolution+0x1e>
 800a61a:	2300      	movs	r3, #0
 800a61c:	e017      	b.n	800a64e <lwow_ds18x20_get_resolution+0x4e>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id));
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f818 	bl	800a656 <lwow_ds18x20_is_b>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <lwow_ds18x20_get_resolution+0x30>
 800a62c:	2300      	movs	r3, #0
 800a62e:	e00e      	b.n	800a64e <lwow_ds18x20_get_resolution+0x4e>

    lwow_protect(ow, 1);
 800a630:	2101      	movs	r1, #1
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8ce 	bl	800a7d4 <lwow_protect>
    res = lwow_ds18x20_get_resolution_raw(ow, rom_id);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff ff8c 	bl	800a558 <lwow_ds18x20_get_resolution_raw>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
    lwow_unprotect(ow, 1);
 800a644:	2101      	movs	r1, #1
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f8e5 	bl	800a816 <lwow_unprotect>
    return res;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <lwow_ds18x20_is_b>:
 * \param[in]       rom_id: 1-Wire device address to test against `DS18B20`
 * \return          `1` on success, `0` otherwise
 * \note            This function is reentrant
 */
uint8_t
lwow_ds18x20_is_b(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <lwow_ds18x20_is_b+0x14>
 800a666:	2300      	movs	r3, #0
 800a668:	e00b      	b.n	800a682 <lwow_ds18x20_is_b+0x2c>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <lwow_ds18x20_is_b+0x1e>
 800a670:	2300      	movs	r3, #0
 800a672:	e006      	b.n	800a682 <lwow_ds18x20_is_b+0x2c>

    LWOW_UNUSED(ow);
    return rom_id->rom[0] == 0x28;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b28      	cmp	r3, #40	; 0x28
 800a67a:	bf0c      	ite	eq
 800a67c:	2301      	moveq	r3, #1
 800a67e:	2300      	movne	r3, #0
 800a680:	b2db      	uxtb	r3, r3
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <lwow_ds18x20_is_s>:
 * \param[in]       rom_id: 1-Wire device address to test against `DS18S20`
 * \return          `1` on success, `0` otherwise
 * \note            This function is reentrant
 */
uint8_t
lwow_ds18x20_is_s(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT0("ow != NULL", ow != NULL);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <lwow_ds18x20_is_s+0x14>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e00b      	b.n	800a6ba <lwow_ds18x20_is_s+0x2c>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <lwow_ds18x20_is_s+0x1e>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e006      	b.n	800a6ba <lwow_ds18x20_is_s+0x2c>

    LWOW_UNUSED(ow);
    return rom_id->rom[0] == 0x10;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b10      	cmp	r3, #16
 800a6b2:	bf0c      	ite	eq
 800a6b4:	2301      	moveq	r3, #1
 800a6b6:	2300      	movne	r3, #0
 800a6b8:	b2db      	uxtb	r3, r3
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <prv_send_bit>:
 * \param[in]       btw: Bit to send, either `1` or `0`
 * \param[out]      btr: Pointer to output variable to write read bit
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
static lwowr_t
prv_send_bit(lwow_t* const ow, uint8_t btw, uint8_t* btr) {
 800a6c6:	b590      	push	{r4, r7, lr}
 800a6c8:	b087      	sub	sp, #28
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	72fb      	strb	r3, [r7, #11]
    uint8_t b;

    SET_NOT_NULL(btr, 0);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <prv_send_bit+0x1a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]

    /*
     * To send logical 1 over 1-wire, send 0xFF over UART
     * To send logical 0 over 1-wire, send 0x00 over UART
     */
    btw = btw > 0 ? 0xFF : 0x00;                /* Convert to 0 or 1 */
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <prv_send_bit+0x24>
 800a6e6:	23ff      	movs	r3, #255	; 0xff
 800a6e8:	e000      	b.n	800a6ec <prv_send_bit+0x26>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	72fb      	strb	r3, [r7, #11]
    if (!ow->ll_drv->tx_rx(&btw, &b, 1, ow->arg)) {
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	68dc      	ldr	r4, [r3, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f107 0117 	add.w	r1, r7, #23
 800a6fc:	f107 000b 	add.w	r0, r7, #11
 800a700:	2201      	movs	r2, #1
 800a702:	47a0      	blx	r4
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <prv_send_bit+0x48>
        return lwowERRTXRX;                     /* Transmit error */
 800a70a:	2303      	movs	r3, #3
 800a70c:	e00d      	b.n	800a72a <prv_send_bit+0x64>
    }
    b = b == 0xFF ? 1 : 0;                      /* Go to bit values */
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	2bff      	cmp	r3, #255	; 0xff
 800a712:	bf0c      	ite	eq
 800a714:	2301      	moveq	r3, #1
 800a716:	2300      	movne	r3, #0
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	75fb      	strb	r3, [r7, #23]
    SET_NOT_NULL(btr, b);                       /* Set new byte */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d002      	beq.n	800a728 <prv_send_bit+0x62>
 800a722:	7dfa      	ldrb	r2, [r7, #23]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	701a      	strb	r2, [r3, #0]
    return lwowOK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd90      	pop	{r4, r7, pc}

0800a732 <lwow_init>:
 * \param[in]       ll_drv: Low-level driver
 * \param[in]       arg: Custom argument
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_init(lwow_t* const ow, const lwow_ll_drv_t* const ll_drv, void* arg) {
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <lwow_init+0x16>
 800a744:	2305      	movs	r3, #5
 800a746:	e041      	b.n	800a7cc <lwow_init+0x9a>
    LWOW_ASSERT("ll_drv != NULL", ll_drv != NULL);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <lwow_init+0x20>
 800a74e:	2305      	movs	r3, #5
 800a750:	e03c      	b.n	800a7cc <lwow_init+0x9a>
    LWOW_ASSERT("ll_drv->init != NULL", ll_drv->init != NULL);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <lwow_init+0x2c>
 800a75a:	2305      	movs	r3, #5
 800a75c:	e036      	b.n	800a7cc <lwow_init+0x9a>
    LWOW_ASSERT("ll_drv->deinit != NULL", ll_drv->deinit != NULL);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <lwow_init+0x38>
 800a766:	2305      	movs	r3, #5
 800a768:	e030      	b.n	800a7cc <lwow_init+0x9a>
    LWOW_ASSERT("ll_drv->set_baudrate != NULL", ll_drv->set_baudrate != NULL);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <lwow_init+0x44>
 800a772:	2305      	movs	r3, #5
 800a774:	e02a      	b.n	800a7cc <lwow_init+0x9a>
    LWOW_ASSERT("ll_drv->tx_rx != NULL", ll_drv->tx_rx != NULL);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <lwow_init+0x50>
 800a77e:	2305      	movs	r3, #5
 800a780:	e024      	b.n	800a7cc <lwow_init+0x9a>

    ow->arg = arg;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	60da      	str	r2, [r3, #12]
    ow->ll_drv = ll_drv;                        /* Assign low-level driver */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	611a      	str	r2, [r3, #16]
    if (!ow->ll_drv->init(ow->arg)) {           /* Init low-level directly */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	68d2      	ldr	r2, [r2, #12]
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <lwow_init+0x74>
        return lwowERR;
 800a7a2:	2306      	movs	r3, #6
 800a7a4:	e012      	b.n	800a7cc <lwow_init+0x9a>
    }
#if LWOW_CFG_OS
    if (!lwow_sys_mutex_create(&ow->mutex, arg)) {
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3314      	adds	r3, #20
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fb7d 	bl	800aeac <lwow_sys_mutex_create>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d108      	bne.n	800a7ca <lwow_init+0x98>
        ow->ll_drv->deinit(ow->arg);            /* Deinit low-level */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	68d2      	ldr	r2, [r2, #12]
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	4798      	blx	r3
        return lwowERR;
 800a7c6:	2306      	movs	r3, #6
 800a7c8:	e000      	b.n	800a7cc <lwow_init+0x9a>
    }
#endif /* LWOW_CFG_OS */
    return lwowOK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <lwow_protect>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_protect(lwow_t* const ow, const uint8_t protect) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <lwow_protect+0x16>
 800a7e6:	2305      	movs	r3, #5
 800a7e8:	e011      	b.n	800a80e <lwow_protect+0x3a>

#if LWOW_CFG_OS
    if (protect && !lwow_sys_mutex_wait(&ow->mutex, ow->arg)) {
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00d      	beq.n	800a80c <lwow_protect+0x38>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f103 0214 	add.w	r2, r3, #20
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	f000 fb70 	bl	800aee2 <lwow_sys_mutex_wait>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <lwow_protect+0x38>
        return lwowERR;
 800a808:	2306      	movs	r3, #6
 800a80a:	e000      	b.n	800a80e <lwow_protect+0x3a>
    }
#else
    (void)ow;
    (void)protect;
#endif /* LWOW_CFG_OS */
    return lwowOK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <lwow_unprotect>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_unprotect(lwow_t* const ow, const uint8_t protect) {
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <lwow_unprotect+0x16>
 800a828:	2305      	movs	r3, #5
 800a82a:	e011      	b.n	800a850 <lwow_unprotect+0x3a>

#if LWOW_CFG_OS
    if (protect && !lwow_sys_mutex_release(&ow->mutex, ow->arg)) {
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00d      	beq.n	800a84e <lwow_unprotect+0x38>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f103 0214 	add.w	r2, r3, #20
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f000 fb65 	bl	800af0e <lwow_sys_mutex_release>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <lwow_unprotect+0x38>
        return lwowERR;
 800a84a:	2306      	movs	r3, #6
 800a84c:	e000      	b.n	800a850 <lwow_unprotect+0x3a>
    }
#else
    (void)ow;
    (void)protect;
#endif /* LWOW_CFG_OS */
    return lwowOK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <lwow_reset_raw>:
 * \brief           Reset 1-Wire bus and set connected devices to idle state
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_reset_raw(lwow_t* const ow) {
 800a858:	b590      	push	{r4, r7, lr}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
    uint8_t b;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <lwow_reset_raw+0x12>
 800a866:	2305      	movs	r3, #5
 800a868:	e036      	b.n	800a8d8 <lwow_reset_raw+0x80>

    /* First send reset pulse */
    b = OW_RESET_BYTE;                          /* Set reset sequence byte = 0xF0 */
 800a86a:	23f0      	movs	r3, #240	; 0xf0
 800a86c:	73fb      	strb	r3, [r7, #15]
    if (!ow->ll_drv->set_baudrate(9600, ow->arg)) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68d2      	ldr	r2, [r2, #12]
 800a878:	4611      	mov	r1, r2
 800a87a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800a87e:	4798      	blx	r3
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <lwow_reset_raw+0x32>
        return lwowERRBAUD;                       /* Error setting baudrate */
 800a886:	2304      	movs	r3, #4
 800a888:	e026      	b.n	800a8d8 <lwow_reset_raw+0x80>
    }
    if (!ow->ll_drv->tx_rx(&b, &b, 1, ow->arg)) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	68dc      	ldr	r4, [r3, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f107 010f 	add.w	r1, r7, #15
 800a898:	f107 000f 	add.w	r0, r7, #15
 800a89c:	2201      	movs	r2, #1
 800a89e:	47a0      	blx	r4
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <lwow_reset_raw+0x52>
        return lwowERRTXRX;                       /* Error with data exchange */
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e016      	b.n	800a8d8 <lwow_reset_raw+0x80>
    }
    if (!ow->ll_drv->set_baudrate(115200, ow->arg)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	68d2      	ldr	r2, [r2, #12]
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800a8ba:	4798      	blx	r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <lwow_reset_raw+0x6e>
        return lwowERRBAUD;                       /* Error setting baudrate */
 800a8c2:	2304      	movs	r3, #4
 800a8c4:	e008      	b.n	800a8d8 <lwow_reset_raw+0x80>
    }

    /* Check if there is reply from any device */
    if (b == 0 || b == OW_RESET_BYTE) {
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <lwow_reset_raw+0x7a>
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	2bf0      	cmp	r3, #240	; 0xf0
 800a8d0:	d101      	bne.n	800a8d6 <lwow_reset_raw+0x7e>
        return lwowERRPRESENCE;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <lwow_reset_raw+0x80>
    }
    return lwowOK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd90      	pop	{r4, r7, pc}

0800a8e0 <lwow_write_byte_ex_raw>:
 * \param[in]       btw: Byte to write
 * \param[out]      br: Pointer to read value. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_write_byte_ex_raw(lwow_t* const ow, const uint8_t btw, uint8_t* const br) {
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b089      	sub	sp, #36	; 0x24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	72fb      	strb	r3, [r7, #11]
    uint8_t tr[8];

    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <lwow_write_byte_ex_raw+0x18>
 800a8f4:	2305      	movs	r3, #5
 800a8f6:	e053      	b.n	800a9a0 <lwow_write_byte_ex_raw+0xc0>
    SET_NOT_NULL(br, 0);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <lwow_write_byte_ex_raw+0x24>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	701a      	strb	r2, [r3, #0]

    /* Prepare output data */
    for (uint8_t i = 0; i < 8; ++i) {
 800a904:	2300      	movs	r3, #0
 800a906:	77fb      	strb	r3, [r7, #31]
 800a908:	e013      	b.n	800a932 <lwow_write_byte_ex_raw+0x52>
        /*
         * If we have to send high bit, set byte as 0xFF,
         * otherwise set it as low bit, 0x00
         */
        tr[i] = (btw & (1 << i)) ? 0xFF : 0x00;
 800a90a:	7afa      	ldrb	r2, [r7, #11]
 800a90c:	7ffb      	ldrb	r3, [r7, #31]
 800a90e:	fa42 f303 	asr.w	r3, r2, r3
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <lwow_write_byte_ex_raw+0x3e>
 800a91a:	22ff      	movs	r2, #255	; 0xff
 800a91c:	e000      	b.n	800a920 <lwow_write_byte_ex_raw+0x40>
 800a91e:	2200      	movs	r2, #0
 800a920:	7ffb      	ldrb	r3, [r7, #31]
 800a922:	f107 0120 	add.w	r1, r7, #32
 800a926:	440b      	add	r3, r1
 800a928:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 8; ++i) {
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	3301      	adds	r3, #1
 800a930:	77fb      	strb	r3, [r7, #31]
 800a932:	7ffb      	ldrb	r3, [r7, #31]
 800a934:	2b07      	cmp	r3, #7
 800a936:	d9e8      	bls.n	800a90a <lwow_write_byte_ex_raw+0x2a>

    /*
     * Exchange data on UART level,
     * send single byte for each bit = 8 bytes
     */
    if (!ow->ll_drv->tx_rx(tr, tr, 8, ow->arg)) {
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	68dc      	ldr	r4, [r3, #12]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f107 0114 	add.w	r1, r7, #20
 800a946:	f107 0014 	add.w	r0, r7, #20
 800a94a:	2208      	movs	r2, #8
 800a94c:	47a0      	blx	r4
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <lwow_write_byte_ex_raw+0x78>
        return lwowERRTXRX;
 800a954:	2303      	movs	r3, #3
 800a956:	e023      	b.n	800a9a0 <lwow_write_byte_ex_raw+0xc0>
    }

    /* Update output value */
    if (br != NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01f      	beq.n	800a99e <lwow_write_byte_ex_raw+0xbe>
        uint8_t r = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	77bb      	strb	r3, [r7, #30]
        /*
         * Check received data. If we read 0xFF,
         * our logical write 1 was successful, otherwise it was 0.
         */
        for (uint8_t i = 0; i < 8; ++i) {
 800a962:	2300      	movs	r3, #0
 800a964:	777b      	strb	r3, [r7, #29]
 800a966:	e014      	b.n	800a992 <lwow_write_byte_ex_raw+0xb2>
            if (tr[i] == 0xFF) {
 800a968:	7f7b      	ldrb	r3, [r7, #29]
 800a96a:	f107 0220 	add.w	r2, r7, #32
 800a96e:	4413      	add	r3, r2
 800a970:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a974:	2bff      	cmp	r3, #255	; 0xff
 800a976:	d109      	bne.n	800a98c <lwow_write_byte_ex_raw+0xac>
                r |= 0x01 << i;
 800a978:	7f7b      	ldrb	r3, [r7, #29]
 800a97a:	2201      	movs	r2, #1
 800a97c:	fa02 f303 	lsl.w	r3, r2, r3
 800a980:	b25a      	sxtb	r2, r3
 800a982:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a986:	4313      	orrs	r3, r2
 800a988:	b25b      	sxtb	r3, r3
 800a98a:	77bb      	strb	r3, [r7, #30]
        for (uint8_t i = 0; i < 8; ++i) {
 800a98c:	7f7b      	ldrb	r3, [r7, #29]
 800a98e:	3301      	adds	r3, #1
 800a990:	777b      	strb	r3, [r7, #29]
 800a992:	7f7b      	ldrb	r3, [r7, #29]
 800a994:	2b07      	cmp	r3, #7
 800a996:	d9e7      	bls.n	800a968 <lwow_write_byte_ex_raw+0x88>
            }
        }
        *br = r;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	7fba      	ldrb	r2, [r7, #30]
 800a99c:	701a      	strb	r2, [r3, #0]
    }
    return lwowOK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3724      	adds	r7, #36	; 0x24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd90      	pop	{r4, r7, pc}

0800a9a8 <lwow_read_byte_ex_raw>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[out]      br: Pointer to save read value
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_read_byte_ex_raw(lwow_t* const ow, uint8_t* const br) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <lwow_read_byte_ex_raw+0x14>
 800a9b8:	2305      	movs	r3, #5
 800a9ba:	e00a      	b.n	800a9d2 <lwow_read_byte_ex_raw+0x2a>
    LWOW_ASSERT("br != NULL", br != NULL);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <lwow_read_byte_ex_raw+0x1e>
 800a9c2:	2305      	movs	r3, #5
 800a9c4:	e005      	b.n	800a9d2 <lwow_read_byte_ex_raw+0x2a>
     * When we want to read byte over 1-Wire,
     * we have to send all bits as 1 and check if slave pulls line down.
     *
     * According to slave reactions, we can later construct received bytes
     */
    return lwow_write_byte_ex_raw(ow, 0xFF, br);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	21ff      	movs	r1, #255	; 0xff
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff ff88 	bl	800a8e0 <lwow_write_byte_ex_raw>
 800a9d0:	4603      	mov	r3, r0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <lwow_read_bit_ex_raw>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[out]      br: Pointer to save read value, either `1` or `0`
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_read_bit_ex_raw(lwow_t* const ow, uint8_t* const br) {
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <lwow_read_bit_ex_raw+0x14>
 800a9ea:	2305      	movs	r3, #5
 800a9ec:	e00a      	b.n	800aa04 <lwow_read_bit_ex_raw+0x2a>
    LWOW_ASSERT("br != NULL", br != NULL);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <lwow_read_bit_ex_raw+0x1e>
 800a9f4:	2305      	movs	r3, #5
 800a9f6:	e005      	b.n	800aa04 <lwow_read_bit_ex_raw+0x2a>

    return prv_send_bit(ow, 1, br);             /* Send bit as `1` and read the response */
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff fe62 	bl	800a6c6 <prv_send_bit>
 800aa02:	4603      	mov	r3, r0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <lwow_search_reset_raw>:
 * \brief           Reset search
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_reset_raw(lwow_t* const ow) {
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <lwow_search_reset_raw+0x12>
 800aa1a:	2305      	movs	r3, #5
 800aa1c:	e003      	b.n	800aa26 <lwow_search_reset_raw+0x1a>

    ow->disrepancy = OW_FIRST_DEV;              /* Reset disrepancy to default value */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	22ff      	movs	r2, #255	; 0xff
 800aa22:	721a      	strb	r2, [r3, #8]
    return lwowOK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <lwow_search_with_command_raw>:
 * \param[in]       cmd: command to use for search operation
 * \param[out]      rom_id: Pointer to ROM structure to store address
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_with_command_raw(lwow_t* const ow, const uint8_t cmd, lwow_rom_t* const rom_id) {
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b088      	sub	sp, #32
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	72fb      	strb	r3, [r7, #11]
    lwowr_t res;
    uint8_t id_bit_number, next_disrepancy, *id;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <lwow_search_with_command_raw+0x18>
 800aa46:	2305      	movs	r3, #5
 800aa48:	e08f      	b.n	800ab6a <lwow_search_with_command_raw+0x138>
    LWOW_ASSERT("rom_id != NULL", rom_id != NULL);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <lwow_search_with_command_raw+0x22>
 800aa50:	2305      	movs	r3, #5
 800aa52:	e08a      	b.n	800ab6a <lwow_search_with_command_raw+0x138>

    id = ow->rom.rom;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	61bb      	str	r3, [r7, #24]

    /* Check for last device */
    if (ow->disrepancy == 0) {
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	7a1b      	ldrb	r3, [r3, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d104      	bne.n	800aa6a <lwow_search_with_command_raw+0x38>
        lwow_search_reset_raw(ow);              /* Reset search for next search */
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff ffd3 	bl	800aa0c <lwow_search_reset_raw>
        return lwowERRNODEV;                    /* No devices anymore */
 800aa66:	2302      	movs	r3, #2
 800aa68:	e07f      	b.n	800ab6a <lwow_search_with_command_raw+0x138>
    }

    /* Step 1: Reset all devices on 1-Wire line to be able to listen for new command */
    if ((res = lwow_reset_raw(ow)) != lwowOK) {
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7ff fef4 	bl	800a858 <lwow_reset_raw>
 800aa70:	4603      	mov	r3, r0
 800aa72:	75bb      	strb	r3, [r7, #22]
 800aa74:	7dbb      	ldrb	r3, [r7, #22]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <lwow_search_with_command_raw+0x4c>
        return res;
 800aa7a:	7dbb      	ldrb	r3, [r7, #22]
 800aa7c:	e075      	b.n	800ab6a <lwow_search_with_command_raw+0x138>
    }

    /* Step 2: Send search rom command for all devices on 1-Wire */
    lwow_write_byte_ex_raw(ow, cmd, NULL);      /* Start with search ROM command */
 800aa7e:	7afb      	ldrb	r3, [r7, #11]
 800aa80:	2200      	movs	r2, #0
 800aa82:	4619      	mov	r1, r3
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f7ff ff2b 	bl	800a8e0 <lwow_write_byte_ex_raw>
    next_disrepancy = OW_LAST_DEV;              /* This is currently last device */
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	77bb      	strb	r3, [r7, #30]

    for (id_bit_number = 64; id_bit_number > 0;) {
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e057      	b.n	800ab44 <lwow_search_with_command_raw+0x112>
        uint8_t b, b_cpl;
        for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 800aa94:	2308      	movs	r3, #8
 800aa96:	75fb      	strb	r3, [r7, #23]
 800aa98:	e04e      	b.n	800ab38 <lwow_search_with_command_raw+0x106>
            /* Read first bit and its complimentary one */
            if (prv_send_bit(ow, 1, &b) != lwowOK || prv_send_bit(ow, 1, &b_cpl) != lwowOK) {
 800aa9a:	f107 0315 	add.w	r3, r7, #21
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fe0f 	bl	800a6c6 <prv_send_bit>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d109      	bne.n	800aac2 <lwow_search_with_command_raw+0x90>
 800aaae:	f107 0314 	add.w	r3, r7, #20
 800aab2:	461a      	mov	r2, r3
 800aab4:	2101      	movs	r1, #1
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fe05 	bl	800a6c6 <prv_send_bit>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <lwow_search_with_command_raw+0x94>
                return lwowERRTXRX;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e051      	b.n	800ab6a <lwow_search_with_command_raw+0x138>
             *
             *  - Single device connected on 1-Wire or
             *  - All devices on 1-Wire have the same bit value at current position
             *      - In this case, we move to direction of b value
             */
            if (b && b_cpl) {
 800aac6:	7d7b      	ldrb	r3, [r7, #21]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <lwow_search_with_command_raw+0xa0>
 800aacc:	7d3b      	ldrb	r3, [r7, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d13c      	bne.n	800ab4c <lwow_search_with_command_raw+0x11a>
                goto out;                       /* We do not have device connected */
            } else if (!b && !b_cpl) {
 800aad2:	7d7b      	ldrb	r3, [r7, #21]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d116      	bne.n	800ab06 <lwow_search_with_command_raw+0xd4>
 800aad8:	7d3b      	ldrb	r3, [r7, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d113      	bne.n	800ab06 <lwow_search_with_command_raw+0xd4>
                 *  - Previous ROM address bit 0 was 1 and known diff is different than reading
                 *
                 * Because we shift *id variable down by 1 bit every iteration,
                 * *id & 0x01 always returns 1 if bit on previous ROM is the same as current bit
                 */
                if (id_bit_number < ow->disrepancy || ((*id & 0x01) && ow->disrepancy != id_bit_number)) {
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	7a1b      	ldrb	r3, [r3, #8]
 800aae2:	7ffa      	ldrb	r2, [r7, #31]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d30a      	bcc.n	800aafe <lwow_search_with_command_raw+0xcc>
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d008      	beq.n	800ab06 <lwow_search_with_command_raw+0xd4>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	7a1b      	ldrb	r3, [r3, #8]
 800aaf8:	7ffa      	ldrb	r2, [r7, #31]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d003      	beq.n	800ab06 <lwow_search_with_command_raw+0xd4>
                    b = 1;
 800aafe:	2301      	movs	r3, #1
 800ab00:	757b      	strb	r3, [r7, #21]
                    next_disrepancy = id_bit_number;
 800ab02:	7ffb      	ldrb	r3, [r7, #31]
 800ab04:	77bb      	strb	r3, [r7, #30]
             * will go to blocked state and will wait for next reset sequence
             *
             * In case of "collision", we decide here which devices we will
             * continue to scan (binary tree)
             */
            prv_send_bit(ow, b, NULL);
 800ab06:	7d7b      	ldrb	r3, [r7, #21]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff fdda 	bl	800a6c6 <prv_send_bit>

            /*
             * Because we shift down *id each iteration, we have to position bit value to the MSB position
             * and it will be automatically positioned correct way.
             */
            *id = (*id >> 0x01) | (b << 0x07);  /* Shift ROM byte down and add next, protocol is LSB first */
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	b25a      	sxtb	r2, r3
 800ab1c:	7d7b      	ldrb	r3, [r7, #21]
 800ab1e:	01db      	lsls	r3, r3, #7
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b25b      	sxtb	r3, r3
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	75fb      	strb	r3, [r7, #23]
 800ab32:	7ffb      	ldrb	r3, [r7, #31]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	77fb      	strb	r3, [r7, #31]
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1ad      	bne.n	800aa9a <lwow_search_with_command_raw+0x68>
        }
        ++id;                                   /* Go to next byte */
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	3301      	adds	r3, #1
 800ab42:	61bb      	str	r3, [r7, #24]
    for (id_bit_number = 64; id_bit_number > 0;) {
 800ab44:	7ffb      	ldrb	r3, [r7, #31]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1a4      	bne.n	800aa94 <lwow_search_with_command_raw+0x62>
    }
out:
 800ab4a:	bf00      	nop
    ow->disrepancy = next_disrepancy;           /* Save disrepancy value */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	7fba      	ldrb	r2, [r7, #30]
 800ab50:	721a      	strb	r2, [r3, #8]
    memcpy(rom_id->rom, ow->rom.rom, sizeof(ow->rom.rom));  /* Copy ROM to user memory */
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68f9      	ldr	r1, [r7, #12]
 800ab56:	2208      	movs	r2, #8
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fa79 	bl	800b050 <memcpy>
    return id_bit_number == 0 ? lwowOK : lwowERRNODEV;  /* Return search result status */
 800ab5e:	7ffb      	ldrb	r3, [r7, #31]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <lwow_search_with_command_raw+0x136>
 800ab64:	2300      	movs	r3, #0
 800ab66:	e000      	b.n	800ab6a <lwow_search_with_command_raw+0x138>
 800ab68:	2302      	movs	r3, #2
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <lwow_match_rom_raw>:
 * \param[in]       ow: 1-Wire handle
 * \param[in]       rom_id: 1-Wire device address to match device
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_match_rom_raw(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <lwow_match_rom_raw+0x14>
 800ab82:	2305      	movs	r3, #5
 800ab84:	e025      	b.n	800abd2 <lwow_match_rom_raw+0x60>
    LWOW_ASSERT("rom_id != NULL", rom_id != NULL);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <lwow_match_rom_raw+0x1e>
 800ab8c:	2305      	movs	r3, #5
 800ab8e:	e020      	b.n	800abd2 <lwow_match_rom_raw+0x60>

    /* Write byte to match rom exactly */
    if (lwow_write_byte_ex_raw(ow, LWOW_CMD_MATCHROM, NULL) != lwowOK) {
 800ab90:	2200      	movs	r2, #0
 800ab92:	2155      	movs	r1, #85	; 0x55
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff fea3 	bl	800a8e0 <lwow_write_byte_ex_raw>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <lwow_match_rom_raw+0x32>
        return lwowERR;
 800aba0:	2306      	movs	r3, #6
 800aba2:	e016      	b.n	800abd2 <lwow_match_rom_raw+0x60>
    }
    for (uint8_t i = 0; i < 8; ++i) {           /* Send 8 bytes representing ROM address */
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
 800aba8:	e00f      	b.n	800abca <lwow_match_rom_raw+0x58>
        if (lwow_write_byte_ex_raw(ow, rom_id->rom[i], NULL) != lwowOK) {   /* Send ROM bytes */
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	5cd3      	ldrb	r3, [r2, r3]
 800abb0:	2200      	movs	r2, #0
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fe93 	bl	800a8e0 <lwow_write_byte_ex_raw>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <lwow_match_rom_raw+0x52>
            return lwowERR;
 800abc0:	2306      	movs	r3, #6
 800abc2:	e006      	b.n	800abd2 <lwow_match_rom_raw+0x60>
    for (uint8_t i = 0; i < 8; ++i) {           /* Send 8 bytes representing ROM address */
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	3301      	adds	r3, #1
 800abc8:	73fb      	strb	r3, [r7, #15]
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b07      	cmp	r3, #7
 800abce:	d9ec      	bls.n	800abaa <lwow_match_rom_raw+0x38>
        }
    }

    return lwowOK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <lwow_skip_rom_raw>:
 * \brief           Skip ROM address and select all devices on the network
 * \param[in]       ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_skip_rom_raw(lwow_t* const ow) {
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <lwow_skip_rom_raw+0x12>
 800abe8:	2305      	movs	r3, #5
 800abea:	e005      	b.n	800abf8 <lwow_skip_rom_raw+0x1e>

    return lwow_write_byte_ex_raw(ow, LWOW_CMD_SKIPROM, NULL);
 800abec:	2200      	movs	r2, #0
 800abee:	21cc      	movs	r1, #204	; 0xcc
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff fe75 	bl	800a8e0 <lwow_write_byte_ex_raw>
 800abf6:	4603      	mov	r3, r0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <lwow_crc>:
 * \param[in]       len: Number of bytes
 * \return          Calculated CRC
 * \note            This function is reentrant
 */
uint8_t
lwow_crc(const void* in, const size_t len) {
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	75fb      	strb	r3, [r7, #23]
    const uint8_t* d = in;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	613b      	str	r3, [r7, #16]

    if (in == NULL || len == 0) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <lwow_crc+0x1e>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <lwow_crc+0x22>
        return 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e02e      	b.n	800ac80 <lwow_crc+0x80>
    }

    for (size_t i = 0; i < len; ++i, ++d) {
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	e026      	b.n	800ac76 <lwow_crc+0x76>
        uint8_t inbyte = *d;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	72fb      	strb	r3, [r7, #11]
        for (uint8_t j = 8; j > 0; --j) {
 800ac2e:	2308      	movs	r3, #8
 800ac30:	72bb      	strb	r3, [r7, #10]
 800ac32:	e017      	b.n	800ac64 <lwow_crc+0x64>
            uint8_t mix = (crc ^ inbyte) & 0x01;
 800ac34:	7dfa      	ldrb	r2, [r7, #23]
 800ac36:	7afb      	ldrb	r3, [r7, #11]
 800ac38:	4053      	eors	r3, r2
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	727b      	strb	r3, [r7, #9]
            crc >>= 1;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	085b      	lsrs	r3, r3, #1
 800ac46:	75fb      	strb	r3, [r7, #23]
            if (mix > 0) {
 800ac48:	7a7b      	ldrb	r3, [r7, #9]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <lwow_crc+0x58>
                crc ^= 0x8C;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800ac54:	43db      	mvns	r3, r3
 800ac56:	75fb      	strb	r3, [r7, #23]
            }
            inbyte >>= 0x01;
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	72fb      	strb	r3, [r7, #11]
        for (uint8_t j = 8; j > 0; --j) {
 800ac5e:	7abb      	ldrb	r3, [r7, #10]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	72bb      	strb	r3, [r7, #10]
 800ac64:	7abb      	ldrb	r3, [r7, #10]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e4      	bne.n	800ac34 <lwow_crc+0x34>
    for (size_t i = 0; i < len; ++i, ++d) {
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	3301      	adds	r3, #1
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d3d4      	bcc.n	800ac28 <lwow_crc+0x28>
        }
    }
    return crc;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	371c      	adds	r7, #28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <lwow_search_devices_with_command_raw>:
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_devices_with_command_raw(lwow_t* const ow, const uint8_t cmd, lwow_rom_t* const rom_id_arr,
                                   const size_t rom_len, size_t* const roms_found) {
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	72fb      	strb	r3, [r7, #11]
    lwowr_t res;
    size_t cnt = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	613b      	str	r3, [r7, #16]

    LWOW_ASSERT("ow != NULL", ow != NULL);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <lwow_search_devices_with_command_raw+0x1e>
 800aca6:	2305      	movs	r3, #5
 800aca8:	e037      	b.n	800ad1a <lwow_search_devices_with_command_raw+0x8e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <lwow_search_devices_with_command_raw+0x28>
 800acb0:	2305      	movs	r3, #5
 800acb2:	e032      	b.n	800ad1a <lwow_search_devices_with_command_raw+0x8e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <lwow_search_devices_with_command_raw+0x32>
 800acba:	2305      	movs	r3, #5
 800acbc:	e02d      	b.n	800ad1a <lwow_search_devices_with_command_raw+0x8e>

    for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff fea2 	bl	800aa0c <lwow_search_reset_raw>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]
 800accc:	e010      	b.n	800acf0 <lwow_search_devices_with_command_raw+0x64>
        if ((res = lwow_search_with_command_raw(ow, cmd, &rom_id_arr[cnt])) != lwowOK) {
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	441a      	add	r2, r3
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	4619      	mov	r1, r3
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7ff fea9 	bl	800aa32 <lwow_search_with_command_raw>
 800ace0:	4603      	mov	r3, r0
 800ace2:	75fb      	strb	r3, [r7, #23]
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d107      	bne.n	800acfa <lwow_search_devices_with_command_raw+0x6e>
    for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	3301      	adds	r3, #1
 800acee:	613b      	str	r3, [r7, #16]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3ea      	bcc.n	800acce <lwow_search_devices_with_command_raw+0x42>
 800acf8:	e000      	b.n	800acfc <lwow_search_devices_with_command_raw+0x70>
            break;
 800acfa:	bf00      	nop
        }
    }
    if (roms_found != NULL) {
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <lwow_search_devices_with_command_raw+0x7c>
        *roms_found = cnt;
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	601a      	str	r2, [r3, #0]
    }
    if (res == lwowERRNODEV && cnt > 0) {
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d104      	bne.n	800ad18 <lwow_search_devices_with_command_raw+0x8c>
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <lwow_search_devices_with_command_raw+0x8c>
        res = lwowOK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <lwow_search_devices_raw>:
 * \param[in]       rom_len: Length of input ROM array
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_devices_raw(lwow_t* const ow, lwow_rom_t* const rom_id_arr, const size_t rom_len, size_t* const roms_found) {
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af02      	add	r7, sp, #8
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	603b      	str	r3, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <lwow_search_devices_raw+0x18>
 800ad36:	2305      	movs	r3, #5
 800ad38:	e012      	b.n	800ad60 <lwow_search_devices_raw+0x3e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <lwow_search_devices_raw+0x22>
 800ad40:	2305      	movs	r3, #5
 800ad42:	e00d      	b.n	800ad60 <lwow_search_devices_raw+0x3e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <lwow_search_devices_raw+0x2c>
 800ad4a:	2305      	movs	r3, #5
 800ad4c:	e008      	b.n	800ad60 <lwow_search_devices_raw+0x3e>

    return lwow_search_devices_with_command_raw(ow, LWOW_CMD_SEARCHROM, rom_id_arr, rom_len, roms_found);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	21f0      	movs	r1, #240	; 0xf0
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7ff ff97 	bl	800ac8c <lwow_search_devices_with_command_raw>
 800ad5e:	4603      	mov	r3, r0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <lwow_search_devices>:
/**
 * \copydoc         lwow_search_devices_raw
 * \note            This function is thread-safe
 */
lwowr_t
lwow_search_devices(lwow_t* const ow, lwow_rom_t* const rom_id_arr, const size_t rom_len, size_t* const roms_found) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
    lwowr_t res;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <lwow_search_devices+0x18>
 800ad7c:	2305      	movs	r3, #5
 800ad7e:	e01a      	b.n	800adb6 <lwow_search_devices+0x4e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <lwow_search_devices+0x22>
 800ad86:	2305      	movs	r3, #5
 800ad88:	e015      	b.n	800adb6 <lwow_search_devices+0x4e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <lwow_search_devices+0x2c>
 800ad90:	2305      	movs	r3, #5
 800ad92:	e010      	b.n	800adb6 <lwow_search_devices+0x4e>

    lwow_protect(ow, 1);
 800ad94:	2101      	movs	r1, #1
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fd1c 	bl	800a7d4 <lwow_protect>
    res = lwow_search_devices_raw(ow, rom_id_arr, rom_len, roms_found);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff ffbd 	bl	800ad22 <lwow_search_devices_raw>
 800ada8:	4603      	mov	r3, r0
 800adaa:	75fb      	strb	r3, [r7, #23]
    lwow_unprotect(ow, 1);
 800adac:	2101      	movs	r1, #1
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff fd31 	bl	800a816 <lwow_unprotect>
    return res;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <init>:
    .set_baudrate = set_baudrate,
    .tx_rx = transmit_receive,
};

static uint8_t
init(void* arg) {
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef* huart = arg;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	60fb      	str	r3, [r7, #12]

    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <init+0x16>
 800add0:	2300      	movs	r3, #0
 800add2:	e00b      	b.n	800adec <init+0x2e>

    /* Initialize UART */
    HAL_UART_DeInit(huart);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7fa fac9 	bl	800536c <HAL_UART_DeInit>
    return HAL_UART_Init(huart) == HAL_OK;
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7fa fa78 	bl	80052d0 <HAL_UART_Init>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bf0c      	ite	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	2300      	movne	r3, #0
 800adea:	b2db      	uxtb	r3, r3
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <deinit>:

static uint8_t
deinit(void* arg) {
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef* huart = arg;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <deinit+0x16>
 800ae06:	2300      	movs	r3, #0
 800ae08:	e003      	b.n	800ae12 <deinit+0x1e>

    return HAL_UART_DeInit(huart);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7fa faae 	bl	800536c <HAL_UART_DeInit>
 800ae10:	4603      	mov	r3, r0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <set_baudrate>:

static uint8_t
set_baudrate(uint32_t baud, void* arg) {
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef* huart = arg;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	60fb      	str	r3, [r7, #12]

    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <set_baudrate+0x18>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e006      	b.n	800ae40 <set_baudrate+0x26>

    huart->Init.BaudRate = baud;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	605a      	str	r2, [r3, #4]
    return init(huart);
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7ff ffc0 	bl	800adbe <init>
 800ae3e:	4603      	mov	r3, r0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <transmit_receive>:

static uint8_t
transmit_receive(const uint8_t* tx, uint8_t* rx, size_t len, void* arg) {
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef* huart = arg;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	617b      	str	r3, [r7, #20]
    uint32_t start;

    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <transmit_receive+0x1c>
 800ae60:	2300      	movs	r3, #0
 800ae62:	e01f      	b.n	800aea4 <transmit_receive+0x5c>

    /* Get current HAL tick */
    start = HAL_GetTick();
 800ae64:	f7f6 ff62 	bl	8001d2c <HAL_GetTick>
 800ae68:	6138      	str	r0, [r7, #16]

    /* Start RX in interrupt mode */
    HAL_UART_Receive_IT(huart, rx, len);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	461a      	mov	r2, r3
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	6978      	ldr	r0, [r7, #20]
 800ae74:	f7fa fb42 	bl	80054fc <HAL_UART_Receive_IT>

    /* Process TX in polling mode */
    HAL_UART_Transmit(huart, (void*)tx, len, 100);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	2364      	movs	r3, #100	; 0x64
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	6978      	ldr	r0, [r7, #20]
 800ae82:	f7fa faa8 	bl	80053d6 <HAL_UART_Transmit>

    /* Wait RX to finish */
    while (huart->RxState != HAL_UART_STATE_READY) {
 800ae86:	e008      	b.n	800ae9a <transmit_receive+0x52>
        if (HAL_GetTick() - start > 100) {
 800ae88:	f7f6 ff50 	bl	8001d2c <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b64      	cmp	r3, #100	; 0x64
 800ae94:	d901      	bls.n	800ae9a <transmit_receive+0x52>
            return 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e004      	b.n	800aea4 <transmit_receive+0x5c>
    while (huart->RxState != HAL_UART_STATE_READY) {
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	d1f2      	bne.n	800ae88 <transmit_receive+0x40>
        }
    }

    return 1;
 800aea2:	2301      	movs	r3, #1
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <lwow_sys_mutex_create>:
#if LWOW_CFG_OS && !__DOXYGEN__

#include "cmsis_os.h"

uint8_t
lwow_sys_mutex_create(LWOW_CFG_OS_MUTEX_HANDLE* mutex, void* arg) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
    const osMutexAttr_t attr = {
 800aeb6:	f107 0308 	add.w	r3, r7, #8
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	605a      	str	r2, [r3, #4]
 800aec0:	609a      	str	r2, [r3, #8]
 800aec2:	60da      	str	r2, [r3, #12]
 800aec4:	2301      	movs	r3, #1
 800aec6:	60fb      	str	r3, [r7, #12]
        .attr_bits = osMutexRecursive
    };

    *mutex = osMutexNew(&attr);                 /* Create new mutex */
 800aec8:	f107 0308 	add.w	r3, r7, #8
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fb fc85 	bl	80067dc <osMutexNew>
 800aed2:	4602      	mov	r2, r0
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	601a      	str	r2, [r3, #0]
    LWOW_UNUSED(arg);
    return 1;
 800aed8:	2301      	movs	r3, #1
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <lwow_sys_mutex_wait>:
    osMutexDelete(*mutex);                      /* Delete mutex */
    return 1;
}

uint8_t
lwow_sys_mutex_wait(LWOW_CFG_OS_MUTEX_HANDLE* mutex, void* arg) {
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
    if (osMutexAcquire(*mutex, osWaitForever) != osOK) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f04f 31ff 	mov.w	r1, #4294967295
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fb fd0b 	bl	8006910 <osMutexAcquire>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <lwow_sys_mutex_wait+0x22>
        return 0;
 800af00:	2300      	movs	r3, #0
 800af02:	e000      	b.n	800af06 <lwow_sys_mutex_wait+0x24>
    }
    LWOW_UNUSED(arg);
    return 1;
 800af04:	2301      	movs	r3, #1
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <lwow_sys_mutex_release>:

uint8_t
lwow_sys_mutex_release(LWOW_CFG_OS_MUTEX_HANDLE* mutex, void* arg) {
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
    if (osMutexRelease(*mutex) != osOK) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fb fd55 	bl	80069cc <osMutexRelease>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <lwow_sys_mutex_release+0x1e>
        return 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	e000      	b.n	800af2e <lwow_sys_mutex_release+0x20>
    }
    LWOW_UNUSED(arg);
    return 1;
 800af2c:	2301      	movs	r3, #1
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <scan_onewire_devices>:
 * \param[in]       rom_ids: pointer to array of \ref lwow_rom_t structures
 * \param[in]       rtf: Number of roms to find
 * \param[out]      rf: Number of roms found after scan
 */
lwowr_t
scan_onewire_devices(lwow_t* ow, lwow_rom_t* rom_ids, size_t rtf, size_t* rf) {
 800af38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af3a:	b08f      	sub	sp, #60	; 0x3c
 800af3c:	af06      	add	r7, sp, #24
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
    lwowr_t res;
    size_t found;

    /* Search for devices and save it to array */
    res = lwow_search_devices(ow, rom_ids, rtf, &found);
 800af46:	f107 0314 	add.w	r3, r7, #20
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff ff0a 	bl	800ad68 <lwow_search_devices>
 800af54:	4603      	mov	r3, r0
 800af56:	76fb      	strb	r3, [r7, #27]

    /* Print all devices */
    for (size_t i = 0; i < found; ++i) {
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]
 800af5c:	e03c      	b.n	800afd8 <scan_onewire_devices+0xa0>
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	4413      	add	r3, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af68:	461e      	mov	r6, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	4413      	add	r3, r2
 800af72:	785b      	ldrb	r3, [r3, #1]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af74:	469c      	mov	ip, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	4413      	add	r3, r2
 800af7e:	789b      	ldrb	r3, [r3, #2]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af80:	469e      	mov	lr, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	4413      	add	r3, r2
 800af8a:	78db      	ldrb	r3, [r3, #3]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af8c:	4619      	mov	r1, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	4413      	add	r3, r2
 800af96:	791b      	ldrb	r3, [r3, #4]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800af98:	4618      	mov	r0, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	00db      	lsls	r3, r3, #3
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4413      	add	r3, r2
 800afa2:	795b      	ldrb	r3, [r3, #5]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800afa4:	461c      	mov	r4, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	4413      	add	r3, r2
 800afae:	799b      	ldrb	r3, [r3, #6]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800afb0:	461d      	mov	r5, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	4413      	add	r3, r2
 800afba:	79db      	ldrb	r3, [r3, #7]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	9503      	str	r5, [sp, #12]
 800afc0:	9402      	str	r4, [sp, #8]
 800afc2:	9001      	str	r0, [sp, #4]
 800afc4:	9100      	str	r1, [sp, #0]
 800afc6:	4673      	mov	r3, lr
 800afc8:	4662      	mov	r2, ip
 800afca:	4631      	mov	r1, r6
 800afcc:	480a      	ldr	r0, [pc, #40]	; (800aff8 <scan_onewire_devices+0xc0>)
 800afce:	f000 f853 	bl	800b078 <iprintf>
    for (size_t i = 0; i < found; ++i) {
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3be      	bcc.n	800af5e <scan_onewire_devices+0x26>
        );
    }
    if (rf != NULL) {
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <scan_onewire_devices+0xb4>
    	*rf = found;
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]
    }
    return res;
 800afec:	7efb      	ldrb	r3, [r7, #27]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3724      	adds	r7, #36	; 0x24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff6:	bf00      	nop
 800aff8:	0800c184 	.word	0x0800c184

0800affc <__errno>:
 800affc:	4b01      	ldr	r3, [pc, #4]	; (800b004 <__errno+0x8>)
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	2000090c 	.word	0x2000090c

0800b008 <__libc_init_array>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	4e0d      	ldr	r6, [pc, #52]	; (800b040 <__libc_init_array+0x38>)
 800b00c:	4c0d      	ldr	r4, [pc, #52]	; (800b044 <__libc_init_array+0x3c>)
 800b00e:	1ba4      	subs	r4, r4, r6
 800b010:	10a4      	asrs	r4, r4, #2
 800b012:	2500      	movs	r5, #0
 800b014:	42a5      	cmp	r5, r4
 800b016:	d109      	bne.n	800b02c <__libc_init_array+0x24>
 800b018:	4e0b      	ldr	r6, [pc, #44]	; (800b048 <__libc_init_array+0x40>)
 800b01a:	4c0c      	ldr	r4, [pc, #48]	; (800b04c <__libc_init_array+0x44>)
 800b01c:	f000 ff74 	bl	800bf08 <_init>
 800b020:	1ba4      	subs	r4, r4, r6
 800b022:	10a4      	asrs	r4, r4, #2
 800b024:	2500      	movs	r5, #0
 800b026:	42a5      	cmp	r5, r4
 800b028:	d105      	bne.n	800b036 <__libc_init_array+0x2e>
 800b02a:	bd70      	pop	{r4, r5, r6, pc}
 800b02c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b030:	4798      	blx	r3
 800b032:	3501      	adds	r5, #1
 800b034:	e7ee      	b.n	800b014 <__libc_init_array+0xc>
 800b036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b03a:	4798      	blx	r3
 800b03c:	3501      	adds	r5, #1
 800b03e:	e7f2      	b.n	800b026 <__libc_init_array+0x1e>
 800b040:	0800c3c0 	.word	0x0800c3c0
 800b044:	0800c3c0 	.word	0x0800c3c0
 800b048:	0800c3c0 	.word	0x0800c3c0
 800b04c:	0800c3c4 	.word	0x0800c3c4

0800b050 <memcpy>:
 800b050:	b510      	push	{r4, lr}
 800b052:	1e43      	subs	r3, r0, #1
 800b054:	440a      	add	r2, r1
 800b056:	4291      	cmp	r1, r2
 800b058:	d100      	bne.n	800b05c <memcpy+0xc>
 800b05a:	bd10      	pop	{r4, pc}
 800b05c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b060:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b064:	e7f7      	b.n	800b056 <memcpy+0x6>

0800b066 <memset>:
 800b066:	4402      	add	r2, r0
 800b068:	4603      	mov	r3, r0
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d100      	bne.n	800b070 <memset+0xa>
 800b06e:	4770      	bx	lr
 800b070:	f803 1b01 	strb.w	r1, [r3], #1
 800b074:	e7f9      	b.n	800b06a <memset+0x4>
	...

0800b078 <iprintf>:
 800b078:	b40f      	push	{r0, r1, r2, r3}
 800b07a:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <iprintf+0x2c>)
 800b07c:	b513      	push	{r0, r1, r4, lr}
 800b07e:	681c      	ldr	r4, [r3, #0]
 800b080:	b124      	cbz	r4, 800b08c <iprintf+0x14>
 800b082:	69a3      	ldr	r3, [r4, #24]
 800b084:	b913      	cbnz	r3, 800b08c <iprintf+0x14>
 800b086:	4620      	mov	r0, r4
 800b088:	f000 fa22 	bl	800b4d0 <__sinit>
 800b08c:	ab05      	add	r3, sp, #20
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fbdb 	bl	800b850 <_vfiprintf_r>
 800b09a:	b002      	add	sp, #8
 800b09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a0:	b004      	add	sp, #16
 800b0a2:	4770      	bx	lr
 800b0a4:	2000090c 	.word	0x2000090c

0800b0a8 <_puts_r>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	460e      	mov	r6, r1
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b118      	cbz	r0, 800b0b8 <_puts_r+0x10>
 800b0b0:	6983      	ldr	r3, [r0, #24]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <_puts_r+0x10>
 800b0b4:	f000 fa0c 	bl	800b4d0 <__sinit>
 800b0b8:	69ab      	ldr	r3, [r5, #24]
 800b0ba:	68ac      	ldr	r4, [r5, #8]
 800b0bc:	b913      	cbnz	r3, 800b0c4 <_puts_r+0x1c>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 fa06 	bl	800b4d0 <__sinit>
 800b0c4:	4b23      	ldr	r3, [pc, #140]	; (800b154 <_puts_r+0xac>)
 800b0c6:	429c      	cmp	r4, r3
 800b0c8:	d117      	bne.n	800b0fa <_puts_r+0x52>
 800b0ca:	686c      	ldr	r4, [r5, #4]
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	071b      	lsls	r3, r3, #28
 800b0d0:	d51d      	bpl.n	800b10e <_puts_r+0x66>
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	b1db      	cbz	r3, 800b10e <_puts_r+0x66>
 800b0d6:	3e01      	subs	r6, #1
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	60a3      	str	r3, [r4, #8]
 800b0e2:	b9e9      	cbnz	r1, 800b120 <_puts_r+0x78>
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	da2e      	bge.n	800b146 <_puts_r+0x9e>
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	210a      	movs	r1, #10
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 f83f 	bl	800b170 <__swbuf_r>
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d011      	beq.n	800b11a <_puts_r+0x72>
 800b0f6:	200a      	movs	r0, #10
 800b0f8:	e011      	b.n	800b11e <_puts_r+0x76>
 800b0fa:	4b17      	ldr	r3, [pc, #92]	; (800b158 <_puts_r+0xb0>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d101      	bne.n	800b104 <_puts_r+0x5c>
 800b100:	68ac      	ldr	r4, [r5, #8]
 800b102:	e7e3      	b.n	800b0cc <_puts_r+0x24>
 800b104:	4b15      	ldr	r3, [pc, #84]	; (800b15c <_puts_r+0xb4>)
 800b106:	429c      	cmp	r4, r3
 800b108:	bf08      	it	eq
 800b10a:	68ec      	ldreq	r4, [r5, #12]
 800b10c:	e7de      	b.n	800b0cc <_puts_r+0x24>
 800b10e:	4621      	mov	r1, r4
 800b110:	4628      	mov	r0, r5
 800b112:	f000 f87f 	bl	800b214 <__swsetup_r>
 800b116:	2800      	cmp	r0, #0
 800b118:	d0dd      	beq.n	800b0d6 <_puts_r+0x2e>
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295
 800b11e:	bd70      	pop	{r4, r5, r6, pc}
 800b120:	2b00      	cmp	r3, #0
 800b122:	da04      	bge.n	800b12e <_puts_r+0x86>
 800b124:	69a2      	ldr	r2, [r4, #24]
 800b126:	429a      	cmp	r2, r3
 800b128:	dc06      	bgt.n	800b138 <_puts_r+0x90>
 800b12a:	290a      	cmp	r1, #10
 800b12c:	d004      	beq.n	800b138 <_puts_r+0x90>
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	7019      	strb	r1, [r3, #0]
 800b136:	e7cf      	b.n	800b0d8 <_puts_r+0x30>
 800b138:	4622      	mov	r2, r4
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 f818 	bl	800b170 <__swbuf_r>
 800b140:	3001      	adds	r0, #1
 800b142:	d1c9      	bne.n	800b0d8 <_puts_r+0x30>
 800b144:	e7e9      	b.n	800b11a <_puts_r+0x72>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	200a      	movs	r0, #10
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	7018      	strb	r0, [r3, #0]
 800b150:	e7e5      	b.n	800b11e <_puts_r+0x76>
 800b152:	bf00      	nop
 800b154:	0800c344 	.word	0x0800c344
 800b158:	0800c364 	.word	0x0800c364
 800b15c:	0800c324 	.word	0x0800c324

0800b160 <puts>:
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <puts+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f7ff bf9f 	b.w	800b0a8 <_puts_r>
 800b16a:	bf00      	nop
 800b16c:	2000090c 	.word	0x2000090c

0800b170 <__swbuf_r>:
 800b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b172:	460e      	mov	r6, r1
 800b174:	4614      	mov	r4, r2
 800b176:	4605      	mov	r5, r0
 800b178:	b118      	cbz	r0, 800b182 <__swbuf_r+0x12>
 800b17a:	6983      	ldr	r3, [r0, #24]
 800b17c:	b90b      	cbnz	r3, 800b182 <__swbuf_r+0x12>
 800b17e:	f000 f9a7 	bl	800b4d0 <__sinit>
 800b182:	4b21      	ldr	r3, [pc, #132]	; (800b208 <__swbuf_r+0x98>)
 800b184:	429c      	cmp	r4, r3
 800b186:	d12a      	bne.n	800b1de <__swbuf_r+0x6e>
 800b188:	686c      	ldr	r4, [r5, #4]
 800b18a:	69a3      	ldr	r3, [r4, #24]
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	071a      	lsls	r2, r3, #28
 800b192:	d52e      	bpl.n	800b1f2 <__swbuf_r+0x82>
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	b363      	cbz	r3, 800b1f2 <__swbuf_r+0x82>
 800b198:	6923      	ldr	r3, [r4, #16]
 800b19a:	6820      	ldr	r0, [r4, #0]
 800b19c:	1ac0      	subs	r0, r0, r3
 800b19e:	6963      	ldr	r3, [r4, #20]
 800b1a0:	b2f6      	uxtb	r6, r6
 800b1a2:	4283      	cmp	r3, r0
 800b1a4:	4637      	mov	r7, r6
 800b1a6:	dc04      	bgt.n	800b1b2 <__swbuf_r+0x42>
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f000 f926 	bl	800b3fc <_fflush_r>
 800b1b0:	bb28      	cbnz	r0, 800b1fe <__swbuf_r+0x8e>
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	60a3      	str	r3, [r4, #8]
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	701e      	strb	r6, [r3, #0]
 800b1c0:	6963      	ldr	r3, [r4, #20]
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	4283      	cmp	r3, r0
 800b1c6:	d004      	beq.n	800b1d2 <__swbuf_r+0x62>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	07db      	lsls	r3, r3, #31
 800b1cc:	d519      	bpl.n	800b202 <__swbuf_r+0x92>
 800b1ce:	2e0a      	cmp	r6, #10
 800b1d0:	d117      	bne.n	800b202 <__swbuf_r+0x92>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f000 f911 	bl	800b3fc <_fflush_r>
 800b1da:	b190      	cbz	r0, 800b202 <__swbuf_r+0x92>
 800b1dc:	e00f      	b.n	800b1fe <__swbuf_r+0x8e>
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <__swbuf_r+0x9c>)
 800b1e0:	429c      	cmp	r4, r3
 800b1e2:	d101      	bne.n	800b1e8 <__swbuf_r+0x78>
 800b1e4:	68ac      	ldr	r4, [r5, #8]
 800b1e6:	e7d0      	b.n	800b18a <__swbuf_r+0x1a>
 800b1e8:	4b09      	ldr	r3, [pc, #36]	; (800b210 <__swbuf_r+0xa0>)
 800b1ea:	429c      	cmp	r4, r3
 800b1ec:	bf08      	it	eq
 800b1ee:	68ec      	ldreq	r4, [r5, #12]
 800b1f0:	e7cb      	b.n	800b18a <__swbuf_r+0x1a>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f80d 	bl	800b214 <__swsetup_r>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d0cc      	beq.n	800b198 <__swbuf_r+0x28>
 800b1fe:	f04f 37ff 	mov.w	r7, #4294967295
 800b202:	4638      	mov	r0, r7
 800b204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b206:	bf00      	nop
 800b208:	0800c344 	.word	0x0800c344
 800b20c:	0800c364 	.word	0x0800c364
 800b210:	0800c324 	.word	0x0800c324

0800b214 <__swsetup_r>:
 800b214:	4b32      	ldr	r3, [pc, #200]	; (800b2e0 <__swsetup_r+0xcc>)
 800b216:	b570      	push	{r4, r5, r6, lr}
 800b218:	681d      	ldr	r5, [r3, #0]
 800b21a:	4606      	mov	r6, r0
 800b21c:	460c      	mov	r4, r1
 800b21e:	b125      	cbz	r5, 800b22a <__swsetup_r+0x16>
 800b220:	69ab      	ldr	r3, [r5, #24]
 800b222:	b913      	cbnz	r3, 800b22a <__swsetup_r+0x16>
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f953 	bl	800b4d0 <__sinit>
 800b22a:	4b2e      	ldr	r3, [pc, #184]	; (800b2e4 <__swsetup_r+0xd0>)
 800b22c:	429c      	cmp	r4, r3
 800b22e:	d10f      	bne.n	800b250 <__swsetup_r+0x3c>
 800b230:	686c      	ldr	r4, [r5, #4]
 800b232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b236:	b29a      	uxth	r2, r3
 800b238:	0715      	lsls	r5, r2, #28
 800b23a:	d42c      	bmi.n	800b296 <__swsetup_r+0x82>
 800b23c:	06d0      	lsls	r0, r2, #27
 800b23e:	d411      	bmi.n	800b264 <__swsetup_r+0x50>
 800b240:	2209      	movs	r2, #9
 800b242:	6032      	str	r2, [r6, #0]
 800b244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b248:	81a3      	strh	r3, [r4, #12]
 800b24a:	f04f 30ff 	mov.w	r0, #4294967295
 800b24e:	e03e      	b.n	800b2ce <__swsetup_r+0xba>
 800b250:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <__swsetup_r+0xd4>)
 800b252:	429c      	cmp	r4, r3
 800b254:	d101      	bne.n	800b25a <__swsetup_r+0x46>
 800b256:	68ac      	ldr	r4, [r5, #8]
 800b258:	e7eb      	b.n	800b232 <__swsetup_r+0x1e>
 800b25a:	4b24      	ldr	r3, [pc, #144]	; (800b2ec <__swsetup_r+0xd8>)
 800b25c:	429c      	cmp	r4, r3
 800b25e:	bf08      	it	eq
 800b260:	68ec      	ldreq	r4, [r5, #12]
 800b262:	e7e6      	b.n	800b232 <__swsetup_r+0x1e>
 800b264:	0751      	lsls	r1, r2, #29
 800b266:	d512      	bpl.n	800b28e <__swsetup_r+0x7a>
 800b268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b26a:	b141      	cbz	r1, 800b27e <__swsetup_r+0x6a>
 800b26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b270:	4299      	cmp	r1, r3
 800b272:	d002      	beq.n	800b27a <__swsetup_r+0x66>
 800b274:	4630      	mov	r0, r6
 800b276:	f000 fa19 	bl	800b6ac <_free_r>
 800b27a:	2300      	movs	r3, #0
 800b27c:	6363      	str	r3, [r4, #52]	; 0x34
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	2300      	movs	r3, #0
 800b288:	6063      	str	r3, [r4, #4]
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	f043 0308 	orr.w	r3, r3, #8
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	b94b      	cbnz	r3, 800b2ae <__swsetup_r+0x9a>
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2a4:	d003      	beq.n	800b2ae <__swsetup_r+0x9a>
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f000 f9bf 	bl	800b62c <__smakebuf_r>
 800b2ae:	89a2      	ldrh	r2, [r4, #12]
 800b2b0:	f012 0301 	ands.w	r3, r2, #1
 800b2b4:	d00c      	beq.n	800b2d0 <__swsetup_r+0xbc>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60a3      	str	r3, [r4, #8]
 800b2ba:	6963      	ldr	r3, [r4, #20]
 800b2bc:	425b      	negs	r3, r3
 800b2be:	61a3      	str	r3, [r4, #24]
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	b953      	cbnz	r3, 800b2da <__swsetup_r+0xc6>
 800b2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b2cc:	d1ba      	bne.n	800b244 <__swsetup_r+0x30>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	0792      	lsls	r2, r2, #30
 800b2d2:	bf58      	it	pl
 800b2d4:	6963      	ldrpl	r3, [r4, #20]
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	e7f2      	b.n	800b2c0 <__swsetup_r+0xac>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7f7      	b.n	800b2ce <__swsetup_r+0xba>
 800b2de:	bf00      	nop
 800b2e0:	2000090c 	.word	0x2000090c
 800b2e4:	0800c344 	.word	0x0800c344
 800b2e8:	0800c364 	.word	0x0800c364
 800b2ec:	0800c324 	.word	0x0800c324

0800b2f0 <__sflush_r>:
 800b2f0:	898a      	ldrh	r2, [r1, #12]
 800b2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	0710      	lsls	r0, r2, #28
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	d458      	bmi.n	800b3b0 <__sflush_r+0xc0>
 800b2fe:	684b      	ldr	r3, [r1, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc05      	bgt.n	800b310 <__sflush_r+0x20>
 800b304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc02      	bgt.n	800b310 <__sflush_r+0x20>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b312:	2e00      	cmp	r6, #0
 800b314:	d0f9      	beq.n	800b30a <__sflush_r+0x1a>
 800b316:	2300      	movs	r3, #0
 800b318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b31c:	682f      	ldr	r7, [r5, #0]
 800b31e:	6a21      	ldr	r1, [r4, #32]
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	d032      	beq.n	800b38a <__sflush_r+0x9a>
 800b324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	075a      	lsls	r2, r3, #29
 800b32a:	d505      	bpl.n	800b338 <__sflush_r+0x48>
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	1ac0      	subs	r0, r0, r3
 800b330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b332:	b10b      	cbz	r3, 800b338 <__sflush_r+0x48>
 800b334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b336:	1ac0      	subs	r0, r0, r3
 800b338:	2300      	movs	r3, #0
 800b33a:	4602      	mov	r2, r0
 800b33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b33e:	6a21      	ldr	r1, [r4, #32]
 800b340:	4628      	mov	r0, r5
 800b342:	47b0      	blx	r6
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	d106      	bne.n	800b358 <__sflush_r+0x68>
 800b34a:	6829      	ldr	r1, [r5, #0]
 800b34c:	291d      	cmp	r1, #29
 800b34e:	d848      	bhi.n	800b3e2 <__sflush_r+0xf2>
 800b350:	4a29      	ldr	r2, [pc, #164]	; (800b3f8 <__sflush_r+0x108>)
 800b352:	40ca      	lsrs	r2, r1
 800b354:	07d6      	lsls	r6, r2, #31
 800b356:	d544      	bpl.n	800b3e2 <__sflush_r+0xf2>
 800b358:	2200      	movs	r2, #0
 800b35a:	6062      	str	r2, [r4, #4]
 800b35c:	04d9      	lsls	r1, r3, #19
 800b35e:	6922      	ldr	r2, [r4, #16]
 800b360:	6022      	str	r2, [r4, #0]
 800b362:	d504      	bpl.n	800b36e <__sflush_r+0x7e>
 800b364:	1c42      	adds	r2, r0, #1
 800b366:	d101      	bne.n	800b36c <__sflush_r+0x7c>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b903      	cbnz	r3, 800b36e <__sflush_r+0x7e>
 800b36c:	6560      	str	r0, [r4, #84]	; 0x54
 800b36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b370:	602f      	str	r7, [r5, #0]
 800b372:	2900      	cmp	r1, #0
 800b374:	d0c9      	beq.n	800b30a <__sflush_r+0x1a>
 800b376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b37a:	4299      	cmp	r1, r3
 800b37c:	d002      	beq.n	800b384 <__sflush_r+0x94>
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 f994 	bl	800b6ac <_free_r>
 800b384:	2000      	movs	r0, #0
 800b386:	6360      	str	r0, [r4, #52]	; 0x34
 800b388:	e7c0      	b.n	800b30c <__sflush_r+0x1c>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b0      	blx	r6
 800b390:	1c41      	adds	r1, r0, #1
 800b392:	d1c8      	bne.n	800b326 <__sflush_r+0x36>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0c5      	beq.n	800b326 <__sflush_r+0x36>
 800b39a:	2b1d      	cmp	r3, #29
 800b39c:	d001      	beq.n	800b3a2 <__sflush_r+0xb2>
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d101      	bne.n	800b3a6 <__sflush_r+0xb6>
 800b3a2:	602f      	str	r7, [r5, #0]
 800b3a4:	e7b1      	b.n	800b30a <__sflush_r+0x1a>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	e7ad      	b.n	800b30c <__sflush_r+0x1c>
 800b3b0:	690f      	ldr	r7, [r1, #16]
 800b3b2:	2f00      	cmp	r7, #0
 800b3b4:	d0a9      	beq.n	800b30a <__sflush_r+0x1a>
 800b3b6:	0793      	lsls	r3, r2, #30
 800b3b8:	680e      	ldr	r6, [r1, #0]
 800b3ba:	bf08      	it	eq
 800b3bc:	694b      	ldreq	r3, [r1, #20]
 800b3be:	600f      	str	r7, [r1, #0]
 800b3c0:	bf18      	it	ne
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	eba6 0807 	sub.w	r8, r6, r7
 800b3c8:	608b      	str	r3, [r1, #8]
 800b3ca:	f1b8 0f00 	cmp.w	r8, #0
 800b3ce:	dd9c      	ble.n	800b30a <__sflush_r+0x1a>
 800b3d0:	4643      	mov	r3, r8
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	6a21      	ldr	r1, [r4, #32]
 800b3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3d8:	4628      	mov	r0, r5
 800b3da:	47b0      	blx	r6
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dc06      	bgt.n	800b3ee <__sflush_r+0xfe>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	e78e      	b.n	800b30c <__sflush_r+0x1c>
 800b3ee:	4407      	add	r7, r0
 800b3f0:	eba8 0800 	sub.w	r8, r8, r0
 800b3f4:	e7e9      	b.n	800b3ca <__sflush_r+0xda>
 800b3f6:	bf00      	nop
 800b3f8:	20400001 	.word	0x20400001

0800b3fc <_fflush_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b1db      	cbz	r3, 800b43e <_fflush_r+0x42>
 800b406:	b118      	cbz	r0, 800b410 <_fflush_r+0x14>
 800b408:	6983      	ldr	r3, [r0, #24]
 800b40a:	b90b      	cbnz	r3, 800b410 <_fflush_r+0x14>
 800b40c:	f000 f860 	bl	800b4d0 <__sinit>
 800b410:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <_fflush_r+0x48>)
 800b412:	429c      	cmp	r4, r3
 800b414:	d109      	bne.n	800b42a <_fflush_r+0x2e>
 800b416:	686c      	ldr	r4, [r5, #4]
 800b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41c:	b17b      	cbz	r3, 800b43e <_fflush_r+0x42>
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b426:	f7ff bf63 	b.w	800b2f0 <__sflush_r>
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <_fflush_r+0x4c>)
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d101      	bne.n	800b434 <_fflush_r+0x38>
 800b430:	68ac      	ldr	r4, [r5, #8]
 800b432:	e7f1      	b.n	800b418 <_fflush_r+0x1c>
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <_fflush_r+0x50>)
 800b436:	429c      	cmp	r4, r3
 800b438:	bf08      	it	eq
 800b43a:	68ec      	ldreq	r4, [r5, #12]
 800b43c:	e7ec      	b.n	800b418 <_fflush_r+0x1c>
 800b43e:	2000      	movs	r0, #0
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	bf00      	nop
 800b444:	0800c344 	.word	0x0800c344
 800b448:	0800c364 	.word	0x0800c364
 800b44c:	0800c324 	.word	0x0800c324

0800b450 <std>:
 800b450:	2300      	movs	r3, #0
 800b452:	b510      	push	{r4, lr}
 800b454:	4604      	mov	r4, r0
 800b456:	e9c0 3300 	strd	r3, r3, [r0]
 800b45a:	6083      	str	r3, [r0, #8]
 800b45c:	8181      	strh	r1, [r0, #12]
 800b45e:	6643      	str	r3, [r0, #100]	; 0x64
 800b460:	81c2      	strh	r2, [r0, #14]
 800b462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b466:	6183      	str	r3, [r0, #24]
 800b468:	4619      	mov	r1, r3
 800b46a:	2208      	movs	r2, #8
 800b46c:	305c      	adds	r0, #92	; 0x5c
 800b46e:	f7ff fdfa 	bl	800b066 <memset>
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <std+0x38>)
 800b474:	6263      	str	r3, [r4, #36]	; 0x24
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x3c>)
 800b478:	62a3      	str	r3, [r4, #40]	; 0x28
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <std+0x40>)
 800b47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <std+0x44>)
 800b480:	6224      	str	r4, [r4, #32]
 800b482:	6323      	str	r3, [r4, #48]	; 0x30
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	0800bdad 	.word	0x0800bdad
 800b48c:	0800bdcf 	.word	0x0800bdcf
 800b490:	0800be07 	.word	0x0800be07
 800b494:	0800be2b 	.word	0x0800be2b

0800b498 <_cleanup_r>:
 800b498:	4901      	ldr	r1, [pc, #4]	; (800b4a0 <_cleanup_r+0x8>)
 800b49a:	f000 b885 	b.w	800b5a8 <_fwalk_reent>
 800b49e:	bf00      	nop
 800b4a0:	0800b3fd 	.word	0x0800b3fd

0800b4a4 <__sfmoreglue>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	1e4a      	subs	r2, r1, #1
 800b4a8:	2568      	movs	r5, #104	; 0x68
 800b4aa:	4355      	muls	r5, r2
 800b4ac:	460e      	mov	r6, r1
 800b4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4b2:	f000 f949 	bl	800b748 <_malloc_r>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	b140      	cbz	r0, 800b4cc <__sfmoreglue+0x28>
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b4c0:	300c      	adds	r0, #12
 800b4c2:	60a0      	str	r0, [r4, #8]
 800b4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4c8:	f7ff fdcd 	bl	800b066 <memset>
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}

0800b4d0 <__sinit>:
 800b4d0:	6983      	ldr	r3, [r0, #24]
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	bb33      	cbnz	r3, 800b526 <__sinit+0x56>
 800b4d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b4dc:	6503      	str	r3, [r0, #80]	; 0x50
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <__sinit+0x58>)
 800b4e0:	4a12      	ldr	r2, [pc, #72]	; (800b52c <__sinit+0x5c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6282      	str	r2, [r0, #40]	; 0x28
 800b4e6:	4298      	cmp	r0, r3
 800b4e8:	bf04      	itt	eq
 800b4ea:	2301      	moveq	r3, #1
 800b4ec:	6183      	streq	r3, [r0, #24]
 800b4ee:	f000 f81f 	bl	800b530 <__sfp>
 800b4f2:	6060      	str	r0, [r4, #4]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 f81b 	bl	800b530 <__sfp>
 800b4fa:	60a0      	str	r0, [r4, #8]
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 f817 	bl	800b530 <__sfp>
 800b502:	2200      	movs	r2, #0
 800b504:	60e0      	str	r0, [r4, #12]
 800b506:	2104      	movs	r1, #4
 800b508:	6860      	ldr	r0, [r4, #4]
 800b50a:	f7ff ffa1 	bl	800b450 <std>
 800b50e:	2201      	movs	r2, #1
 800b510:	2109      	movs	r1, #9
 800b512:	68a0      	ldr	r0, [r4, #8]
 800b514:	f7ff ff9c 	bl	800b450 <std>
 800b518:	2202      	movs	r2, #2
 800b51a:	2112      	movs	r1, #18
 800b51c:	68e0      	ldr	r0, [r4, #12]
 800b51e:	f7ff ff97 	bl	800b450 <std>
 800b522:	2301      	movs	r3, #1
 800b524:	61a3      	str	r3, [r4, #24]
 800b526:	bd10      	pop	{r4, pc}
 800b528:	0800c320 	.word	0x0800c320
 800b52c:	0800b499 	.word	0x0800b499

0800b530 <__sfp>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <__sfp+0x70>)
 800b534:	681e      	ldr	r6, [r3, #0]
 800b536:	69b3      	ldr	r3, [r6, #24]
 800b538:	4607      	mov	r7, r0
 800b53a:	b913      	cbnz	r3, 800b542 <__sfp+0x12>
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff ffc7 	bl	800b4d0 <__sinit>
 800b542:	3648      	adds	r6, #72	; 0x48
 800b544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b548:	3b01      	subs	r3, #1
 800b54a:	d503      	bpl.n	800b554 <__sfp+0x24>
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	b133      	cbz	r3, 800b55e <__sfp+0x2e>
 800b550:	6836      	ldr	r6, [r6, #0]
 800b552:	e7f7      	b.n	800b544 <__sfp+0x14>
 800b554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b558:	b16d      	cbz	r5, 800b576 <__sfp+0x46>
 800b55a:	3468      	adds	r4, #104	; 0x68
 800b55c:	e7f4      	b.n	800b548 <__sfp+0x18>
 800b55e:	2104      	movs	r1, #4
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ff9f 	bl	800b4a4 <__sfmoreglue>
 800b566:	6030      	str	r0, [r6, #0]
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1f1      	bne.n	800b550 <__sfp+0x20>
 800b56c:	230c      	movs	r3, #12
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	4604      	mov	r4, r0
 800b572:	4620      	mov	r0, r4
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <__sfp+0x74>)
 800b578:	6665      	str	r5, [r4, #100]	; 0x64
 800b57a:	e9c4 5500 	strd	r5, r5, [r4]
 800b57e:	60a5      	str	r5, [r4, #8]
 800b580:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b584:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b588:	2208      	movs	r2, #8
 800b58a:	4629      	mov	r1, r5
 800b58c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b590:	f7ff fd69 	bl	800b066 <memset>
 800b594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b59c:	e7e9      	b.n	800b572 <__sfp+0x42>
 800b59e:	bf00      	nop
 800b5a0:	0800c320 	.word	0x0800c320
 800b5a4:	ffff0001 	.word	0xffff0001

0800b5a8 <_fwalk_reent>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	b914      	cbnz	r4, 800b5be <_fwalk_reent+0x16>
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b5c2:	3f01      	subs	r7, #1
 800b5c4:	d501      	bpl.n	800b5ca <_fwalk_reent+0x22>
 800b5c6:	6824      	ldr	r4, [r4, #0]
 800b5c8:	e7f5      	b.n	800b5b6 <_fwalk_reent+0xe>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d907      	bls.n	800b5e0 <_fwalk_reent+0x38>
 800b5d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	d003      	beq.n	800b5e0 <_fwalk_reent+0x38>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4640      	mov	r0, r8
 800b5dc:	47c8      	blx	r9
 800b5de:	4306      	orrs	r6, r0
 800b5e0:	3568      	adds	r5, #104	; 0x68
 800b5e2:	e7ee      	b.n	800b5c2 <_fwalk_reent+0x1a>

0800b5e4 <__swhatbuf_r>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	460e      	mov	r6, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	b096      	sub	sp, #88	; 0x58
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	da07      	bge.n	800b606 <__swhatbuf_r+0x22>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	89b3      	ldrh	r3, [r6, #12]
 800b5fc:	061a      	lsls	r2, r3, #24
 800b5fe:	d410      	bmi.n	800b622 <__swhatbuf_r+0x3e>
 800b600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b604:	e00e      	b.n	800b624 <__swhatbuf_r+0x40>
 800b606:	466a      	mov	r2, sp
 800b608:	f000 fc36 	bl	800be78 <_fstat_r>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	dbf2      	blt.n	800b5f6 <__swhatbuf_r+0x12>
 800b610:	9a01      	ldr	r2, [sp, #4]
 800b612:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b616:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b61a:	425a      	negs	r2, r3
 800b61c:	415a      	adcs	r2, r3
 800b61e:	602a      	str	r2, [r5, #0]
 800b620:	e7ee      	b.n	800b600 <__swhatbuf_r+0x1c>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	2000      	movs	r0, #0
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	b016      	add	sp, #88	; 0x58
 800b62a:	bd70      	pop	{r4, r5, r6, pc}

0800b62c <__smakebuf_r>:
 800b62c:	898b      	ldrh	r3, [r1, #12]
 800b62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b630:	079d      	lsls	r5, r3, #30
 800b632:	4606      	mov	r6, r0
 800b634:	460c      	mov	r4, r1
 800b636:	d507      	bpl.n	800b648 <__smakebuf_r+0x1c>
 800b638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	2301      	movs	r3, #1
 800b642:	6163      	str	r3, [r4, #20]
 800b644:	b002      	add	sp, #8
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	ab01      	add	r3, sp, #4
 800b64a:	466a      	mov	r2, sp
 800b64c:	f7ff ffca 	bl	800b5e4 <__swhatbuf_r>
 800b650:	9900      	ldr	r1, [sp, #0]
 800b652:	4605      	mov	r5, r0
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f877 	bl	800b748 <_malloc_r>
 800b65a:	b948      	cbnz	r0, 800b670 <__smakebuf_r+0x44>
 800b65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b660:	059a      	lsls	r2, r3, #22
 800b662:	d4ef      	bmi.n	800b644 <__smakebuf_r+0x18>
 800b664:	f023 0303 	bic.w	r3, r3, #3
 800b668:	f043 0302 	orr.w	r3, r3, #2
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	e7e3      	b.n	800b638 <__smakebuf_r+0xc>
 800b670:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <__smakebuf_r+0x7c>)
 800b672:	62b3      	str	r3, [r6, #40]	; 0x28
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	6020      	str	r0, [r4, #0]
 800b678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	9b00      	ldr	r3, [sp, #0]
 800b680:	6163      	str	r3, [r4, #20]
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	6120      	str	r0, [r4, #16]
 800b686:	b15b      	cbz	r3, 800b6a0 <__smakebuf_r+0x74>
 800b688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b68c:	4630      	mov	r0, r6
 800b68e:	f000 fc05 	bl	800be9c <_isatty_r>
 800b692:	b128      	cbz	r0, 800b6a0 <__smakebuf_r+0x74>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	f043 0301 	orr.w	r3, r3, #1
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	431d      	orrs	r5, r3
 800b6a4:	81a5      	strh	r5, [r4, #12]
 800b6a6:	e7cd      	b.n	800b644 <__smakebuf_r+0x18>
 800b6a8:	0800b499 	.word	0x0800b499

0800b6ac <_free_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d045      	beq.n	800b740 <_free_r+0x94>
 800b6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b8:	1f0c      	subs	r4, r1, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bfb8      	it	lt
 800b6be:	18e4      	addlt	r4, r4, r3
 800b6c0:	f000 fc0e 	bl	800bee0 <__malloc_lock>
 800b6c4:	4a1f      	ldr	r2, [pc, #124]	; (800b744 <_free_r+0x98>)
 800b6c6:	6813      	ldr	r3, [r2, #0]
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	b933      	cbnz	r3, 800b6da <_free_r+0x2e>
 800b6cc:	6063      	str	r3, [r4, #4]
 800b6ce:	6014      	str	r4, [r2, #0]
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d6:	f000 bc04 	b.w	800bee2 <__malloc_unlock>
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	d90c      	bls.n	800b6f8 <_free_r+0x4c>
 800b6de:	6821      	ldr	r1, [r4, #0]
 800b6e0:	1862      	adds	r2, r4, r1
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	bf04      	itt	eq
 800b6e6:	681a      	ldreq	r2, [r3, #0]
 800b6e8:	685b      	ldreq	r3, [r3, #4]
 800b6ea:	6063      	str	r3, [r4, #4]
 800b6ec:	bf04      	itt	eq
 800b6ee:	1852      	addeq	r2, r2, r1
 800b6f0:	6022      	streq	r2, [r4, #0]
 800b6f2:	6004      	str	r4, [r0, #0]
 800b6f4:	e7ec      	b.n	800b6d0 <_free_r+0x24>
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	b10a      	cbz	r2, 800b700 <_free_r+0x54>
 800b6fc:	42a2      	cmp	r2, r4
 800b6fe:	d9fa      	bls.n	800b6f6 <_free_r+0x4a>
 800b700:	6819      	ldr	r1, [r3, #0]
 800b702:	1858      	adds	r0, r3, r1
 800b704:	42a0      	cmp	r0, r4
 800b706:	d10b      	bne.n	800b720 <_free_r+0x74>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	4401      	add	r1, r0
 800b70c:	1858      	adds	r0, r3, r1
 800b70e:	4282      	cmp	r2, r0
 800b710:	6019      	str	r1, [r3, #0]
 800b712:	d1dd      	bne.n	800b6d0 <_free_r+0x24>
 800b714:	6810      	ldr	r0, [r2, #0]
 800b716:	6852      	ldr	r2, [r2, #4]
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	4401      	add	r1, r0
 800b71c:	6019      	str	r1, [r3, #0]
 800b71e:	e7d7      	b.n	800b6d0 <_free_r+0x24>
 800b720:	d902      	bls.n	800b728 <_free_r+0x7c>
 800b722:	230c      	movs	r3, #12
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	e7d3      	b.n	800b6d0 <_free_r+0x24>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	1821      	adds	r1, r4, r0
 800b72c:	428a      	cmp	r2, r1
 800b72e:	bf04      	itt	eq
 800b730:	6811      	ldreq	r1, [r2, #0]
 800b732:	6852      	ldreq	r2, [r2, #4]
 800b734:	6062      	str	r2, [r4, #4]
 800b736:	bf04      	itt	eq
 800b738:	1809      	addeq	r1, r1, r0
 800b73a:	6021      	streq	r1, [r4, #0]
 800b73c:	605c      	str	r4, [r3, #4]
 800b73e:	e7c7      	b.n	800b6d0 <_free_r+0x24>
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop
 800b744:	20004390 	.word	0x20004390

0800b748 <_malloc_r>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	1ccd      	adds	r5, r1, #3
 800b74c:	f025 0503 	bic.w	r5, r5, #3
 800b750:	3508      	adds	r5, #8
 800b752:	2d0c      	cmp	r5, #12
 800b754:	bf38      	it	cc
 800b756:	250c      	movcc	r5, #12
 800b758:	2d00      	cmp	r5, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	db01      	blt.n	800b762 <_malloc_r+0x1a>
 800b75e:	42a9      	cmp	r1, r5
 800b760:	d903      	bls.n	800b76a <_malloc_r+0x22>
 800b762:	230c      	movs	r3, #12
 800b764:	6033      	str	r3, [r6, #0]
 800b766:	2000      	movs	r0, #0
 800b768:	bd70      	pop	{r4, r5, r6, pc}
 800b76a:	f000 fbb9 	bl	800bee0 <__malloc_lock>
 800b76e:	4a21      	ldr	r2, [pc, #132]	; (800b7f4 <_malloc_r+0xac>)
 800b770:	6814      	ldr	r4, [r2, #0]
 800b772:	4621      	mov	r1, r4
 800b774:	b991      	cbnz	r1, 800b79c <_malloc_r+0x54>
 800b776:	4c20      	ldr	r4, [pc, #128]	; (800b7f8 <_malloc_r+0xb0>)
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	b91b      	cbnz	r3, 800b784 <_malloc_r+0x3c>
 800b77c:	4630      	mov	r0, r6
 800b77e:	f000 fb05 	bl	800bd8c <_sbrk_r>
 800b782:	6020      	str	r0, [r4, #0]
 800b784:	4629      	mov	r1, r5
 800b786:	4630      	mov	r0, r6
 800b788:	f000 fb00 	bl	800bd8c <_sbrk_r>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d124      	bne.n	800b7da <_malloc_r+0x92>
 800b790:	230c      	movs	r3, #12
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	4630      	mov	r0, r6
 800b796:	f000 fba4 	bl	800bee2 <__malloc_unlock>
 800b79a:	e7e4      	b.n	800b766 <_malloc_r+0x1e>
 800b79c:	680b      	ldr	r3, [r1, #0]
 800b79e:	1b5b      	subs	r3, r3, r5
 800b7a0:	d418      	bmi.n	800b7d4 <_malloc_r+0x8c>
 800b7a2:	2b0b      	cmp	r3, #11
 800b7a4:	d90f      	bls.n	800b7c6 <_malloc_r+0x7e>
 800b7a6:	600b      	str	r3, [r1, #0]
 800b7a8:	50cd      	str	r5, [r1, r3]
 800b7aa:	18cc      	adds	r4, r1, r3
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f000 fb98 	bl	800bee2 <__malloc_unlock>
 800b7b2:	f104 000b 	add.w	r0, r4, #11
 800b7b6:	1d23      	adds	r3, r4, #4
 800b7b8:	f020 0007 	bic.w	r0, r0, #7
 800b7bc:	1ac3      	subs	r3, r0, r3
 800b7be:	d0d3      	beq.n	800b768 <_malloc_r+0x20>
 800b7c0:	425a      	negs	r2, r3
 800b7c2:	50e2      	str	r2, [r4, r3]
 800b7c4:	e7d0      	b.n	800b768 <_malloc_r+0x20>
 800b7c6:	428c      	cmp	r4, r1
 800b7c8:	684b      	ldr	r3, [r1, #4]
 800b7ca:	bf16      	itet	ne
 800b7cc:	6063      	strne	r3, [r4, #4]
 800b7ce:	6013      	streq	r3, [r2, #0]
 800b7d0:	460c      	movne	r4, r1
 800b7d2:	e7eb      	b.n	800b7ac <_malloc_r+0x64>
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	6849      	ldr	r1, [r1, #4]
 800b7d8:	e7cc      	b.n	800b774 <_malloc_r+0x2c>
 800b7da:	1cc4      	adds	r4, r0, #3
 800b7dc:	f024 0403 	bic.w	r4, r4, #3
 800b7e0:	42a0      	cmp	r0, r4
 800b7e2:	d005      	beq.n	800b7f0 <_malloc_r+0xa8>
 800b7e4:	1a21      	subs	r1, r4, r0
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f000 fad0 	bl	800bd8c <_sbrk_r>
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d0cf      	beq.n	800b790 <_malloc_r+0x48>
 800b7f0:	6025      	str	r5, [r4, #0]
 800b7f2:	e7db      	b.n	800b7ac <_malloc_r+0x64>
 800b7f4:	20004390 	.word	0x20004390
 800b7f8:	20004394 	.word	0x20004394

0800b7fc <__sfputc_r>:
 800b7fc:	6893      	ldr	r3, [r2, #8]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	b410      	push	{r4}
 800b804:	6093      	str	r3, [r2, #8]
 800b806:	da08      	bge.n	800b81a <__sfputc_r+0x1e>
 800b808:	6994      	ldr	r4, [r2, #24]
 800b80a:	42a3      	cmp	r3, r4
 800b80c:	db01      	blt.n	800b812 <__sfputc_r+0x16>
 800b80e:	290a      	cmp	r1, #10
 800b810:	d103      	bne.n	800b81a <__sfputc_r+0x1e>
 800b812:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b816:	f7ff bcab 	b.w	800b170 <__swbuf_r>
 800b81a:	6813      	ldr	r3, [r2, #0]
 800b81c:	1c58      	adds	r0, r3, #1
 800b81e:	6010      	str	r0, [r2, #0]
 800b820:	7019      	strb	r1, [r3, #0]
 800b822:	4608      	mov	r0, r1
 800b824:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <__sfputs_r>:
 800b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82c:	4606      	mov	r6, r0
 800b82e:	460f      	mov	r7, r1
 800b830:	4614      	mov	r4, r2
 800b832:	18d5      	adds	r5, r2, r3
 800b834:	42ac      	cmp	r4, r5
 800b836:	d101      	bne.n	800b83c <__sfputs_r+0x12>
 800b838:	2000      	movs	r0, #0
 800b83a:	e007      	b.n	800b84c <__sfputs_r+0x22>
 800b83c:	463a      	mov	r2, r7
 800b83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff ffda 	bl	800b7fc <__sfputc_r>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d1f3      	bne.n	800b834 <__sfputs_r+0xa>
 800b84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b850 <_vfiprintf_r>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	460c      	mov	r4, r1
 800b856:	b09d      	sub	sp, #116	; 0x74
 800b858:	4617      	mov	r7, r2
 800b85a:	461d      	mov	r5, r3
 800b85c:	4606      	mov	r6, r0
 800b85e:	b118      	cbz	r0, 800b868 <_vfiprintf_r+0x18>
 800b860:	6983      	ldr	r3, [r0, #24]
 800b862:	b90b      	cbnz	r3, 800b868 <_vfiprintf_r+0x18>
 800b864:	f7ff fe34 	bl	800b4d0 <__sinit>
 800b868:	4b7c      	ldr	r3, [pc, #496]	; (800ba5c <_vfiprintf_r+0x20c>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d158      	bne.n	800b920 <_vfiprintf_r+0xd0>
 800b86e:	6874      	ldr	r4, [r6, #4]
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	0718      	lsls	r0, r3, #28
 800b874:	d55e      	bpl.n	800b934 <_vfiprintf_r+0xe4>
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05b      	beq.n	800b934 <_vfiprintf_r+0xe4>
 800b87c:	2300      	movs	r3, #0
 800b87e:	9309      	str	r3, [sp, #36]	; 0x24
 800b880:	2320      	movs	r3, #32
 800b882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b886:	2330      	movs	r3, #48	; 0x30
 800b888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b88c:	9503      	str	r5, [sp, #12]
 800b88e:	f04f 0b01 	mov.w	fp, #1
 800b892:	46b8      	mov	r8, r7
 800b894:	4645      	mov	r5, r8
 800b896:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b89a:	b10b      	cbz	r3, 800b8a0 <_vfiprintf_r+0x50>
 800b89c:	2b25      	cmp	r3, #37	; 0x25
 800b89e:	d154      	bne.n	800b94a <_vfiprintf_r+0xfa>
 800b8a0:	ebb8 0a07 	subs.w	sl, r8, r7
 800b8a4:	d00b      	beq.n	800b8be <_vfiprintf_r+0x6e>
 800b8a6:	4653      	mov	r3, sl
 800b8a8:	463a      	mov	r2, r7
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff ffbc 	bl	800b82a <__sfputs_r>
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f000 80c2 	beq.w	800ba3c <_vfiprintf_r+0x1ec>
 800b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ba:	4453      	add	r3, sl
 800b8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8be:	f898 3000 	ldrb.w	r3, [r8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80ba 	beq.w	800ba3c <_vfiprintf_r+0x1ec>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	9307      	str	r3, [sp, #28]
 800b8d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8da:	931a      	str	r3, [sp, #104]	; 0x68
 800b8dc:	46a8      	mov	r8, r5
 800b8de:	2205      	movs	r2, #5
 800b8e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b8e4:	485e      	ldr	r0, [pc, #376]	; (800ba60 <_vfiprintf_r+0x210>)
 800b8e6:	f7f4 fc73 	bl	80001d0 <memchr>
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	bb78      	cbnz	r0, 800b94e <_vfiprintf_r+0xfe>
 800b8ee:	06d9      	lsls	r1, r3, #27
 800b8f0:	bf44      	itt	mi
 800b8f2:	2220      	movmi	r2, #32
 800b8f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8f8:	071a      	lsls	r2, r3, #28
 800b8fa:	bf44      	itt	mi
 800b8fc:	222b      	movmi	r2, #43	; 0x2b
 800b8fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b902:	782a      	ldrb	r2, [r5, #0]
 800b904:	2a2a      	cmp	r2, #42	; 0x2a
 800b906:	d02a      	beq.n	800b95e <_vfiprintf_r+0x10e>
 800b908:	9a07      	ldr	r2, [sp, #28]
 800b90a:	46a8      	mov	r8, r5
 800b90c:	2000      	movs	r0, #0
 800b90e:	250a      	movs	r5, #10
 800b910:	4641      	mov	r1, r8
 800b912:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b916:	3b30      	subs	r3, #48	; 0x30
 800b918:	2b09      	cmp	r3, #9
 800b91a:	d969      	bls.n	800b9f0 <_vfiprintf_r+0x1a0>
 800b91c:	b360      	cbz	r0, 800b978 <_vfiprintf_r+0x128>
 800b91e:	e024      	b.n	800b96a <_vfiprintf_r+0x11a>
 800b920:	4b50      	ldr	r3, [pc, #320]	; (800ba64 <_vfiprintf_r+0x214>)
 800b922:	429c      	cmp	r4, r3
 800b924:	d101      	bne.n	800b92a <_vfiprintf_r+0xda>
 800b926:	68b4      	ldr	r4, [r6, #8]
 800b928:	e7a2      	b.n	800b870 <_vfiprintf_r+0x20>
 800b92a:	4b4f      	ldr	r3, [pc, #316]	; (800ba68 <_vfiprintf_r+0x218>)
 800b92c:	429c      	cmp	r4, r3
 800b92e:	bf08      	it	eq
 800b930:	68f4      	ldreq	r4, [r6, #12]
 800b932:	e79d      	b.n	800b870 <_vfiprintf_r+0x20>
 800b934:	4621      	mov	r1, r4
 800b936:	4630      	mov	r0, r6
 800b938:	f7ff fc6c 	bl	800b214 <__swsetup_r>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d09d      	beq.n	800b87c <_vfiprintf_r+0x2c>
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	b01d      	add	sp, #116	; 0x74
 800b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94a:	46a8      	mov	r8, r5
 800b94c:	e7a2      	b.n	800b894 <_vfiprintf_r+0x44>
 800b94e:	4a44      	ldr	r2, [pc, #272]	; (800ba60 <_vfiprintf_r+0x210>)
 800b950:	1a80      	subs	r0, r0, r2
 800b952:	fa0b f000 	lsl.w	r0, fp, r0
 800b956:	4318      	orrs	r0, r3
 800b958:	9004      	str	r0, [sp, #16]
 800b95a:	4645      	mov	r5, r8
 800b95c:	e7be      	b.n	800b8dc <_vfiprintf_r+0x8c>
 800b95e:	9a03      	ldr	r2, [sp, #12]
 800b960:	1d11      	adds	r1, r2, #4
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	9103      	str	r1, [sp, #12]
 800b966:	2a00      	cmp	r2, #0
 800b968:	db01      	blt.n	800b96e <_vfiprintf_r+0x11e>
 800b96a:	9207      	str	r2, [sp, #28]
 800b96c:	e004      	b.n	800b978 <_vfiprintf_r+0x128>
 800b96e:	4252      	negs	r2, r2
 800b970:	f043 0302 	orr.w	r3, r3, #2
 800b974:	9207      	str	r2, [sp, #28]
 800b976:	9304      	str	r3, [sp, #16]
 800b978:	f898 3000 	ldrb.w	r3, [r8]
 800b97c:	2b2e      	cmp	r3, #46	; 0x2e
 800b97e:	d10e      	bne.n	800b99e <_vfiprintf_r+0x14e>
 800b980:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b984:	2b2a      	cmp	r3, #42	; 0x2a
 800b986:	d138      	bne.n	800b9fa <_vfiprintf_r+0x1aa>
 800b988:	9b03      	ldr	r3, [sp, #12]
 800b98a:	1d1a      	adds	r2, r3, #4
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	9203      	str	r2, [sp, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	bfb8      	it	lt
 800b994:	f04f 33ff 	movlt.w	r3, #4294967295
 800b998:	f108 0802 	add.w	r8, r8, #2
 800b99c:	9305      	str	r3, [sp, #20]
 800b99e:	4d33      	ldr	r5, [pc, #204]	; (800ba6c <_vfiprintf_r+0x21c>)
 800b9a0:	f898 1000 	ldrb.w	r1, [r8]
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fc12 	bl	80001d0 <memchr>
 800b9ac:	b140      	cbz	r0, 800b9c0 <_vfiprintf_r+0x170>
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	1b40      	subs	r0, r0, r5
 800b9b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b9b6:	9b04      	ldr	r3, [sp, #16]
 800b9b8:	4303      	orrs	r3, r0
 800b9ba:	f108 0801 	add.w	r8, r8, #1
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	f898 1000 	ldrb.w	r1, [r8]
 800b9c4:	482a      	ldr	r0, [pc, #168]	; (800ba70 <_vfiprintf_r+0x220>)
 800b9c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ca:	2206      	movs	r2, #6
 800b9cc:	f108 0701 	add.w	r7, r8, #1
 800b9d0:	f7f4 fbfe 	bl	80001d0 <memchr>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d037      	beq.n	800ba48 <_vfiprintf_r+0x1f8>
 800b9d8:	4b26      	ldr	r3, [pc, #152]	; (800ba74 <_vfiprintf_r+0x224>)
 800b9da:	bb1b      	cbnz	r3, 800ba24 <_vfiprintf_r+0x1d4>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	3307      	adds	r3, #7
 800b9e0:	f023 0307 	bic.w	r3, r3, #7
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ea:	444b      	add	r3, r9
 800b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ee:	e750      	b.n	800b892 <_vfiprintf_r+0x42>
 800b9f0:	fb05 3202 	mla	r2, r5, r2, r3
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	4688      	mov	r8, r1
 800b9f8:	e78a      	b.n	800b910 <_vfiprintf_r+0xc0>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f108 0801 	add.w	r8, r8, #1
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	4619      	mov	r1, r3
 800ba04:	250a      	movs	r5, #10
 800ba06:	4640      	mov	r0, r8
 800ba08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba0c:	3a30      	subs	r2, #48	; 0x30
 800ba0e:	2a09      	cmp	r2, #9
 800ba10:	d903      	bls.n	800ba1a <_vfiprintf_r+0x1ca>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0c3      	beq.n	800b99e <_vfiprintf_r+0x14e>
 800ba16:	9105      	str	r1, [sp, #20]
 800ba18:	e7c1      	b.n	800b99e <_vfiprintf_r+0x14e>
 800ba1a:	fb05 2101 	mla	r1, r5, r1, r2
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4680      	mov	r8, r0
 800ba22:	e7f0      	b.n	800ba06 <_vfiprintf_r+0x1b6>
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <_vfiprintf_r+0x228>)
 800ba2c:	a904      	add	r1, sp, #16
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f3af 8000 	nop.w
 800ba34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba38:	4681      	mov	r9, r0
 800ba3a:	d1d5      	bne.n	800b9e8 <_vfiprintf_r+0x198>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	065b      	lsls	r3, r3, #25
 800ba40:	f53f af7e 	bmi.w	800b940 <_vfiprintf_r+0xf0>
 800ba44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba46:	e77d      	b.n	800b944 <_vfiprintf_r+0xf4>
 800ba48:	ab03      	add	r3, sp, #12
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <_vfiprintf_r+0x228>)
 800ba50:	a904      	add	r1, sp, #16
 800ba52:	4630      	mov	r0, r6
 800ba54:	f000 f888 	bl	800bb68 <_printf_i>
 800ba58:	e7ec      	b.n	800ba34 <_vfiprintf_r+0x1e4>
 800ba5a:	bf00      	nop
 800ba5c:	0800c344 	.word	0x0800c344
 800ba60:	0800c384 	.word	0x0800c384
 800ba64:	0800c364 	.word	0x0800c364
 800ba68:	0800c324 	.word	0x0800c324
 800ba6c:	0800c38a 	.word	0x0800c38a
 800ba70:	0800c38e 	.word	0x0800c38e
 800ba74:	00000000 	.word	0x00000000
 800ba78:	0800b82b 	.word	0x0800b82b

0800ba7c <_printf_common>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	4691      	mov	r9, r2
 800ba82:	461f      	mov	r7, r3
 800ba84:	688a      	ldr	r2, [r1, #8]
 800ba86:	690b      	ldr	r3, [r1, #16]
 800ba88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	bfb8      	it	lt
 800ba90:	4613      	movlt	r3, r2
 800ba92:	f8c9 3000 	str.w	r3, [r9]
 800ba96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	b112      	cbz	r2, 800baa6 <_printf_common+0x2a>
 800baa0:	3301      	adds	r3, #1
 800baa2:	f8c9 3000 	str.w	r3, [r9]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	0699      	lsls	r1, r3, #26
 800baaa:	bf42      	ittt	mi
 800baac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bab0:	3302      	addmi	r3, #2
 800bab2:	f8c9 3000 	strmi.w	r3, [r9]
 800bab6:	6825      	ldr	r5, [r4, #0]
 800bab8:	f015 0506 	ands.w	r5, r5, #6
 800babc:	d107      	bne.n	800bace <_printf_common+0x52>
 800babe:	f104 0a19 	add.w	sl, r4, #25
 800bac2:	68e3      	ldr	r3, [r4, #12]
 800bac4:	f8d9 2000 	ldr.w	r2, [r9]
 800bac8:	1a9b      	subs	r3, r3, r2
 800baca:	42ab      	cmp	r3, r5
 800bacc:	dc28      	bgt.n	800bb20 <_printf_common+0xa4>
 800bace:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	3300      	adds	r3, #0
 800bad6:	bf18      	it	ne
 800bad8:	2301      	movne	r3, #1
 800bada:	0692      	lsls	r2, r2, #26
 800badc:	d42d      	bmi.n	800bb3a <_printf_common+0xbe>
 800bade:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae2:	4639      	mov	r1, r7
 800bae4:	4630      	mov	r0, r6
 800bae6:	47c0      	blx	r8
 800bae8:	3001      	adds	r0, #1
 800baea:	d020      	beq.n	800bb2e <_printf_common+0xb2>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	68e5      	ldr	r5, [r4, #12]
 800baf0:	f8d9 2000 	ldr.w	r2, [r9]
 800baf4:	f003 0306 	and.w	r3, r3, #6
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	bf08      	it	eq
 800bafc:	1aad      	subeq	r5, r5, r2
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	bf0c      	ite	eq
 800bb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb08:	2500      	movne	r5, #0
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	bfc4      	itt	gt
 800bb0e:	1a9b      	subgt	r3, r3, r2
 800bb10:	18ed      	addgt	r5, r5, r3
 800bb12:	f04f 0900 	mov.w	r9, #0
 800bb16:	341a      	adds	r4, #26
 800bb18:	454d      	cmp	r5, r9
 800bb1a:	d11a      	bne.n	800bb52 <_printf_common+0xd6>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e008      	b.n	800bb32 <_printf_common+0xb6>
 800bb20:	2301      	movs	r3, #1
 800bb22:	4652      	mov	r2, sl
 800bb24:	4639      	mov	r1, r7
 800bb26:	4630      	mov	r0, r6
 800bb28:	47c0      	blx	r8
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d103      	bne.n	800bb36 <_printf_common+0xba>
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	3501      	adds	r5, #1
 800bb38:	e7c3      	b.n	800bac2 <_printf_common+0x46>
 800bb3a:	18e1      	adds	r1, r4, r3
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	2030      	movs	r0, #48	; 0x30
 800bb40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb44:	4422      	add	r2, r4
 800bb46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb4e:	3302      	adds	r3, #2
 800bb50:	e7c5      	b.n	800bade <_printf_common+0x62>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4622      	mov	r2, r4
 800bb56:	4639      	mov	r1, r7
 800bb58:	4630      	mov	r0, r6
 800bb5a:	47c0      	blx	r8
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d0e6      	beq.n	800bb2e <_printf_common+0xb2>
 800bb60:	f109 0901 	add.w	r9, r9, #1
 800bb64:	e7d8      	b.n	800bb18 <_printf_common+0x9c>
	...

0800bb68 <_printf_i>:
 800bb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb70:	460c      	mov	r4, r1
 800bb72:	7e09      	ldrb	r1, [r1, #24]
 800bb74:	b085      	sub	sp, #20
 800bb76:	296e      	cmp	r1, #110	; 0x6e
 800bb78:	4617      	mov	r7, r2
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	4698      	mov	r8, r3
 800bb7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb80:	f000 80b3 	beq.w	800bcea <_printf_i+0x182>
 800bb84:	d822      	bhi.n	800bbcc <_printf_i+0x64>
 800bb86:	2963      	cmp	r1, #99	; 0x63
 800bb88:	d036      	beq.n	800bbf8 <_printf_i+0x90>
 800bb8a:	d80a      	bhi.n	800bba2 <_printf_i+0x3a>
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	f000 80b9 	beq.w	800bd04 <_printf_i+0x19c>
 800bb92:	2958      	cmp	r1, #88	; 0x58
 800bb94:	f000 8083 	beq.w	800bc9e <_printf_i+0x136>
 800bb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bba0:	e032      	b.n	800bc08 <_printf_i+0xa0>
 800bba2:	2964      	cmp	r1, #100	; 0x64
 800bba4:	d001      	beq.n	800bbaa <_printf_i+0x42>
 800bba6:	2969      	cmp	r1, #105	; 0x69
 800bba8:	d1f6      	bne.n	800bb98 <_printf_i+0x30>
 800bbaa:	6820      	ldr	r0, [r4, #0]
 800bbac:	6813      	ldr	r3, [r2, #0]
 800bbae:	0605      	lsls	r5, r0, #24
 800bbb0:	f103 0104 	add.w	r1, r3, #4
 800bbb4:	d52a      	bpl.n	800bc0c <_printf_i+0xa4>
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	6011      	str	r1, [r2, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	da03      	bge.n	800bbc6 <_printf_i+0x5e>
 800bbbe:	222d      	movs	r2, #45	; 0x2d
 800bbc0:	425b      	negs	r3, r3
 800bbc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbc6:	486f      	ldr	r0, [pc, #444]	; (800bd84 <_printf_i+0x21c>)
 800bbc8:	220a      	movs	r2, #10
 800bbca:	e039      	b.n	800bc40 <_printf_i+0xd8>
 800bbcc:	2973      	cmp	r1, #115	; 0x73
 800bbce:	f000 809d 	beq.w	800bd0c <_printf_i+0x1a4>
 800bbd2:	d808      	bhi.n	800bbe6 <_printf_i+0x7e>
 800bbd4:	296f      	cmp	r1, #111	; 0x6f
 800bbd6:	d020      	beq.n	800bc1a <_printf_i+0xb2>
 800bbd8:	2970      	cmp	r1, #112	; 0x70
 800bbda:	d1dd      	bne.n	800bb98 <_printf_i+0x30>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	f043 0320 	orr.w	r3, r3, #32
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	e003      	b.n	800bbee <_printf_i+0x86>
 800bbe6:	2975      	cmp	r1, #117	; 0x75
 800bbe8:	d017      	beq.n	800bc1a <_printf_i+0xb2>
 800bbea:	2978      	cmp	r1, #120	; 0x78
 800bbec:	d1d4      	bne.n	800bb98 <_printf_i+0x30>
 800bbee:	2378      	movs	r3, #120	; 0x78
 800bbf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbf4:	4864      	ldr	r0, [pc, #400]	; (800bd88 <_printf_i+0x220>)
 800bbf6:	e055      	b.n	800bca4 <_printf_i+0x13c>
 800bbf8:	6813      	ldr	r3, [r2, #0]
 800bbfa:	1d19      	adds	r1, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6011      	str	r1, [r2, #0]
 800bc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e08c      	b.n	800bd26 <_printf_i+0x1be>
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6011      	str	r1, [r2, #0]
 800bc10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc14:	bf18      	it	ne
 800bc16:	b21b      	sxthne	r3, r3
 800bc18:	e7cf      	b.n	800bbba <_printf_i+0x52>
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	6825      	ldr	r5, [r4, #0]
 800bc1e:	1d18      	adds	r0, r3, #4
 800bc20:	6010      	str	r0, [r2, #0]
 800bc22:	0628      	lsls	r0, r5, #24
 800bc24:	d501      	bpl.n	800bc2a <_printf_i+0xc2>
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	e002      	b.n	800bc30 <_printf_i+0xc8>
 800bc2a:	0668      	lsls	r0, r5, #25
 800bc2c:	d5fb      	bpl.n	800bc26 <_printf_i+0xbe>
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	4854      	ldr	r0, [pc, #336]	; (800bd84 <_printf_i+0x21c>)
 800bc32:	296f      	cmp	r1, #111	; 0x6f
 800bc34:	bf14      	ite	ne
 800bc36:	220a      	movne	r2, #10
 800bc38:	2208      	moveq	r2, #8
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc40:	6865      	ldr	r5, [r4, #4]
 800bc42:	60a5      	str	r5, [r4, #8]
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	f2c0 8095 	blt.w	800bd74 <_printf_i+0x20c>
 800bc4a:	6821      	ldr	r1, [r4, #0]
 800bc4c:	f021 0104 	bic.w	r1, r1, #4
 800bc50:	6021      	str	r1, [r4, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d13d      	bne.n	800bcd2 <_printf_i+0x16a>
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	f040 808e 	bne.w	800bd78 <_printf_i+0x210>
 800bc5c:	4665      	mov	r5, ip
 800bc5e:	2a08      	cmp	r2, #8
 800bc60:	d10b      	bne.n	800bc7a <_printf_i+0x112>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	07db      	lsls	r3, r3, #31
 800bc66:	d508      	bpl.n	800bc7a <_printf_i+0x112>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	6862      	ldr	r2, [r4, #4]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	bfde      	ittt	le
 800bc70:	2330      	movle	r3, #48	; 0x30
 800bc72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc7a:	ebac 0305 	sub.w	r3, ip, r5
 800bc7e:	6123      	str	r3, [r4, #16]
 800bc80:	f8cd 8000 	str.w	r8, [sp]
 800bc84:	463b      	mov	r3, r7
 800bc86:	aa03      	add	r2, sp, #12
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff fef6 	bl	800ba7c <_printf_common>
 800bc90:	3001      	adds	r0, #1
 800bc92:	d14d      	bne.n	800bd30 <_printf_i+0x1c8>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	b005      	add	sp, #20
 800bc9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	4839      	ldr	r0, [pc, #228]	; (800bd84 <_printf_i+0x21c>)
 800bca0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bca4:	6813      	ldr	r3, [r2, #0]
 800bca6:	6821      	ldr	r1, [r4, #0]
 800bca8:	1d1d      	adds	r5, r3, #4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6015      	str	r5, [r2, #0]
 800bcae:	060a      	lsls	r2, r1, #24
 800bcb0:	d50b      	bpl.n	800bcca <_printf_i+0x162>
 800bcb2:	07ca      	lsls	r2, r1, #31
 800bcb4:	bf44      	itt	mi
 800bcb6:	f041 0120 	orrmi.w	r1, r1, #32
 800bcba:	6021      	strmi	r1, [r4, #0]
 800bcbc:	b91b      	cbnz	r3, 800bcc6 <_printf_i+0x15e>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	f022 0220 	bic.w	r2, r2, #32
 800bcc4:	6022      	str	r2, [r4, #0]
 800bcc6:	2210      	movs	r2, #16
 800bcc8:	e7b7      	b.n	800bc3a <_printf_i+0xd2>
 800bcca:	064d      	lsls	r5, r1, #25
 800bccc:	bf48      	it	mi
 800bcce:	b29b      	uxthmi	r3, r3
 800bcd0:	e7ef      	b.n	800bcb2 <_printf_i+0x14a>
 800bcd2:	4665      	mov	r5, ip
 800bcd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcd8:	fb02 3311 	mls	r3, r2, r1, r3
 800bcdc:	5cc3      	ldrb	r3, [r0, r3]
 800bcde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bce2:	460b      	mov	r3, r1
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d1f5      	bne.n	800bcd4 <_printf_i+0x16c>
 800bce8:	e7b9      	b.n	800bc5e <_printf_i+0xf6>
 800bcea:	6813      	ldr	r3, [r2, #0]
 800bcec:	6825      	ldr	r5, [r4, #0]
 800bcee:	6961      	ldr	r1, [r4, #20]
 800bcf0:	1d18      	adds	r0, r3, #4
 800bcf2:	6010      	str	r0, [r2, #0]
 800bcf4:	0628      	lsls	r0, r5, #24
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	d501      	bpl.n	800bcfe <_printf_i+0x196>
 800bcfa:	6019      	str	r1, [r3, #0]
 800bcfc:	e002      	b.n	800bd04 <_printf_i+0x19c>
 800bcfe:	066a      	lsls	r2, r5, #25
 800bd00:	d5fb      	bpl.n	800bcfa <_printf_i+0x192>
 800bd02:	8019      	strh	r1, [r3, #0]
 800bd04:	2300      	movs	r3, #0
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	4665      	mov	r5, ip
 800bd0a:	e7b9      	b.n	800bc80 <_printf_i+0x118>
 800bd0c:	6813      	ldr	r3, [r2, #0]
 800bd0e:	1d19      	adds	r1, r3, #4
 800bd10:	6011      	str	r1, [r2, #0]
 800bd12:	681d      	ldr	r5, [r3, #0]
 800bd14:	6862      	ldr	r2, [r4, #4]
 800bd16:	2100      	movs	r1, #0
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7f4 fa59 	bl	80001d0 <memchr>
 800bd1e:	b108      	cbz	r0, 800bd24 <_printf_i+0x1bc>
 800bd20:	1b40      	subs	r0, r0, r5
 800bd22:	6060      	str	r0, [r4, #4]
 800bd24:	6863      	ldr	r3, [r4, #4]
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd2e:	e7a7      	b.n	800bc80 <_printf_i+0x118>
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	462a      	mov	r2, r5
 800bd34:	4639      	mov	r1, r7
 800bd36:	4630      	mov	r0, r6
 800bd38:	47c0      	blx	r8
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	d0aa      	beq.n	800bc94 <_printf_i+0x12c>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	079b      	lsls	r3, r3, #30
 800bd42:	d413      	bmi.n	800bd6c <_printf_i+0x204>
 800bd44:	68e0      	ldr	r0, [r4, #12]
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	4298      	cmp	r0, r3
 800bd4a:	bfb8      	it	lt
 800bd4c:	4618      	movlt	r0, r3
 800bd4e:	e7a3      	b.n	800bc98 <_printf_i+0x130>
 800bd50:	2301      	movs	r3, #1
 800bd52:	464a      	mov	r2, r9
 800bd54:	4639      	mov	r1, r7
 800bd56:	4630      	mov	r0, r6
 800bd58:	47c0      	blx	r8
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d09a      	beq.n	800bc94 <_printf_i+0x12c>
 800bd5e:	3501      	adds	r5, #1
 800bd60:	68e3      	ldr	r3, [r4, #12]
 800bd62:	9a03      	ldr	r2, [sp, #12]
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	42ab      	cmp	r3, r5
 800bd68:	dcf2      	bgt.n	800bd50 <_printf_i+0x1e8>
 800bd6a:	e7eb      	b.n	800bd44 <_printf_i+0x1dc>
 800bd6c:	2500      	movs	r5, #0
 800bd6e:	f104 0919 	add.w	r9, r4, #25
 800bd72:	e7f5      	b.n	800bd60 <_printf_i+0x1f8>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1ac      	bne.n	800bcd2 <_printf_i+0x16a>
 800bd78:	7803      	ldrb	r3, [r0, #0]
 800bd7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd82:	e76c      	b.n	800bc5e <_printf_i+0xf6>
 800bd84:	0800c395 	.word	0x0800c395
 800bd88:	0800c3a6 	.word	0x0800c3a6

0800bd8c <_sbrk_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4c06      	ldr	r4, [pc, #24]	; (800bda8 <_sbrk_r+0x1c>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4605      	mov	r5, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	f7f5 ff10 	bl	8001bbc <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_sbrk_r+0x1a>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_sbrk_r+0x1a>
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20004794 	.word	0x20004794

0800bdac <__sread>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	460c      	mov	r4, r1
 800bdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb4:	f000 f896 	bl	800bee4 <_read_r>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	bfab      	itete	ge
 800bdbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bdc0:	181b      	addge	r3, r3, r0
 800bdc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdc6:	bfac      	ite	ge
 800bdc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdca:	81a3      	strhlt	r3, [r4, #12]
 800bdcc:	bd10      	pop	{r4, pc}

0800bdce <__swrite>:
 800bdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd2:	461f      	mov	r7, r3
 800bdd4:	898b      	ldrh	r3, [r1, #12]
 800bdd6:	05db      	lsls	r3, r3, #23
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	4616      	mov	r6, r2
 800bdde:	d505      	bpl.n	800bdec <__swrite+0x1e>
 800bde0:	2302      	movs	r3, #2
 800bde2:	2200      	movs	r2, #0
 800bde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde8:	f000 f868 	bl	800bebc <_lseek_r>
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	463b      	mov	r3, r7
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be02:	f000 b817 	b.w	800be34 <_write_r>

0800be06 <__sseek>:
 800be06:	b510      	push	{r4, lr}
 800be08:	460c      	mov	r4, r1
 800be0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0e:	f000 f855 	bl	800bebc <_lseek_r>
 800be12:	1c43      	adds	r3, r0, #1
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	bf15      	itete	ne
 800be18:	6560      	strne	r0, [r4, #84]	; 0x54
 800be1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be22:	81a3      	strheq	r3, [r4, #12]
 800be24:	bf18      	it	ne
 800be26:	81a3      	strhne	r3, [r4, #12]
 800be28:	bd10      	pop	{r4, pc}

0800be2a <__sclose>:
 800be2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be2e:	f000 b813 	b.w	800be58 <_close_r>
	...

0800be34 <_write_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4c07      	ldr	r4, [pc, #28]	; (800be54 <_write_r+0x20>)
 800be38:	4605      	mov	r5, r0
 800be3a:	4608      	mov	r0, r1
 800be3c:	4611      	mov	r1, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	6022      	str	r2, [r4, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	f7f5 fe69 	bl	8001b1a <_write>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_write_r+0x1e>
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_write_r+0x1e>
 800be50:	602b      	str	r3, [r5, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20004794 	.word	0x20004794

0800be58 <_close_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4c06      	ldr	r4, [pc, #24]	; (800be74 <_close_r+0x1c>)
 800be5c:	2300      	movs	r3, #0
 800be5e:	4605      	mov	r5, r0
 800be60:	4608      	mov	r0, r1
 800be62:	6023      	str	r3, [r4, #0]
 800be64:	f7f5 fe75 	bl	8001b52 <_close>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_close_r+0x1a>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_close_r+0x1a>
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20004794 	.word	0x20004794

0800be78 <_fstat_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4c07      	ldr	r4, [pc, #28]	; (800be98 <_fstat_r+0x20>)
 800be7c:	2300      	movs	r3, #0
 800be7e:	4605      	mov	r5, r0
 800be80:	4608      	mov	r0, r1
 800be82:	4611      	mov	r1, r2
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	f7f5 fe70 	bl	8001b6a <_fstat>
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	d102      	bne.n	800be94 <_fstat_r+0x1c>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	b103      	cbz	r3, 800be94 <_fstat_r+0x1c>
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	bd38      	pop	{r3, r4, r5, pc}
 800be96:	bf00      	nop
 800be98:	20004794 	.word	0x20004794

0800be9c <_isatty_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4c06      	ldr	r4, [pc, #24]	; (800beb8 <_isatty_r+0x1c>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4605      	mov	r5, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	f7f5 fe6f 	bl	8001b8a <_isatty>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_isatty_r+0x1a>
 800beb0:	6823      	ldr	r3, [r4, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_isatty_r+0x1a>
 800beb4:	602b      	str	r3, [r5, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	20004794 	.word	0x20004794

0800bebc <_lseek_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4c07      	ldr	r4, [pc, #28]	; (800bedc <_lseek_r+0x20>)
 800bec0:	4605      	mov	r5, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	6022      	str	r2, [r4, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f5 fe68 	bl	8001ba0 <_lseek>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_lseek_r+0x1e>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	b103      	cbz	r3, 800beda <_lseek_r+0x1e>
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20004794 	.word	0x20004794

0800bee0 <__malloc_lock>:
 800bee0:	4770      	bx	lr

0800bee2 <__malloc_unlock>:
 800bee2:	4770      	bx	lr

0800bee4 <_read_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4c07      	ldr	r4, [pc, #28]	; (800bf04 <_read_r+0x20>)
 800bee8:	4605      	mov	r5, r0
 800beea:	4608      	mov	r0, r1
 800beec:	4611      	mov	r1, r2
 800beee:	2200      	movs	r2, #0
 800bef0:	6022      	str	r2, [r4, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	f7f5 fdf4 	bl	8001ae0 <_read>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_read_r+0x1e>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_read_r+0x1e>
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20004794 	.word	0x20004794

0800bf08 <_init>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr

0800bf14 <_fini>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	bf00      	nop
 800bf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1a:	bc08      	pop	{r3}
 800bf1c:	469e      	mov	lr, r3
 800bf1e:	4770      	bx	lr
